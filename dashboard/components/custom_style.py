"""
T·ªáp n√†y ch·ª©a c√°c ph·∫ßn CSS t√πy ch·ªânh v√† h√†m t·∫°o c√°c th√†nh ph·∫ßn giao di·ªán ƒë·∫πp m·∫Øt
"""
import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from datetime import datetime

def load_custom_css():
    """
    T·∫£i CSS t√πy ch·ªânh cho giao di·ªán
    """
    custom_css = """
    <style>
    /* C·∫£i thi·ªán m√†u s·∫Øc ch·ªß ƒë·∫°o */
    .main {
        background-color: #f7f9fc;
    }
    
    /* T√πy ch·ªânh thanh ti√™u ƒë·ªÅ */
    .css-1dp5vir {
        background-image: linear-gradient(90deg, #4f8bf9, #485ec4);
    }
    
    /* L√†m cho c√°c th·∫ª v√† b·∫£ng hi·ªÉn th·ªã ƒë·∫πp h∆°n */
    .stTabs {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        padding: 10px;
    }
    
    /* T√πy ch·ªânh ki·ªÉu d√°ng c√°c th·∫ª */
    .stTab {
        background-color: #f0f2f6;
        border-radius: 5px;
        transition: all 0.3s ease;
    }
    
    .stTab:hover {
        background-color: #e1e5ed;
    }
    
    /* L√†m cho c√°c th·∫ª active n·ªïi b·∫≠t */
    .stTab [data-baseweb="tab"][aria-selected="true"] {
        background-color: #485ec4;
        color: white;
    }
    
    /* Style cho c√°c container */
    div[data-testid="stVerticalBlock"] > div {
        background-color: white;
        border-radius: 8px;
        padding: 5px;
        margin-bottom: 10px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    /* L√†m cho metrics ƒë·∫πp h∆°n */
    [data-testid="stMetric"] {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px 10px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: transform 0.2s;
    }
    
    [data-testid="stMetric"]:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    /* Styling cho b·∫£ng */
    .dataframe {
        border-collapse: collapse;
        width: 100%;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .dataframe th {
        background-color: #485ec4;
        color: white;
        font-weight: normal;
        padding: 12px;
        text-align: left;
    }
    
    .dataframe td {
        padding: 10px;
        border-bottom: 1px solid #eaeaea;
    }
    
    .dataframe tr:nth-child(even) {
        background-color: #f9f9f9;
    }
    
    .dataframe tr:hover {
        background-color: #f0f2f6;
    }
    
    /* ƒê·∫πp h∆°n cho c√°c expander */
    .streamlit-expanderHeader {
        background-color: #f0f2f6;
        border-radius: 5px;
    }
    
    /* T√πy ch·ªânh thanh progress */
    .stProgress > div > div {
        background-image: linear-gradient(to right, #4f8bf9, #485ec4);
    }
    
    /* T√πy ch·ªânh c√°c card */
    div.card {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    div.card-buy {
        border-left: 4px solid #2ecc71;
    }
    
    div.card-sell {
        border-left: 4px solid #e74c3c;
    }
    
    div.card-neutral {
        border-left: 4px solid #95a5a6;
    }
    
    /* T√πy ch·ªânh m√†u s·∫Øc cho c√°c ch·ªâ b√°o d·ª± ƒëo√°n */
    .indicator-long {
        color: #2ecc71;
        font-weight: bold;
    }
    
    .indicator-short {
        color: #e74c3c;
        font-weight: bold;
    }
    
    .indicator-neutral {
        color: #95a5a6;
        font-weight: bold;
    }
    
    /* Animation cho loading */
    @keyframes pulse {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
    
    .loading-pulse {
        animation: pulse 1.5s infinite ease-in-out;
    }
    
    /* Custom gauge chart */
    .gauge-value {
        font-size: 24px;
        font-weight: bold;
    }
    
    /* N√∫t ƒë·∫πp */
    div.stButton > button {
        background-color: #485ec4;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    div.stButton > button:hover {
        background-color: #4f8bf9;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    
    /* Th√¥ng b√°o ƒë·∫πp */
    div.stAlert {
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    </style>
    """
    st.markdown(custom_css, unsafe_allow_html=True)

def create_metric_card(title, value, subtitle=None, icon=None, color="blue", is_percent=False):
    """
    T·∫°o m·ªôt card hi·ªÉn th·ªã s·ªë li·ªáu ƒë·∫πp m·∫Øt
    
    Args:
        title (str): Ti√™u ƒë·ªÅ card
        value: Gi√° tr·ªã ch√≠nh hi·ªÉn th·ªã
        subtitle (str): Ti√™u ƒë·ªÅ ph·ª• (c√≥ th·ªÉ l√† None)
        icon (str): Bi·ªÉu t∆∞·ª£ng (v√≠ d·ª•: "üìà")
        color (str): M√†u s·∫Øc c·ªßa card
        is_percent (bool): C√≥ hi·ªÉn th·ªã d·∫°ng % kh√¥ng
    """
    # X·ª≠ l√Ω gi√° tr·ªã value ƒë·∫ßu v√†o ƒë·ªÉ tr√°nh c√°c l·ªói khi hi·ªÉn th·ªã
    if isinstance(value, str) and "<div>" in value or "</div>" in value:
        # N·∫øu ch·ª©a HTML tags, s·ª≠ d·ª•ng gi√° tr·ªã ƒë∆°n gi·∫£n thay th·∫ø
        value_str = "N/A"
    else:
        # ƒê·ªãnh d·∫°ng gi√° tr·ªã b√¨nh th∆∞·ªùng
        try:
            value_str = f"{float(value):.2f}%" if is_percent else f"{value}"
        except (ValueError, TypeError):
            # N·∫øu kh√¥ng th·ªÉ chuy·ªÉn th√†nh s·ªë, hi·ªÉn th·ªã nguy√™n d·∫°ng
            value_str = f"{value}%" if is_percent else f"{value}"
    
    # X·ª≠ l√Ω icon
    icon_html = f"<span style='font-size: 24px;'>{icon}</span>" if icon else ""
    
    color_map = {
        "blue": "#485ec4",
        "green": "#2ecc71",
        "red": "#e74c3c",
        "yellow": "#f1c40f",
        "gray": "#95a5a6"
    }
    
    border_color = color_map.get(color, "#485ec4")
    
    # T·∫°o HTML an to√†n
    card_html = f"""
    <div style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border-left: 4px solid {border_color}; margin-bottom: 15px;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <div style="color: #7f8c8d; font-size: 14px;">{title}</div>
                <div style="font-size: 28px; font-weight: bold; color: #2c3e50;">{value_str}</div>
                {f'<div style="color: #95a5a6; font-size: 12px;">{subtitle}</div>' if subtitle else ''}
            </div>
            <div>
                {icon_html}
            </div>
        </div>
    </div>
    """
    st.markdown(card_html, unsafe_allow_html=True)

def create_price_card(price, change, change_percent, last_update=None):
    """
    T·∫°o card hi·ªÉn th·ªã gi√° v√† % thay ƒë·ªïi ƒë·∫πp m·∫Øt
    
    Args:
        price (float): Gi√° hi·ªán t·∫°i
        change (float): Thay ƒë·ªïi so v·ªõi gi√° tr∆∞·ªõc
        change_percent (float): Ph·∫ßn trƒÉm thay ƒë·ªïi
        last_update (str): Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi
    """
    color = "green" if change >= 0 else "red"
    icon = "üìà" if change >= 0 else "üìâ"
    
    price_html = f"""
    <div style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); margin-bottom: 15px;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <div style="color: #7f8c8d; font-size: 16px;">ETHUSDT</div>
                <div style="font-size: 32px; font-weight: bold;">${price:.2f}</div>
                <div style="color: {'#2ecc71' if change >= 0 else '#e74c3c'}; font-size: 14px; display: flex; align-items: center;">
                    <span>${change:.2f} ({change_percent:.2f}%)</span>
                </div>
                {f'<div style="color: #95a5a6; font-size: 12px; margin-top: 5px;">C·∫≠p nh·∫≠t: {last_update}</div>' if last_update else ''}
            </div>
            <div>
                <span style="font-size: 48px;">{icon}</span>
            </div>
        </div>
    </div>
    """
    st.markdown(price_html, unsafe_allow_html=True)

def create_prediction_card(prediction):
    """
    T·∫°o card hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n ƒë·∫πp m·∫Øt
    
    Args:
        prediction (dict): Th√¥ng tin d·ª± ƒëo√°n
    """
    if not prediction:
        st.info("Ch∆∞a c√≥ d·ª± ƒëo√°n")
        return
    
    # X√°c ƒë·ªãnh m√†u s·∫Øc v√† bi·ªÉu t∆∞·ª£ng d·ª±a tr√™n xu h∆∞·ªõng
    colors = {"LONG": "#2ecc71", "SHORT": "#e74c3c", "NEUTRAL": "#95a5a6"}
    icons = {"LONG": "üìà", "SHORT": "üìâ", "NEUTRAL": "üìä"}
    
    trend = prediction.get("trend", "NEUTRAL")
    color = colors.get(trend, "#95a5a6")
    icon = icons.get(trend, "üìä")
    
    # T√≠nh to√°n hi·ªÉn th·ªã th·ªùi gian
    timestamp = prediction.get("timestamp", "")
    time_diff = ""
    if timestamp:
        try:
            pred_time = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
            now = datetime.now()
            diff = (now - pred_time).total_seconds() / 60
            if diff < 60:
                time_diff = f"{int(diff)} ph√∫t tr∆∞·ªõc"
            else:
                time_diff = f"{int(diff/60)} gi·ªù {int(diff%60)} ph√∫t tr∆∞·ªõc"
        except:
            time_diff = timestamp
    
    # T·∫°o card HTML
    card_html = f"""
    <div style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border-left: 4px solid {color}; margin-bottom: 15px;">
        <div style="display: flex; justify-content: space-between; align-items: flex-start;">
            <div style="flex-grow: 1;">
                <div style="font-size: 24px; font-weight: bold; color: {color};">
                    {trend}
                    <span style="font-size: 14px; color: #7f8c8d; font-weight: normal; margin-left: 10px;">
                        {time_diff}
                    </span>
                </div>
                
                <div style="display: flex; margin-top: 10px;">
                    <div style="flex: 1;">
                        <div style="color: #7f8c8d; font-size: 14px;">Gi√° hi·ªán t·∫°i</div>
                        <div style="font-size: 18px; font-weight: bold;">${prediction.get('price', 0):.2f}</div>
                    </div>
                    <div style="flex: 1;">
                        <div style="color: #7f8c8d; font-size: 14px;">Gi√° m·ª•c ti√™u</div>
                        <div style="font-size: 18px; font-weight: bold;">${prediction.get('target_price', 0):.2f}</div>
                    </div>
                    <div style="flex: 1;">
                        <div style="color: #7f8c8d; font-size: 14px;">ƒê·ªô tin c·∫≠y</div>
                        <div style="font-size: 18px; font-weight: bold;">{prediction.get('confidence', 0)*100:.1f}%</div>
                    </div>
                </div>
                
                <div style="margin-top: 15px;">
                    <div style="color: #7f8c8d; font-size: 14px;">Th·ªùi gian d·ª± ƒëo√°n</div>
                    <div style="margin-top: 5px;">
                        <div style="background-color: #f0f2f6; height: 8px; border-radius: 4px; position: relative;">
                            <div style="position: absolute; height: 8px; border-radius: 4px; width: {min(prediction.get('valid_minutes_left', 0)/prediction.get('valid_for_minutes', 30)*100, 100)}%; background-color: {color};"></div>
                        </div>
                        <div style="display: flex; justify-content: space-between; margin-top: 5px; font-size: 12px; color: #7f8c8d;">
                            <span>0 ph√∫t</span>
                            <span>{prediction.get('valid_for_minutes', 30)} ph√∫t</span>
                        </div>
                    </div>
                </div>
            </div>
            <div style="font-size: 36px; margin-left: 15px; color: {color};">
                {icon}
            </div>
        </div>
    </div>
    """
    st.markdown(card_html, unsafe_allow_html=True)

def create_gauge_chart(value, title="ƒê·ªô tin c·∫≠y", min_value=0, max_value=1, color_thresholds=None):
    """
    T·∫°o bi·ªÉu ƒë·ªì ƒë·ªìng h·ªì ƒëo gauge ƒë·ªÉ hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y
    
    Args:
        value (float): Gi√° tr·ªã c·∫ßn hi·ªÉn th·ªã (0-1)
        title (str): Ti√™u ƒë·ªÅ c·ªßa bi·ªÉu ƒë·ªì
        min_value (float): Gi√° tr·ªã t·ªëi thi·ªÉu c·ªßa thang ƒëo
        max_value (float): Gi√° tr·ªã t·ªëi ƒëa c·ªßa thang ƒëo
        color_thresholds (list): Danh s√°ch c√°c ng∆∞·ª°ng m√†u s·∫Øc [(gi√°_tr·ªã, m√†u),...]
    """
    if color_thresholds is None:
        color_thresholds = [
            (0.3, "red"),
            (0.7, "orange"),
            (1.0, "green")
        ]
    
    # X√°c ƒë·ªãnh m√†u d·ª±a tr√™n ng∆∞·ª°ng
    color = color_thresholds[-1][1]  # M√†u m·∫∑c ƒë·ªãnh (m√†u cu·ªëi c√πng)
    for threshold, threshold_color in color_thresholds:
        if value <= threshold:
            color = threshold_color
            break
    
    # T·∫°o bi·ªÉu ƒë·ªì gauge
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': title, 'font': {'size': 16}},
        gauge={
            'axis': {'range': [min_value, max_value], 'tickwidth': 1},
            'bar': {'color': color},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [threshold_range[0], threshold_range[1]], 'color': threshold_color}
                for threshold_range, threshold_color in zip(
                    [(min_value, t) for t, _ in color_thresholds],
                    [c for _, c in color_thresholds]
                )
            ],
            'threshold': {
                'line': {'color': "black", 'width': 4},
                'thickness': 0.75,
                'value': value
            }
        },
        number={'suffix': "", 'font': {'size': 20}}
    ))
    
    # C·∫≠p nh·∫≠t layout cho ph√π h·ª£p
    fig.update_layout(
        height=200,
        margin=dict(l=10, r=10, t=50, b=10),
        paper_bgcolor="rgba(0,0,0,0)"
    )
    
    return fig

def create_header():
    """
    T·∫°o header ƒë·∫πp m·∫Øt cho ·ª©ng d·ª•ng
    """
    st.markdown(
        """
        <div style="background: linear-gradient(90deg, #4f8bf9, #485ec4); padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h1 style="color: white; margin: 0;">AI CRYPTO PREDICTION</h1>
                    <p style="color: rgba(255,255,255,0.8); margin: 5px 0 0 0;">D·ª± ƒëo√°n t·ª± ƒë·ªông ETH/USDT v·ªõi AI n√¢ng cao</p>
                </div>
                <div style="background: rgba(255,255,255,0.15); border-radius: 50px; padding: 5px 15px; color: white; font-size: 14px;">
                    Phi√™n b·∫£n 2.0
                </div>
            </div>
        </div>
        """, 
        unsafe_allow_html=True
    )

def create_section_header(title, subtitle=None, icon=None):
    """
    T·∫°o ti√™u ƒë·ªÅ cho m·ªôt ph·∫ßn trong giao di·ªán
    
    Args:
        title (str): Ti√™u ƒë·ªÅ ch√≠nh
        subtitle (str): Ti√™u ƒë·ªÅ ph·ª• (c√≥ th·ªÉ l√† None)
        icon (str): Bi·ªÉu t∆∞·ª£ng (v√≠ d·ª•: "üìà")
    """
    icon_html = f'<span style="font-size: 24px; margin-right: 10px;">{icon}</span>' if icon else ''
    subtitle_html = f'<p style="color: #7f8c8d; margin: 5px 0 15px 0;">{subtitle}</p>' if subtitle else ''
    
    st.markdown(
        f"""
        <div style="margin-bottom: 20px;">
            <h2 style="color: #2c3e50; margin: 0; display: flex; align-items: center;">
                {icon_html}{title}
            </h2>
            {subtitle_html}
        </div>
        """,
        unsafe_allow_html=True
    )

def create_stats_row(stats):
    """
    T·∫°o m·ªôt h√†ng hi·ªÉn th·ªã c√°c th·ªëng k√™
    
    Args:
        stats (list): Danh s√°ch c√°c th·ªëng k√™ d·∫°ng [(label, value, icon, color), ...]
    """
    # T√≠nh to√°n s·ªë c·ªôt
    cols = st.columns(len(stats))
    
    # Hi·ªÉn th·ªã t·ª´ng th·ªëng k√™ trong m·ªôt c·ªôt
    for i, (label, value, icon, color) in enumerate(stats):
        with cols[i]:
            create_metric_card(label, value, icon=icon, color=color)