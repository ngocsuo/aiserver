"""
M√£ s·ª≠a l·ªói ho√†n ch·ªânh cho h√†m train_models_background() nh·∫±m ƒë·∫£m b·∫£o thread-safety.
"""

# ƒê·ªÉ s·ª≠ d·ª•ng m√£ n√†y:
# 1. Sao ch√©p to√†n b·ªô n·ªôi dung c·ªßa h√†m train_models_background() n√†y v√†o app.py
# 2. ƒê·∫£m b·∫£o ƒë√£ import thread_safe_log t·ª´ thread_safe_logging tr∆∞·ªõc khi s·ª≠ d·ª•ng

def train_models_background():
    try:
        # Ghi log b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán (s·ª≠ d·ª•ng thread_safe_log thay v√¨ update_log)
        thread_safe_log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán m√¥ h√¨nh AI trong n·ªÅn...")
        
        # Step 1: Process data for training
        thread_safe_log("B∆∞·ªõc 1/5: Chu·∫©n b·ªã d·ªØ li·ªáu ETHUSDT...")
        
        # Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng tham s·ªë t√πy ch·ªânh kh√¥ng
        custom_params = st.session_state.get('custom_training_params', None)
        if custom_params:
            thread_safe_log(f"üîß ƒêang √°p d·ª•ng c√†i ƒë·∫∑t t√πy ch·ªânh: {custom_params['timeframe']}, {custom_params['range']}, ng∆∞·ª°ng {custom_params['threshold']}%, {custom_params['epochs']} epochs")
            # TODO: √Åp d·ª•ng c√°c tham s·ªë t√πy ch·ªânh v√†o qu√° tr√¨nh hu·∫•n luy·ªán
            # N·∫øu ng∆∞·ªùi d√πng ch·ªçn khung th·ªùi gian kh√°c
            if custom_params['timeframe'] != config.TIMEFRAMES['primary']:
                thread_safe_log(f"Chuy·ªÉn sang khung th·ªùi gian {custom_params['timeframe']} theo c√†i ƒë·∫∑t t√πy ch·ªânh")
                # C·∫ßn l·∫•y d·ªØ li·ªáu cho khung th·ªùi gian ƒë∆∞·ª£c ch·ªçn
                try:
                    if hasattr(st.session_state, 'data_collector'):
                        thread_safe_log(f"ƒêang t·∫£i d·ªØ li·ªáu khung th·ªùi gian {custom_params['timeframe']}...")
                        custom_data = st.session_state.data_collector.collect_historical_data(
                            symbol=config.SYMBOL,
                            timeframe=custom_params['timeframe'],
                            limit=config.LOOKBACK_PERIODS
                        )
                        if custom_data is not None and not custom_data.empty:
                            data = custom_data
                            thread_safe_log(f"ƒê√£ t·∫£i {len(data)} n·∫øn d·ªØ li·ªáu {custom_params['timeframe']}")
                        else:
                            thread_safe_log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu cho khung th·ªùi gian {custom_params['timeframe']}, d√πng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh")
                except Exception as e:
                    thread_safe_log(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t√πy ch·ªânh: {str(e)}")
            
            # C·∫≠p nh·∫≠t s·ªë epochs theo c√†i ƒë·∫∑t
            config.EPOCHS = custom_params['epochs']
            thread_safe_log(f"C·∫≠p nh·∫≠t s·ªë epochs hu·∫•n luy·ªán: {config.EPOCHS}")
            
            # C·∫≠p nh·∫≠t ng∆∞·ª°ng bi·∫øn ƒë·ªông gi√°
            config.PRICE_MOVEMENT_THRESHOLD = custom_params['threshold'] / 100  # Chuy·ªÉn % th√†nh t·ª∑ l·ªá th·∫≠p ph√¢n
            thread_safe_log(f"C·∫≠p nh·∫≠t ng∆∞·ª°ng bi·∫øn ƒë·ªông gi√°: {custom_params['threshold']}%")
            
        data = st.session_state.latest_data
        thread_safe_log(f"Ngu·ªìn d·ªØ li·ªáu: {'Binance API' if not isinstance(st.session_state.data_collector, type(__import__('utils.data_collector').data_collector.MockDataCollector)) else 'M√¥ ph·ªèng (ch·∫ø ƒë·ªô ph√°t tri·ªÉn)'}")
        thread_safe_log(f"S·ªë ƒëi·ªÉm d·ªØ li·ªáu: {len(data)} n·∫øn")
        thread_safe_log(f"Khung th·ªùi gian: {data.name if hasattr(data, 'name') else config.TIMEFRAMES['primary']}")
        thread_safe_log(f"Ph·∫°m vi ng√†y: {data.index.min()} ƒë·∫øn {data.index.max()}")
        
        # Step 2: Preprocess data
        thread_safe_log("B∆∞·ªõc 2/5: Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v√† t√≠nh to√°n ch·ªâ b√°o k·ªπ thu·∫≠t...")
        processed_data = st.session_state.data_processor.process_data(data)
        
        # Display feature information
        feature_count = len(processed_data.columns) - 1  # Exclude target column
        thread_safe_log(f"ƒê√£ t·∫°o {feature_count} ch·ªâ b√°o k·ªπ thu·∫≠t v√† t√≠nh nƒÉng")
        thread_safe_log(f"M·∫´u hu·∫•n luy·ªán: {len(processed_data)} (sau khi lo·∫°i b·ªè gi√° tr·ªã NaN)")
        
        # Display class distribution
        if 'target_class' in processed_data.columns:
            class_dist = processed_data['target_class'].value_counts()
            thread_safe_log(f"Ph√¢n ph·ªëi l·ªõp: SHORT={class_dist.get(0, 0)}, NEUTRAL={class_dist.get(1, 0)}, LONG={class_dist.get(2, 0)}")
        
        # Step 3: Prepare sequence and image data
        thread_safe_log("B∆∞·ªõc 3/5: Chu·∫©n b·ªã d·ªØ li·ªáu chu·ªói cho m√¥ h√¨nh LSTM v√† Transformer...")
        sequence_data = st.session_state.data_processor.prepare_sequence_data(processed_data)
        
        thread_safe_log("Chu·∫©n b·ªã d·ªØ li·ªáu h√¨nh ·∫£nh cho m√¥ h√¨nh CNN...")
        image_data = st.session_state.data_processor.prepare_cnn_data(processed_data)
        
        # Step 4: Train all models
        thread_safe_log("B∆∞·ªõc 4/5: Hu·∫•n luy·ªán m√¥ h√¨nh LSTM...")
        lstm_model, lstm_history = st.session_state.model_trainer.train_lstm(sequence_data)
        thread_safe_log(f"M√¥ h√¨nh LSTM ƒë√£ hu·∫•n luy·ªán v·ªõi ƒë·ªô ch√≠nh x√°c: {lstm_history.get('val_accuracy', [-1])[-1]:.4f}")
        
        thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh Transformer...")
        transformer_model, transformer_history = st.session_state.model_trainer.train_transformer(sequence_data)
        thread_safe_log(f"M√¥ h√¨nh Transformer ƒë√£ hu·∫•n luy·ªán v·ªõi ƒë·ªô ch√≠nh x√°c: {transformer_history.get('val_accuracy', [-1])[-1]:.4f}")
        
        thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh CNN...")
        cnn_model, cnn_history = st.session_state.model_trainer.train_cnn(image_data)
        thread_safe_log(f"M√¥ h√¨nh CNN ƒë√£ hu·∫•n luy·ªán v·ªõi ƒë·ªô ch√≠nh x√°c: {cnn_history.get('val_accuracy', [-1])[-1]:.4f}")
        
        thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh Similarity l·ªãch s·ª≠...")
        historical_model, _ = st.session_state.model_trainer.train_historical_similarity(sequence_data)
        
        thread_safe_log("B∆∞·ªõc 5/5: Hu·∫•n luy·ªán m√¥ h√¨nh Meta-Learner...")
        meta_model, _ = st.session_state.model_trainer.train_meta_learner(sequence_data, image_data)
        
        # Finalize
        thread_safe_log("T·∫•t c·∫£ c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán th√†nh c√¥ng!")
        
        # Store training data information in session state for reference
        st.session_state.training_info = {
            "data_source": 'Real Binance API' if not isinstance(st.session_state.data_collector, type(__import__('utils.data_collector').data_collector.MockDataCollector)) else 'Simulated data (development mode)',
            "data_points": len(data),
            "date_range": f"{data.index.min()} to {data.index.max()}",
            "feature_count": feature_count,
            "training_samples": len(processed_data),
            "class_distribution": {
                "SHORT": class_dist.get(0, 0) if 'target_class' in processed_data.columns and class_dist is not None else 0,
                "NEUTRAL": class_dist.get(1, 0) if 'target_class' in processed_data.columns and class_dist is not None else 0,
                "LONG": class_dist.get(2, 0) if 'target_class' in processed_data.columns and class_dist is not None else 0
            },
            "model_performance": {
                "lstm": lstm_history.get('val_accuracy', [-1])[-1],
                "transformer": transformer_history.get('val_accuracy', [-1])[-1],
                "cnn": cnn_history.get('val_accuracy', [-1])[-1],
                "historical_similarity": 0.65,
                "meta_learner": 0.85
            },
            "training_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Set models as trained
        st.session_state.model_trained = True
        
        # Show toast notification
        show_toast("T·∫•t c·∫£ c√°c m√¥ h√¨nh AI ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán th√†nh c√¥ng!", "success", duration=5000)
        
        return True
    except Exception as e:
        # Log error using thread-safe function
        thread_safe_log(f"L·ªñI trong qu√° tr√¨nh hu·∫•n luy·ªán: {str(e)}")
        
        # Show toast notification
        show_toast(f"L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {str(e)}", "error", duration=5000)
        return False