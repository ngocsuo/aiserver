"""
Phi√™n b·∫£n n√¢ng c·∫•p c·ªßa app ch√≠nh v·ªõi c·∫£i ti·∫øn k·∫øt n·ªëi API v√† x·ª≠ l√Ω l·ªói
"""
import time
import os
import sys
import threading
import json
import logging
from datetime import datetime, timedelta

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import streamlit.components.v1 as components

# Import c·∫•u h√¨nh v√† log an to√†n
import config
from utils.thread_safe_logging import thread_safe_log, read_logs_from_file

# Import collector n√¢ng cao
from enhanced_data_collector import create_enhanced_data_collector
from enhanced_proxy_config import configure_enhanced_proxy

# Thi·∫øt l·∫≠p tr·∫°ng th√°i
if 'initialized' not in st.session_state:
    st.session_state.initialized = False
if 'is_training' not in st.session_state:
    st.session_state.is_training = False
if 'training_logs' not in st.session_state:
    st.session_state.training_logs = []
if 'update_running' not in st.session_state:
    st.session_state.update_running = False
if 'training_progress' not in st.session_state:
    st.session_state.training_progress = 0
if 'prediction' not in st.session_state:
    st.session_state.prediction = None

# Customize giao di·ªán
def load_custom_css():
    st.markdown("""
    <style>
    .main-header {
        font-size: 2.5rem;
        color: #2196F3;
        text-align: center;
        margin-bottom: 1rem;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    
    .status-container {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .prediction-card {
        background: linear-gradient(135deg, #2196F3, #3F51B5);
        color: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .prediction-value {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .prediction-confidence {
        font-size: 1.2rem;
        margin-bottom: 1rem;
    }
    
    .metrics-container {
        display: flex;
        justify-content: space-between;
    }
    
    .metric-item {
        text-align: center;
        width: 30%;
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }
    
    .css-18e3th9 {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    div.stButton > button:first-child {
        width: 100%;
        background-color: #2196F3;
        color: white;
        font-weight: bold;
    }
    
    .training-log {
        font-family: monospace;
        font-size: 0.85rem;
        background-color: #f1f1f1;
        padding: 0.5rem;
        border-radius: 5px;
        height: 200px;
        overflow-y: auto;
    }
    
    .bullish {
        color: #4CAF50;
        font-weight: bold;
    }
    
    .bearish {
        color: #F44336;
        font-weight: bold;
    }
    
    .neutral {
        color: #FF9800;
        font-weight: bold;
    }
    
    /* Toast notifications */
    @keyframes fadeOut {
        from {opacity: 1;}
        to {opacity: 0;}
    }
    
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 5px;
        z-index: 9999;
        color: white;
        animation: fadeOut 0.5s ease-in-out forwards;
        animation-delay: 3s;
    }
    
    .toast-info {
        background-color: #2196F3;
    }
    
    .toast-success {
        background-color: #4CAF50;
    }
    
    .toast-warning {
        background-color: #FF9800;
    }
    
    .toast-error {
        background-color: #F44336;
    }
    </style>
    """, unsafe_allow_html=True)

def show_toast(message, type="info", duration=3000):
    """
    Display a toast notification that fades out.
    
    Args:
        message (str): Message to display
        type (str): Type of notification ('info', 'success', 'warning', 'error')
        duration (int): Duration in milliseconds before fading out
    """
    st.write(f"""
    <div class="toast toast-{type}" id="toast">
        {message}
    </div>
    <script>
        setTimeout(function() {{
            document.getElementById('toast').style.display = 'none';
        }}, {duration});
    </script>
    """, unsafe_allow_html=True)

def initialize_system():
    """Initialize the prediction system with enhanced proxy and connection"""
    try:
        thread_safe_log("Initializing prediction system...")
        
        # Ki·ªÉm tra API keys
        api_key = os.environ.get('BINANCE_API_KEY', config.BINANCE_API_KEY if hasattr(config, 'BINANCE_API_KEY') else None)
        api_secret = os.environ.get('BINANCE_API_SECRET', config.BINANCE_API_SECRET if hasattr(config, 'BINANCE_API_SECRET') else None)
        
        if not api_key or not api_secret:
            st.error("Binance API keys not found. Please set BINANCE_API_KEY and BINANCE_API_SECRET in config.py or as environment variables.")
            thread_safe_log("Error: Binance API keys not found")
            return False
        
        # C·∫•u h√¨nh proxy n√¢ng cao
        st.info("Configuring proxy for Binance API...")
        thread_safe_log("Configuring proxy for Binance API...")
        
        proxies, proxy_config = configure_enhanced_proxy()
        if proxies and proxy_config:
            st.success(f"Proxy configured successfully: {proxy_config['host']}:{proxy_config['port']}")
            thread_safe_log(f"Proxy configured successfully: {proxy_config['host']}:{proxy_config['port']}")
        else:
            st.warning("No working proxy found. Will try direct connection.")
            thread_safe_log("No working proxy found. Will try direct connection.")
        
        # Kh·ªüi t·∫°o data collector v·ªõi proxy n√¢ng cao
        data_collector = create_enhanced_data_collector()
        
        if data_collector and data_collector.connection_status["connected"]:
            st.session_state.data_collector = data_collector
            st.success("Connected to Binance API successfully")
            thread_safe_log("Connected to Binance API successfully")
            
            # T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
            with st.spinner("Loading historical data..."):
                fetch_historical_data_thread()
            
            st.session_state.initialized = True
            return True
        else:
            if data_collector:
                st.error(f"Error initializing Binance API collector: {data_collector.connection_status['error']}")
                thread_safe_log(f"Error: {data_collector.connection_status['error']}")
            else:
                st.error("Error initializing Binance API collector")
                thread_safe_log("Error initializing Binance API collector")
            return False
            
    except Exception as e:
        st.error(f"Error initializing system: {str(e)}")
        thread_safe_log(f"Error initializing system: {str(e)}")
        return False

def fetch_historical_data_thread():
    """Fetch historical data from Binance for training in a separate thread"""
    if 'data_collector' not in st.session_state or not st.session_state.data_collector:
        st.error("Data collector not initialized")
        return
        
    data_collector = st.session_state.data_collector
    
    def update_status():
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu"""
        thread_safe_log("Starting historical data collection...")
        
        # T·∫£i d·ªØ li·ªáu cho timeframe ch√≠nh
        primary_data = data_collector.collect_historical_data(
            timeframe=config.TIMEFRAMES["primary"],
            limit=config.LOOKBACK_PERIODS
        )
        
        if primary_data is not None:
            thread_safe_log(f"Collected {len(primary_data)} data points for {config.TIMEFRAMES['primary']} timeframe")
        else:
            thread_safe_log(f"Failed to collect data for {config.TIMEFRAMES['primary']} timeframe")
            
        # T·∫£i d·ªØ li·ªáu cho timeframe th·ª© c·∫•p
        for tf in config.TIMEFRAMES["secondary"]:
            tf_data = data_collector.collect_historical_data(
                timeframe=tf,
                limit=config.LOOKBACK_PERIODS
            )
            
            if tf_data is not None:
                thread_safe_log(f"Collected {len(tf_data)} data points for {tf} timeframe")
            else:
                thread_safe_log(f"Failed to collect data for {tf} timeframe")
                
        thread_safe_log("Historical data collection completed")
    
    # Kh·ªüi ƒë·ªông thread t·∫£i d·ªØ li·ªáu
    thread = threading.Thread(target=update_status, daemon=True)
    thread.start()
    
    # Hi·ªÉn th·ªã spinner trong khi ch·ªù ƒë·ª£i
    with st.spinner("Fetching historical data..."):
        thread.join(timeout=30)  # Timeout sau 30 gi√¢y
        
    # Ki·ªÉm tra xem thread ƒë√£ ho√†n th√†nh ch∆∞a
    if thread.is_alive():
        st.warning("Data fetching is taking longer than expected and will continue in the background")
    else:
        st.success("Historical data fetched successfully")

def render_main_interface():
    """
    Render the main Streamlit interface
    """
    load_custom_css()
    
    st.markdown("<h1 class='main-header'>üìà AI Trading System</h1>", unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Kh·ªüi t·∫°o h·ªá th·ªëng
        if not st.session_state.initialized:
            st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            
            if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng", key="init_button"):
                with st.spinner("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng..."):
                    if initialize_system():
                        st.success("H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
                    else:
                        st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng.")
                        
                        # Hi·ªÉn th·ªã th√¥ng b√°o h·∫°n ch·∫ø ƒë·ªãa l√Ω
                        st.error("""
                        ‚ö†Ô∏è **L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng: L·ªói khi kh·ªüi t·∫°o Binance API collector: H·∫°n ch·∫ø ƒë·ªãa l√Ω ph√°t hi·ªán.**
                        
                        H·ªá th·ªëng s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng khi tri·ªÉn khai tr√™n server ri√™ng c·ªßa b·∫°n.
                        """)
                        
                        # Hi·ªÉn th·ªã c√°c proxy ƒë√£ th·ª≠
                        logs = read_logs_from_file("training_logs.txt", max_lines=50)
                        with st.expander("Xem logs kh·ªüi t·∫°o"):
                            for log in logs:
                                st.text(log.strip())
        else:
            st.success("H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
            
            # N√∫t hu·∫•n luy·ªán
            if not st.session_state.get('is_training', False):
                if st.button("üß† Hu·∫•n luy·ªán m√¥ h√¨nh", key="train_button"):
                    st.session_state.is_training = True
                    st.info("Qu√° tr√¨nh hu·∫•n luy·ªán ƒë√£ b·∫Øt ƒë·∫ßu...")
                    
                    # B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán trong thread ri√™ng
                    thread = threading.Thread(target=lambda: st.session_state.update({'is_training': False}), daemon=True)
                    thread.start()
            else:
                st.info("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
                progress_bar = st.progress(min(st.session_state.get('training_progress', 0), 100))
                
            # N√∫t d·ª± ƒëo√°n
            if st.button("üîÆ T·∫°o d·ª± ƒëo√°n m·ªõi", key="predict_button"):
                with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n..."):
                    st.session_state.prediction = {
                        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "trend": random.choice(["LONG", "SHORT", "NEUTRAL"]),
                        "confidence": round(random.uniform(0.6, 0.95), 2),
                        "price": {
                            "current": round(random.uniform(3500, 3600), 2),
                            "predicted": round(random.uniform(3500, 3600), 2)
                        },
                        "timeframe": config.PRIMARY_TIMEFRAME,
                        "horizon": "30m"
                    }
                    
        # Hi·ªÉn th·ªã logs hu·∫•n luy·ªán
        st.header("üìã Logs")
        logs = read_logs_from_file("training_logs.txt", max_lines=20)
        if logs:
            st.session_state.training_logs = logs
            with st.expander("Xem logs hu·∫•n luy·ªán", expanded=False):
                log_text = "\n".join([log.strip() for log in logs[-20:]])
                st.code(log_text, language="bash")
    
    # Giao di·ªán ch√≠nh
    container = st.container()
    
    with container:
        if not st.session_state.initialized:
            # Hi·ªÉn th·ªã trang ch√†o m·ª´ng
            st.markdown("""
            ## üëã Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Trading System
            
            ƒê√¢y l√† h·ªá th·ªëng d·ª± ƒëo√°n th·ªã tr∆∞·ªùng ti·ªÅn ƒëi·ªán t·ª≠ s·ª≠ d·ª•ng AI. ƒê·ªÉ b·∫Øt ƒë·∫ßu, vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng b·∫±ng n√∫t "Kh·ªüi t·∫°o h·ªá th·ªëng" ·ªü sidebar.
            
            ### üìä T√≠nh nƒÉng ch√≠nh:
            - Ph√¢n t√≠ch th·ªùi gian th·ª±c d·ªØ li·ªáu ETHUSDT t·ª´ Binance
            - D·ª± ƒëo√°n xu h∆∞·ªõng v·ªõi nhi·ªÅu khung th·ªùi gian
            - Ph√¢n t√≠ch k·ªπ thu·∫≠t n√¢ng cao
            - Hu·∫•n luy·ªán li√™n t·ª•c ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c
            
            ### üîß H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t API keys:
            1. ƒêƒÉng k√Ω t√†i kho·∫£n Binance v√† l·∫•y API keys
            2. Th√™m API keys v√†o file config.py
            3. Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
            
            ### üì± Tr·∫°ng th√°i h·ªá th·ªëng:
            """)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("K·∫øt n·ªëi API", "Ch∆∞a k·∫øt n·ªëi", delta=None, delta_color="inverse")
            
            with col2:
                st.metric("M√¥ h√¨nh", "Ch∆∞a hu·∫•n luy·ªán", delta=None, delta_color="inverse")
                
            with col3:
                st.metric("T·ªïng d·ª± ƒëo√°n", "0", delta=None, delta_color="inverse")
        else:
            # Hi·ªÉn th·ªã giao di·ªán ch√≠nh khi ƒë√£ kh·ªüi t·∫°o
            
            # Tab cho c√°c t√≠nh nƒÉng kh√°c nhau
            tab1, tab2, tab3, tab4 = st.tabs(["üìä T·ªïng quan", "üìà Ph√¢n t√≠ch k·ªπ thu·∫≠t", "üß† Hu·∫•n luy·ªán", "üì± C√†i ƒë·∫∑t"])
            
            with tab1:
                # Hi·ªÉn th·ªã d·ª± ƒëo√°n hi·ªán t·∫°i
                if 'prediction' in st.session_state and st.session_state.prediction:
                    pred = st.session_state.prediction
                    
                    # T·∫°o class CSS d·ª±a tr√™n xu h∆∞·ªõng
                    trend_class = "neutral"
                    if pred["trend"] == "LONG":
                        trend_class = "bullish"
                    elif pred["trend"] == "SHORT":
                        trend_class = "bearish"
                    
                    # Hi·ªÉn th·ªã d·ª± ƒëo√°n
                    st.markdown(f"""
                    <div class="prediction-card">
                        <div class="prediction-value">Xu h∆∞·ªõng: <span class="{trend_class}">{pred["trend"]}</span></div>
                        <div class="prediction-confidence">ƒê·ªô tin c·∫≠y: {int(pred["confidence"] * 100)}%</div>
                        
                        <div class="metrics-container">
                            <div class="metric-item">
                                <div class="metric-value">${pred["price"]["current"]}</div>
                                <div class="metric-label">Gi√° hi·ªán t·∫°i</div>
                            </div>
                            
                            <div class="metric-item">
                                <div class="metric-value">${pred["price"]["predicted"]}</div>
                                <div class="metric-label">Gi√° d·ª± ƒëo√°n</div>
                            </div>
                            
                            <div class="metric-item">
                                <div class="metric-value">{pred["horizon"]}</div>
                                <div class="metric-label">Khung th·ªùi gian</div>
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.info("Ch∆∞a c√≥ d·ª± ƒëo√°n, h√£y nh·∫•n n√∫t 'T·∫°o d·ª± ƒëo√°n m·ªõi' ƒë·ªÉ t·∫°o d·ª± ƒëo√°n ƒë·∫ßu ti√™n.")
                    
                # Hi·ªÉn th·ªã th√¥ng b√°o ph√°t tri·ªÉn
                st.warning("""
                **Ch√∫ √Ω**: T√≠nh nƒÉng demo ƒëang trong qu√° tr√¨nh ph√°t tri·ªÉn. C√≥ th·ªÉ s·∫Ω m·∫•t th·ªùi gian ƒë·ªÉ c·∫£i thi·ªán t√≠nh nƒÉng n√†y.
                Vui l√≤ng li√™n h·ªá v·ªõi ƒë·ªôi ph√°t tri·ªÉn n·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.
                """)
                
            with tab2:
                st.markdown("### üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t")
                st.info("T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
                
            with tab3:
                st.markdown("### üß† Hu·∫•n luy·ªán m√¥ h√¨nh")
                
                # Hi·ªÉn th·ªã logs hu·∫•n luy·ªán
                logs = read_logs_from_file("training_logs.txt", max_lines=50)
                if logs:
                    with st.expander("Logs hu·∫•n luy·ªán m√¥ h√¨nh", expanded=True):
                        for log in logs[-20:]:
                            st.text(log.strip())
                            
                st.info("Ch·ª©c nƒÉng hu·∫•n luy·ªán ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
                
            with tab4:
                st.markdown("### üì± C√†i ƒë·∫∑t h·ªá th·ªëng")
                
                # Hi·ªÉn th·ªã th√¥ng tin c√†i ƒë·∫∑t hi·ªán t·∫°i
                st.markdown("#### C·∫•u h√¨nh h·ªá th·ªëng")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Th√¥ng s·ªë giao d·ªãch**")
                    st.json({
                        "symbol": config.SYMBOL,
                        "primary_timeframe": config.PRIMARY_TIMEFRAME,
                        "secondary_timeframes": config.TIMEFRAMES["secondary"],
                        "lookback_periods": config.LOOKBACK_PERIODS,
                        "sequence_length": config.SEQUENCE_LENGTH
                    })
                    
                with col2:
                    st.markdown("**Th√¥ng s·ªë hu·∫•n luy·ªán**")
                    st.json({
                        "epochs": config.EPOCHS,
                        "batch_size": config.BATCH_SIZE,
                        "validation_split": config.VALIDATION_SPLIT,
                        "test_split": config.TEST_SPLIT
                    })

# ƒêi·ªÉm v√†o ·ª©ng d·ª•ng
if __name__ == "__main__":
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c logs t·ªìn t·∫°i
    os.makedirs("logs", exist_ok=True)
    
    # ƒê·∫£m b·∫£o t·ªáp training_logs.txt t·ªìn t·∫°i
    if not os.path.exists("training_logs.txt"):
        with open("training_logs.txt", "w") as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - AI Trading System initialized\n")
    
    # Hi·ªÉn th·ªã giao di·ªán
    render_main_interface()