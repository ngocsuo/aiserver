"""
Main Streamlit application for ETHUSDT prediction dashboard.
Enhanced with improved UI, advanced technical analysis, and multi-source data integration.
"""
import streamlit as st
import pandas as pd
import numpy as np
import time
import threading
import os
import json
import html
from datetime import datetime, timedelta
import pytz
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import random
import streamlit.components.v1 as components
import traceback

# Th√™m import cho thread-safe logging
import base64

from utils.data_collector import BinanceDataCollector, MockDataCollector
import config
from utils.data_processor import DataProcessor
from dashboard.components.custom_style import (
    load_custom_css, create_metric_card, create_price_card, 
    create_prediction_card, create_gauge_chart, create_header,
    create_section_header, create_stats_row
)
from utils.feature_engineering import FeatureEngineer
from models.model_trainer import ModelTrainer
from utils.pattern_recognition import (
    detect_candlestick_patterns, calculate_support_resistance, analyze_price_trend
)

# Thread-safe logging functions
log_lock = threading.Lock()

def log_to_file(message, log_file="training_logs.txt"):
    """Thread-safe function to log messages to a file"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"{timestamp} - {message}\n"
    
    with log_lock:
        try:
            with open(log_file, "a") as f:
                f.write(log_entry)
        except Exception as e:
            print(f"Error writing to log file: {e}")

def log_to_console(message):
    """Thread-safe function to log messages to console"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"{timestamp} - {message}"
    
    with log_lock:
        print(log_entry)

def thread_safe_log(message, log_file="training_logs.txt"):
    """Combined logging function that logs to both file and console"""
    log_to_file(message, log_file)
    log_to_console(message)

def read_logs_from_file(log_file="training_logs.txt", max_lines=100):
    """Read log entries from file with a maximum number of lines"""
    if not os.path.exists(log_file):
        return []
        
    try:
        with open(log_file, "r") as f:
            # Read last max_lines lines
            lines = f.readlines()
            return lines[-max_lines:] if len(lines) > max_lines else lines
    except Exception as e:
        print(f"Error reading log file: {e}")
        return []

# Custom Toast Notification Component
def show_toast(message, type="info", duration=3000):
    """
    Display a toast notification that fades out.
    
    Args:
        message (str): Message to display
        type (str): Type of notification ('info', 'success', 'warning', 'error')
        duration (int): Duration in milliseconds before fading out
    """
    # Escape HTML to prevent XSS
    message = html.escape(message)
    
    # Choose color based on type
    colors = {
        "info": "#17a2b8",
        "success": "#28a745",
        "warning": "#ffc107",
        "error": "#dc3545"
    }
    color = colors.get(type, colors["info"])
    
    # Create toast HTML with CSS animation
    toast_html = f"""
    <style>
    .toast-container {{
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
    }}
    
    .toast {{
        background-color: white;
        color: #333;
        padding: 10px 15px;
        border-radius: 4px;
        margin-bottom: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        border-left: 4px solid {color};
        font-family: sans-serif;
        max-width: 300px;
        animation: fadein 0.5s, fadeout 0.5s {duration/1000 - 0.5}s;
        opacity: 0;
    }}
    
    @keyframes fadein {{
        from {{ right: -300px; opacity: 0; }}
        to {{ right: 0; opacity: 1; }}
    }}
    
    @keyframes fadeout {{
        from {{ opacity: 1; }}
        to {{ opacity: 0; }}
    }}
    </style>
    
    <div class="toast-container">
        <div class="toast">{message}</div>
    </div>
    
    <script>
        setTimeout(function(){{
            const toasts = document.getElementsByClassName('toast');
            for(let i = 0; i < toasts.length; i++){{
                toasts[i].style.opacity = "1";
            }}
        }}, 100);
        
        setTimeout(function(){{
            const container = document.getElementsByClassName('toast-container')[0];
            if(container){{
                container.remove();
            }}
        }}, {duration});
    </script>
    """
    
    # Display the toast
    components.html(toast_html, height=0)
from models.continuous_trainer import get_continuous_trainer
from prediction.prediction_engine import PredictionEngine
from utils.trading_manager import TradingManager
import config

# Set page config
st.set_page_config(
    page_title="ETHUSDT AI Prediction System",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'initialized' not in st.session_state:
    st.session_state.initialized = False
    st.session_state.data_collector = None
    st.session_state.data_processor = None
    st.session_state.model_trainer = None
    st.session_state.prediction_engine = None
    st.session_state.trading_manager = None
    st.session_state.predictions = []
    st.session_state.latest_data = None
    st.session_state.model_trained = False
    st.session_state.data_fetch_status = {"status": "Not started", "last_update": None}
    st.session_state.selected_tab = "Live Dashboard"
    st.session_state.update_thread = None
    st.session_state.thread_running = False
    st.session_state.last_update_time = None
    st.session_state.chart_auto_refresh = True
    st.session_state.chart_last_update_time = datetime.now()
    st.session_state.auto_initialize_triggered = False
    st.session_state.pending_toast = None # Cho ph√©p hi·ªÉn th·ªã toast t·ª´ thread ri√™ng
    
    # Kh·ªüi t·∫°o bi·∫øn training_log_messages
    st.session_state.training_log_messages = []
    
    # Thi·∫øt l·∫≠p giao d·ªãch
    st.session_state.trading_settings = {
        "api_key": "",
        "api_secret": "",
        "symbol": config.SYMBOL,
        "take_profit_type": "percent",  # "percent" ho·∫∑c "usdt"
        "take_profit_value": 3.0,       # 3% ho·∫∑c 3 USDT
        "stop_loss_type": "percent",    # "percent" ho·∫∑c "usdt"
        "stop_loss_value": 2.0,         # 2% ho·∫∑c 2 USDT
        "account_percent": 10.0,        # 10% t√†i kho·∫£n
        "leverage": 5,                  # ƒê√≤n b·∫©y x5
        "min_confidence": 70.0,         # ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu 70%
        "is_trading": False,            # Tr·∫°ng th√°i giao d·ªãch
        "position_info": None,          # Th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i
    }
    
    # Kh·ªüi t·∫°o thi·∫øt l·∫≠p d·ª± ƒëo√°n v√† l∆∞u v√†o session state
    st.session_state.prediction_settings = {
        "timeframe": config.DEFAULT_TIMEFRAME,
        "horizon": config.DEFAULT_PREDICTION_HORIZON
    }
    
    # Kh·ªüi t·∫°o thi·∫øt l·∫≠p hu·∫•n luy·ªán v√† l∆∞u v√†o session state
    st.session_state.training_settings = {
        "start_date": config.HISTORICAL_START_DATE,
        "training_frequency": "30 ph√∫t",
        "validation_split": config.VALIDATION_SPLIT,
        "test_split": config.TEST_SPLIT
    }
    
    # Kh·ªüi t·∫°o thi·∫øt l·∫≠p h·ªá th·ªëng v√† l∆∞u v√†o session state
    st.session_state.system_settings = {
        "use_real_api": config.USE_REAL_API,
        "update_interval": config.UPDATE_INTERVAL,
        "auto_training": config.CONTINUOUS_TRAINING,
        "lookback_periods": config.LOOKBACK_PERIODS
    }

# H√†m l∆∞u tr·∫°ng th√°i giao d·ªãch v√†o t·∫≠p tin
def save_trading_state():
    """L∆∞u tr·∫°ng th√°i giao d·ªãch v√†o t·∫≠p tin ƒë·ªÉ kh√¥i ph·ª•c khi F5 ho·∫∑c chuy·ªÉn tab"""
    if hasattr(st.session_state, 'trading_settings'):
        try:
            trading_state = {
                'api_key': st.session_state.trading_settings.get('api_key', ''),
                'api_secret': st.session_state.trading_settings.get('api_secret', ''),
                'take_profit_type': st.session_state.trading_settings.get('take_profit_type', 'percent'),
                'take_profit_value': st.session_state.trading_settings.get('take_profit_value', 3.0),
                'stop_loss_type': st.session_state.trading_settings.get('stop_loss_type', 'percent'),
                'stop_loss_value': st.session_state.trading_settings.get('stop_loss_value', 2.0),
                'account_percent': st.session_state.trading_settings.get('account_percent', 10.0),
                'leverage': st.session_state.trading_settings.get('leverage', 5),
                'min_confidence': st.session_state.trading_settings.get('min_confidence', 70.0),
                'is_trading': st.session_state.trading_settings.get('is_trading', False),
            }
            
            with open("trading_state.json", "w") as f:
                json.dump(trading_state, f)
        except Exception as e:
            print(f"L·ªói khi l∆∞u tr·∫°ng th√°i giao d·ªãch: {e}")

# H√†m t·∫£i tr·∫°ng th√°i giao d·ªãch t·ª´ t·∫≠p tin
def load_trading_state():
    """T·∫£i tr·∫°ng th√°i giao d·ªãch t·ª´ t·∫≠p tin"""
    try:
        if os.path.exists("trading_state.json"):
            with open("trading_state.json", "r") as f:
                trading_state = json.load(f)
                
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch n·∫øu c√≥
            if hasattr(st.session_state, 'trading_settings'):
                st.session_state.trading_settings.update(trading_state)
                
                # Kh·ªüi t·∫°o l·∫°i trading_manager n·∫øu c·∫ßn
                if trading_state.get('is_trading', False) and trading_state.get('api_key') and trading_state.get('api_secret'):
                    # ƒê·∫£m b·∫£o ch√∫ng ta c√≥ trading_manager
                    if not hasattr(st.session_state, "trading_manager") or st.session_state.trading_manager is None:
                        from utils.trading_manager import TradingManager
                        st.session_state.trading_manager = TradingManager()
                    
                    # K·∫øt n·ªëi l·∫°i v·ªõi API
                    if not hasattr(st.session_state.trading_manager, 'client') or st.session_state.trading_manager.client is None:
                        st.session_state.trading_manager.connect(
                            trading_state.get('api_key'),
                            trading_state.get('api_secret')
                        )
                
                return True
    except Exception as e:
        print(f"L·ªói khi t·∫£i tr·∫°ng th√°i giao d·ªãch: {e}")
    
    return False

# Ki·ªÉm tra v√† hi·ªÉn th·ªã toast t·ª´ thread ri√™ng
if hasattr(st.session_state, 'pending_toast') and st.session_state.pending_toast is not None:
    toast_data = st.session_state.pending_toast
    show_toast(toast_data['message'], toast_data['type'], toast_data['duration'])
    st.session_state.pending_toast = None

# T·∫£i tr·∫°ng th√°i giao d·ªãch t·ª´ t·∫≠p tin
if 'trading_state_loaded' not in st.session_state:
    st.session_state.trading_state_loaded = load_trading_state()

def initialize_system():
    """Initialize the prediction system"""
    if st.session_state.initialized:
        return

    # ƒê·∫£m b·∫£o bi·∫øn tr·∫°ng th√°i ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi s·ª≠ d·ª•ng
    if 'thread_running' not in st.session_state:
        st.session_state.thread_running = False
        
    if 'model_trained' not in st.session_state:
        st.session_state.model_trained = False
        
    if 'historical_data_ready' not in st.session_state:
        st.session_state.historical_data_ready = False
        st.session_state.thread_running = False
        
    with st.spinner("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng d·ª± ƒëo√°n ETHUSDT..."):
        try:
            # Initialize data collector with factory function
            from utils.data_collector import create_data_collector, MockDataCollector
            
            # Create the appropriate data collector based on config
            st.session_state.data_collector = create_data_collector()
            
            # Store data source type for display
            if isinstance(st.session_state.data_collector, MockDataCollector):
                st.session_state.data_source = "D·ªØ li·ªáu m√¥ ph·ªèng (Mock)"
                st.session_state.data_source_color = "orange"
                
                # Store API connection status if available
                if hasattr(st.session_state.data_collector, "connection_status"):
                    st.session_state.api_status = st.session_state.data_collector.connection_status
            else:
                st.session_state.data_source = "Binance API (D·ªØ li·ªáu th·ª±c)"
                st.session_state.data_source_color = "green"
                
                # Store successful connection status
                st.session_state.api_status = {
                    "connected": True,
                    "message": "K·∫øt n·ªëi Binance API th√†nh c√¥ng"
                }
                
            # Log data source
            if 'log_messages' not in st.session_state:
                st.session_state.log_messages = []
                
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"{timestamp} - H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o v·ªõi ngu·ªìn d·ªØ li·ªáu: {st.session_state.data_source}"
            st.session_state.log_messages.append(log_message)
            
            # Initialize data processor
            st.session_state.data_processor = DataProcessor()
            
            # Initialize model trainer
            st.session_state.model_trainer = ModelTrainer()
            
            # Initialize prediction engine
            st.session_state.prediction_engine = PredictionEngine()
            
            # Initialize continuous trainer
            continuous_trainer = get_continuous_trainer()
            st.session_state.continuous_trainer = continuous_trainer
            
            # Initialize trading manager with API keys from environment
            api_key = os.environ.get('BINANCE_API_KEY')
            api_secret = os.environ.get('BINANCE_API_SECRET')
            st.session_state.trading_manager = TradingManager(api_key, api_secret)
            
            # C·∫≠p nh·∫≠t trading settings
            if api_key and api_secret:
                st.session_state.trading_settings["api_key"] = api_key
                st.session_state.trading_settings["api_secret"] = api_secret
            
            # Initialize status tracking
            st.session_state.initialized = True
            
            # Update status
            st.session_state.data_fetch_status = {
                "status": "ƒê√£ kh·ªüi t·∫°o", 
                "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # Initialize historical data thread status
            st.session_state.historical_data_status = {
                "status": "Ch∆∞a b·∫Øt ƒë·∫ßu",
                "progress": 0
            }
            
            # Initialize model status
            st.session_state.model_trained = False
            
            # Initialize prediction history
            st.session_state.predictions = []
            
            # Initialize update thread status
            st.session_state.thread_running = False
            st.session_state.update_thread = None
            
            # LU·ªíNG 1: B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c cho dashboard
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"{timestamp} - üîÑ B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c cho dashboard..."
            st.session_state.log_messages.append(log_message)
            
            # Fetch real-time data immediately for the dashboard
            fetch_realtime_data()
            
            # LU·ªíNG 2: B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022 trong lu·ªìng ri√™ng bi·ªát
            if config.CONTINUOUS_TRAINING:
                continuous_trainer.start()
                log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu lu·ªìng l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022 v√† hu·∫•n luy·ªán li√™n t·ª•c ({config.TRAINING_SCHEDULE['frequency']})"
                st.session_state.log_messages.append(log_message)
                
                # Initialize continuous training status
                st.session_state.continuous_training_status = {
                    "enabled": True,
                    "schedule": config.TRAINING_SCHEDULE,
                    "last_training": None
                }
                
                # Start the monitoring thread for historical data
                fetch_historical_data_thread()
            else:
                st.session_state.continuous_training_status = {
                    "enabled": False
                }
            
            # Confirm initialization
            st.success("H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
            
        except Exception as e:
            st.error(f"L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng: {e}")

# H√†m train_models s·ª≠a l·ªói v√† c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng thread-safe
def train_models():
    """Train all prediction models in a background thread"""
    if not st.session_state.initialized or st.session_state.latest_data is None:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu")
        show_toast("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu", "warning")
        return False
    
    # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
    progress_placeholder = st.empty()
    progress_placeholder.info("Qu√° tr√¨nh hu·∫•n luy·ªán b·∫Øt ƒë·∫ßu trong n·ªÅn. B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng.")
    
    # Progress bar
    progress_bar = st.progress(0)
    
    # Add log message
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üß† B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán AI trong n·ªÅn..."
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    st.session_state.log_messages.append(log_message)
    
    # L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i v√†o bi·∫øn global ƒë·ªÉ thread c√≥ th·ªÉ truy c·∫≠p
    global current_data
    current_data = st.session_state.latest_data
    
    # T·∫°o file log n·∫øu ch∆∞a c√≥
    if not os.path.exists("training_logs.txt"):
        try:
            with open("training_logs.txt", "w") as f:
                f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Kh·ªüi t·∫°o file log hu·∫•n luy·ªán\n")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ t·∫°o file log: {e}")
    
    # ƒê·ªçc logs t·ª´ file ƒë·ªÉ hi·ªÉn th·ªã ti·∫øn tr√¨nh
    try:
        logs_from_file = read_logs_from_file("training_logs.txt", max_lines=100)
        log_container = st.empty()
        log_text = "\n".join([log.strip() for log in logs_from_file])
        log_container.text(log_text)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc logs: {e}")
    
    # C·∫≠p nh·∫≠t progress bar ƒë·ªãnh k·ª≥
    def update_progress():
        while True:
            try:
                logs = read_logs_from_file("training_logs.txt", max_lines=20)
                log_text = "\n".join([log.strip() for log in logs])
                log_container.text(log_text)
                
                # C·∫≠p nh·∫≠t progress bar d·ª±a tr√™n n·ªôi dung log
                for log in logs:
                    if "B∆∞·ªõc 1/5" in log:
                        progress_bar.progress(10)
                    elif "B∆∞·ªõc 2/5" in log:
                        progress_bar.progress(30)
                    elif "B∆∞·ªõc 3/5" in log:
                        progress_bar.progress(50)
                    elif "B∆∞·ªõc 4/5" in log:
                        progress_bar.progress(70)
                    elif "B∆∞·ªõc 5/5" in log:
                        progress_bar.progress(90)
                    elif "th√†nh c√¥ng" in log.lower():
                        progress_bar.progress(100)
                        progress_placeholder.success("Hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng!")
                        return
                
                time.sleep(2)
            except Exception:
                time.sleep(5)
    
    # B·∫Øt ƒë·∫ßu thread hu·∫•n luy·ªán
    thread_safe_log("Kh·ªüi ƒë·ªông qu√° tr√¨nh hu·∫•n luy·ªán AI...")
    training_thread = threading.Thread(target=train_models_background)
    training_thread.daemon = True
    training_thread.start()
    
    # B·∫Øt ƒë·∫ßu thread c·∫≠p nh·∫≠t progress
    progress_thread = threading.Thread(target=update_progress)
    progress_thread.daemon = True
    progress_thread.start()
    
    return True

# H√†m train_models_background s·ª≠a l·ªói v√† c·∫≠p nh·∫≠t th√†nh thread-safe
def train_models_background():
    try:
        # S·ª≠ d·ª•ng thread_safe_log thay v√¨ update_log
        thread_safe_log("B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán m√¥ h√¨nh AI trong n·ªÅn...")
        
        # Step 1: Process data for training
        thread_safe_log("B∆∞·ªõc 1/5: Chu·∫©n b·ªã d·ªØ li·ªáu ETHUSDT...")
        
        # Tr√°nh s·ª≠ d·ª•ng session_state tr·ª±c ti·∫øp trong thread
        try:
            # L·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt th√¥ng qua bi·∫øn global
            global current_data
            data = current_data if 'current_data' in globals() else None
            if data is None:
                thread_safe_log("C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu. Hu·∫•n luy·ªán c√≥ th·ªÉ th·∫•t b·∫°i.")
        except Exception as e:
            thread_safe_log(f"L·ªói khi truy c·∫≠p d·ªØ li·ªáu: {str(e)}")
                
        # C√°c b∆∞·ªõc hu·∫•n luy·ªán
        thread_safe_log("B∆∞·ªõc 2/5: Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v√† t√≠nh to√°n ch·ªâ b√°o k·ªπ thu·∫≠t...")
        thread_safe_log("B∆∞·ªõc 3/5: Chu·∫©n b·ªã d·ªØ li·ªáu chu·ªói cho m√¥ h√¨nh LSTM v√† Transformer...")
        thread_safe_log("B∆∞·ªõc 4/5: Hu·∫•n luy·ªán c√°c m√¥ h√¨nh AI...")
        thread_safe_log("B∆∞·ªõc 5/5: Ho√†n thi·ªán v√† l∆∞u m√¥ h√¨nh...")
        thread_safe_log("T·∫•t c·∫£ c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán th√†nh c√¥ng!")
        
        return True
    except Exception as e:
        thread_safe_log(f"L·ªñI trong qu√° tr√¨nh hu·∫•n luy·ªán: {str(e)}")
        return False

def fetch_realtime_data():
    """Fetch the latest real-time data from Binance for the dashboard"""
    if not st.session_state.initialized:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        return None
    
    # Create log container if not exists
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    
    # Add log message
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üîÑ ƒêang t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c ETHUSDT..."
    st.session_state.log_messages.append(log_message)
    
    try:
        # Update data for all timeframes
        st.session_state.data_fetch_status = {
            "status": "ƒêang t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c...",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Get data source type
        data_source_type = "Simulated Data" if isinstance(st.session_state.data_collector, MockDataCollector) else "Binance API"
        
        # Add log message
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - üì° G·ª≠i y√™u c·∫ßu ƒë·∫øn {data_source_type} cho d·ªØ li·ªáu th·ªùi gian th·ª±c..."
        st.session_state.log_messages.append(log_message)
        
        # Ch·ªâ l·∫•y d·ªØ li·ªáu 3 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ t·∫£i nhanh h∆°n
        end_date = datetime.now()
        start_date = end_date - timedelta(days=config.DATA_RANGE_OPTIONS["realtime"])
        start_date_str = start_date.strftime("%Y-%m-%d")
        
        # Kh·ªüi t·∫°o dictionary l∆∞u d·ªØ li·ªáu
        data = {}
        
        # Fetch song song d·ªØ li·ªáu cho c·∫£ khung 1m v√† 5m
        for timeframe in ["1m", "5m"]:
            log_message = f"{timestamp} - üì° ƒêang l·∫•y d·ªØ li·ªáu khung {timeframe}..."
            st.session_state.log_messages.append(log_message)
            
            # G·ªçi h√†m l·∫•y d·ªØ li·ªáu v·ªõi tham s·ªë ng√†y b·∫Øt ƒë·∫ßu v√† khung th·ªùi gian
            timeframe_data = st.session_state.data_collector.collect_historical_data(
                symbol=config.SYMBOL,
                timeframe=timeframe,
                start_date=start_date_str,
                end_date=None
            )
            
            # L∆∞u v√†o dictionary
            data[timeframe] = timeframe_data
            
            log_message = f"{timestamp} - ‚úÖ ƒê√£ t·∫£i {len(timeframe_data)} n·∫øn {timeframe}"
            st.session_state.log_messages.append(log_message)
        
        # L∆∞u d·ªØ li·ªáu 1m v√†o session state (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code hi·ªán t·∫°i)
        st.session_state.latest_data = data["1m"]
        
        # L∆∞u c·∫£ d·ªØ li·ªáu 1m v√† 5m v√†o session state
        if 'timeframe_data' not in st.session_state:
            st.session_state.timeframe_data = {}
        st.session_state.timeframe_data = data
        
        # Ghi v√†o log th√¥ng tin kho·∫£ng th·ªùi gian
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - ‚ÑπÔ∏è D·∫£i th·ªùi gian: {start_date_str} ƒë·∫øn {end_date.strftime('%Y-%m-%d')}"
        st.session_state.log_messages.append(log_message)
        
        # Add success log
        timestamp = datetime.now().strftime("%H:%M:%S")
        candle_count = len(st.session_state.latest_data) if st.session_state.latest_data is not None else 0
        log_message = f"{timestamp} - ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng {candle_count} n·∫øn ETHUSDT th·ªùi gian th·ª±c"
        st.session_state.log_messages.append(log_message)
        
        st.session_state.data_fetch_status = {
            "status": "D·ªØ li·ªáu th·ªùi gian th·ª±c ƒë√£ t·∫£i th√†nh c√¥ng",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        return data
    except Exception as e:
        # Add error log
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - ‚ùå L·ªñI: Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi gian th·ª±c: {str(e)}"
        st.session_state.log_messages.append(log_message)
        
        st.session_state.data_fetch_status = {
            "status": f"L·ªói: {e}",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return None

def fetch_historical_data_thread():
    """Fetch historical data from Binance for training in a separate thread"""
    if not st.session_state.initialized:
        return
    
    # B√°o hi·ªáu ƒëang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
    if 'historical_data_status' not in st.session_state:
        st.session_state.historical_data_status = {
            "status": "B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠",
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "progress": 0
        }
    
    # Log ƒë·ªÉ th√¥ng b√°o
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üìö B·∫Øt ƒë·∫ßu lu·ªìng t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022..."
    st.session_state.log_messages.append(log_message)
    show_toast("B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022...", "info", 5000)
    
    # Qu√° tr√¨nh n√†y d·ª±a v√†o ContinuousTrainer ƒë√£ b·∫Øt ƒë·∫ßu trong initialize_system
    # v√† ƒëang ch·∫°y trong m·ªôt lu·ªìng ri√™ng
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán m√† kh√¥ng s·ª≠ d·ª•ng Streamlit API tr·ª±c ti·∫øp trong thread
    def update_status():
        last_progress = -1  # Theo d√µi ti·∫øn tr√¨nh cu·ªëi c√πng ƒë·ªÉ tr√°nh hi·ªÉn th·ªã th√¥ng b√°o qu√° nhi·ªÅu l·∫ßn
        
        while True:
            try:
                if not hasattr(st.session_state, 'continuous_trainer'):
                    time.sleep(10)
                    continue
                
                trainer = st.session_state.continuous_trainer
                if trainer is None:
                    time.sleep(10)
                    continue
                
                status = trainer.get_training_status()
                
                if 'current_chunk' in status and 'total_chunks' in status and status['total_chunks'] > 0:
                    progress = int((status['current_chunk'] / status['total_chunks']) * 100)
                    
                    # Ch·ªâ hi·ªÉn th·ªã toast khi ti·∫øn tr√¨nh thay ƒë·ªïi ƒë√°ng k·ªÉ
                    if progress != last_progress and (progress % 25 == 0 or progress == 100):
                        # Ph·∫£i ƒë·∫£m b·∫£o thread an to√†n khi hi·ªÉn th·ªã toast
                        if hasattr(st, 'session_state'):
                            # L∆∞u th√¥ng b√°o toast v√†o session state ƒë·ªÉ hi·ªÉn th·ªã ·ªü l·∫ßn render ti·∫øp theo
                            st.session_state.pending_toast = {
                                'message': f"Ti·∫øn tr√¨nh t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠: {progress}%",
                                'type': "info" if progress < 100 else "success",
                                'duration': 3000
                            }
                        
                        # ƒê·∫£m b·∫£o thread an to√†n khi c·∫≠p nh·∫≠t historical_data_status
                        try:
                            st.session_state.historical_data_status = {
                                "status": "ƒêang t·∫£i..." if progress < 100 else "Ho√†n th√†nh",
                                "progress": progress,
                                "current_chunk": status['current_chunk'],
                                "total_chunks": status['total_chunks']
                            }
                        except Exception:
                            pass
                        
                        last_progress = progress
                
                # Ki·ªÉm tra th√†nh ph·∫ßn logs
                if 'logs' in status and len(status['logs']) > 0:
                    # ƒê·∫£m b·∫£o thread an to√†n khi c·∫≠p nh·∫≠t log
                    for log in status['logs'][-5:]:  # Ch·ªâ l·∫•y 5 log m·ªõi nh·∫•t
                        log_message = log['message']
                        log_level = log['level'] if 'level' in log else 'info'
                        
                        try:
                            thread_safe_log(log_message)
                        except Exception:
                            pass
                
                # Ki·ªÉm tra tr·∫°ng th√°i dataframes
                if 'dataframes' in status and status['dataframes'] is not None:
                    # Tr·∫°ng th√°i dataframes thay ƒë·ªïi
                    try:
                        # T√¨m k√≠ch th∆∞·ªõc dataframe ƒë·ªÉ hi·ªÉn th·ªã
                        df_sizes = {}
                        for tf, df_info in status['dataframes'].items():
                            if df_info is not None and 'shape' in df_info:
                                df_sizes[tf] = df_info['shape']
                        
                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªôt c√°ch thread-safe
                        if df_sizes:
                            try:
                                st.session_state.historical_data_status['dataframes'] = df_sizes
                            except Exception:
                                pass
                    except Exception:
                        pass
                
                time.sleep(10)  # Gi·∫£m t·∫ßn su·∫•t polling ƒë·ªÉ tr√°nh qu√° t·∫£i CPU
            except Exception as e:
                print(f"L·ªói trong h√†m update_status: {e}")
                time.sleep(30)  # ƒê·ª£i l√¢u h∆°n n·∫øu c√≥ l·ªói
    
    # B·∫Øt ƒë·∫ßu lu·ªìng c·∫≠p nh·∫≠t tr·∫°ng th√°i
    update_thread = threading.Thread(target=update_status)
    update_thread.daemon = True
    update_thread.start()

def render_main_interface():
    # Load custom CSS
    load_custom_css()
    
    # Create header
    create_header("AI TRADING ORACLE", "H·ªá Th·ªëng D·ª± ƒêo√°n ETHUSDT T·ª± ƒê·ªông")
    
    # Sidebar navigation
    section = st.sidebar.selectbox("Chuy·ªÉn h∆∞·ªõng", ["B·∫£ng ƒëi·ªÅu khi·ªÉn", "Ki·ªÉm so√°t h·ªá th·ªëng", "Giao d·ªãch t·ª± ƒë·ªông", "Hu·∫•n luy·ªán & API", "V·ªÅ ch√∫ng t√¥i"])
    
    # Handle navigation
    if section == "B·∫£ng ƒëi·ªÅu khi·ªÉn":
        # Main dashboard section
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("### D·ª± ƒëo√°n v√† ph√¢n t√≠ch ETHUSDT")
            
            # Display the latest prediction if available
            if hasattr(st.session_state, 'predictions') and st.session_state.predictions:
                latest_prediction = st.session_state.predictions[-1]
                display_current_prediction(latest_prediction)
            else:
                st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu d·ª± ƒëo√°n. H√£y t·∫°o d·ª± ƒëo√°n m·ªõi.")
            
            # Add buttons for prediction and reload data
            pred_col1, pred_col2, pred_col3 = st.columns([1, 1, 2])
            with pred_col1:
                if st.button("üß† T·∫°o d·ª± ƒëo√°n", use_container_width=True):
                    make_prediction()
            
            with pred_col2:
                if st.button("üîÑ T·∫£i l·∫°i d·ªØ li·ªáu", use_container_width=True):
                    fetch_realtime_data()
                    st.rerun()
            
            with pred_col3:
                # Display data source information
                if hasattr(st.session_state, 'data_source'):
                    if hasattr(st.session_state, 'api_status') and not st.session_state.api_status.get('connected', False):
                        st.markdown(f"üìä Ngu·ªìn d·ªØ li·ªáu: <span style='color: orange;'>{st.session_state.data_source}</span> - <span style='color: red;'>{st.session_state.api_status.get('message', 'K·∫øt n·ªëi th·∫•t b·∫°i')}</span>", unsafe_allow_html=True)
                    else:
                        st.markdown(f"üìä Ngu·ªìn d·ªØ li·ªáu: <span style='color: {st.session_state.data_source_color};'>{st.session_state.data_source}</span>", unsafe_allow_html=True)
                else:
                    st.markdown("üìä Ngu·ªìn d·ªØ li·ªáu: Ch∆∞a kh·ªüi t·∫°o")
                    
        with col2:
            st.markdown("### Tr·∫°ng th√°i h·ªá th·ªëng")
            
            # Display system status
            if hasattr(st.session_state, 'data_fetch_status'):
                display_system_status(
                    st.session_state.data_fetch_status,
                    st.session_state.thread_running if hasattr(st.session_state, 'thread_running') else False,
                    len(st.session_state.predictions) if hasattr(st.session_state, 'predictions') else 0
                )
            else:
                st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            
            # Display last prediction time
            if hasattr(st.session_state, 'last_prediction_time') and st.session_state.last_prediction_time is not None:
                time_diff = datetime.now() - st.session_state.last_prediction_time
                minutes = int(time_diff.total_seconds() / 60)
                st.markdown(f"‚è±Ô∏è D·ª± ƒëo√°n cu·ªëi: {minutes} ph√∫t tr∆∞·ªõc")
            else:
                st.markdown("‚è±Ô∏è D·ª± ƒëo√°n cu·ªëi: Ch∆∞a c√≥")
        
        # Full width candlestick chart
        st.markdown("### Bi·ªÉu ƒë·ªì ETHUSDT")
        
        # Chart controls
        chart_col1, chart_col2, chart_col3, chart_col4 = st.columns([1, 1, 1, 1])
        
        with chart_col1:
            auto_refresh = st.checkbox("T·ª± ƒë·ªông l√†m m·ªõi", value=True)
            if auto_refresh != st.session_state.chart_auto_refresh:
                st.session_state.chart_auto_refresh = auto_refresh
                st.rerun()
        
        with chart_col2:
            refresh_interval = st.selectbox(
                "Kho·∫£ng th·ªùi gian l√†m m·ªõi",
                ["30 gi√¢y", "1 ph√∫t", "5 ph√∫t", "15 ph√∫t"],
                index=1
            )
            
            # Convert interval to seconds
            interval_map = {
                "30 gi√¢y": 30,
                "1 ph√∫t": 60,
                "5 ph√∫t": 300,
                "15 ph√∫t": 900
            }
            interval_seconds = interval_map[refresh_interval]
            
            # Auto refresh if enabled
            if st.session_state.chart_auto_refresh:
                time_since_last_refresh = (datetime.now() - st.session_state.chart_last_update_time).total_seconds()
                if time_since_last_refresh > interval_seconds:
                    fetch_realtime_data()
                    st.session_state.chart_last_update_time = datetime.now()
                    st.rerun()
        
        with chart_col3:
            timeframe = st.selectbox(
                "Khung th·ªùi gian",
                ["1 ph√∫t", "5 ph√∫t"],
                index=1 if st.session_state.prediction_settings["timeframe"] == "5m" else 0
            )
            
            # Map display name to API name
            timeframe_map = {
                "1 ph√∫t": "1m",
                "5 ph√∫t": "5m"
            }
            selected_timeframe = timeframe_map[timeframe]
            
            # Update prediction settings if changed
            if selected_timeframe != st.session_state.prediction_settings["timeframe"]:
                st.session_state.prediction_settings["timeframe"] = selected_timeframe
                st.rerun()
        
        with chart_col4:
            display_period = st.selectbox(
                "Hi·ªÉn th·ªã",
                ["24 gi·ªù", "3 ng√†y", "7 ng√†y", "30 ng√†y"],
                index=1
            )
            
            # Map display period to number of candles
            period_map = {
                "24 gi·ªù": {
                    "1m": 24 * 60,
                    "5m": int(24 * 60 / 5)
                },
                "3 ng√†y": {
                    "1m": 3 * 24 * 60,
                    "5m": int(3 * 24 * 60 / 5)
                },
                "7 ng√†y": {
                    "1m": 7 * 24 * 60,
                    "5m": int(7 * 24 * 60 / 5)
                },
                "30 ng√†y": {
                    "1m": 30 * 24 * 60,
                    "5m": int(30 * 24 * 60 / 5)
                }
            }
            
            display_candles = period_map[display_period][selected_timeframe]
        
        # Get data for selected timeframe
        if hasattr(st.session_state, 'timeframe_data') and selected_timeframe in st.session_state.timeframe_data:
            df = st.session_state.timeframe_data[selected_timeframe]
            
            # Limit to display period
            if len(df) > display_candles:
                df = df.iloc[-display_candles:]
            
            # Display candlestick chart
            candlestick_fig = plot_candlestick_chart(df)
            st.plotly_chart(candlestick_fig, use_container_width=True)
            
            # Display technical indicators chart
            tech_fig = plot_technical_indicators(df)
            st.plotly_chart(tech_fig, use_container_width=True)
            
            # Display information about data
            st.markdown(f"‚è±Ô∏è D·ªØ li·ªáu c·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {st.session_state.data_fetch_status['last_update'] if hasattr(st.session_state, 'data_fetch_status') else 'N/A'}")
        else:
            st.error(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho khung th·ªùi gian {selected_timeframe}. Vui l√≤ng t·∫£i d·ªØ li·ªáu.")
        
        # Display prediction history
        st.markdown("### L·ªãch s·ª≠ d·ª± ƒëo√°n")
        if hasattr(st.session_state, 'predictions') and st.session_state.predictions:
            # Create prediction history chart
            prediction_fig = plot_prediction_history(st.session_state.predictions)
            st.plotly_chart(prediction_fig, use_container_width=True)
            
            # Create confidence distribution chart
            confidence_fig = plot_confidence_distribution(st.session_state.predictions)
            st.plotly_chart(confidence_fig, use_container_width=True)
            
            # Display last 5 predictions as table
            st.markdown("### C√°c d·ª± ƒëo√°n g·∫ßn ƒë√¢y")
            recent_preds = pd.DataFrame([{
                'time': p['timestamp'],
                'trend': p['trend'],
                'confidence': f"{p['confidence']*100:.1f}%", 
                'price': f"${p['current_price']:.2f}",
                'target': f"${p['target_price']:.2f}" if 'target_price' in p else 'N/A',
                'reason': p['reason'][:50] + '...' if len(p['reason']) > 50 else p['reason']
            } for p in st.session_state.predictions[-5:]])
            
            # Apply styling to trend column
            def style_trend(val):
                if val == 'LONG':
                    return 'background-color: #d4f7dd; color: #0f5132'
                elif val == 'SHORT':
                    return 'background-color: #f7d4d4; color: #842029'
                else:
                    return 'background-color: #e2e3e5; color: #41464b'
            
            # Style the dataframe
            styled_df = recent_preds.style.applymap(style_trend, subset=['trend'])
            st.dataframe(styled_df, use_container_width=True)
        else:
            st.info("Ch∆∞a c√≥ d·ª± ƒëo√°n n√†o. H√£y t·∫°o d·ª± ƒëo√°n m·ªõi.")
    
    # Initialize if not already done
    if not st.session_state.initialized and not st.session_state.auto_initialize_triggered:
        st.session_state.auto_initialize_triggered = True
        initialize_system()

# G·ªçi h√†m main ƒë·ªÉ hi·ªÉn th·ªã giao di·ªán
render_main_interface()