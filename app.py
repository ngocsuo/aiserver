"""
Main Streamlit application for ETHUSDT prediction dashboard.
Enhanced with improved UI, advanced technical analysis, and multi-source data integration.
Added support for proxy configuration to overcome geographic restrictions.
"""
# Th√™m logging chi ti·∫øt ƒë·ªÉ debug
import sys
import traceback

with open("app.log", "a") as f:
    f.write("Starting application at " + str(__import__("datetime").datetime.now()) + "\n")
    f.flush()

# Main imports
try:
    import streamlit as st
    import pandas as pd
    import numpy as np
    with open("app.log", "a") as f:
        f.write("Successfully imported main libraries\n")
        f.flush()
except Exception as e:
    with open("app.log", "a") as f:
        f.write(f"Error importing main libraries: {str(e)}\n")
        f.write(traceback.format_exc())
        f.flush()
import time
import threading
import os
import json
import html
from datetime import datetime, timedelta
import pytz
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import random
import streamlit.components.v1 as components
import traceback

# Kh√¥ng s·ª≠ d·ª•ng MockDataCollector, ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·ª´ Binance API
import base64
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("app")

# Thi·∫øt l·∫≠p proxy tr∆∞·ªõc khi import c√°c module kh√°c
try:
    from utils.proxy_config import configure_proxy, get_proxy_url_format, configure_socket_proxy
    logger.info("Configuring proxy for Binance API")
    proxies = configure_proxy()
    proxy_url = get_proxy_url_format()
    if proxies and proxy_url:
        logger.info(f"Proxy configured successfully")
        # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho proxy
        os.environ['HTTP_PROXY'] = proxy_url
        os.environ['HTTPS_PROXY'] = proxy_url
        # C·∫•u h√¨nh socket proxy
        configure_socket_proxy()
    else:
        logger.warning("No proxy configured, using direct connection")
except ImportError:
    logger.warning("Proxy configuration module not found, using direct connection")
except Exception as e:
    logger.error(f"Error configuring proxy: {e}")

# Import c√°c module kh√°c
from utils.data_collector_factory import create_data_collector
import config
from utils.data_processor import DataProcessor
from dashboard.components.custom_style import (
    load_custom_css, create_metric_card, create_price_card, 
    create_prediction_card, create_gauge_chart, create_header,
    create_section_header, create_stats_row
)
from utils.feature_engineering import FeatureEngineer
from models.model_trainer import ModelTrainer
from utils.pattern_recognition import (
    detect_candlestick_patterns, calculate_support_resistance, analyze_price_trend
)
from utils.thread_safe_logging import thread_safe_log, read_logs_from_file

# Custom Toast Notification Component
def show_toast(message, type="info", duration=3000):
    """
    Display a toast notification that fades out.
    
    Args:
        message (str): Message to display
        type (str): Type of notification ('info', 'success', 'warning', 'error')
        duration (int): Duration in milliseconds before fading out
    """
    # Escape HTML to prevent XSS
    message = html.escape(message)
    
    # Choose color based on type
    colors = {
        "info": "#17a2b8",
        "success": "#28a745",
        "warning": "#ffc107",
        "error": "#dc3545"
    }
    color = colors.get(type, colors["info"])
    
    # Create toast HTML with CSS animation
    toast_html = f"""
    <style>
    .toast-container {{
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
    }}
    
    .toast {{
        background-color: white;
        color: #333;
        padding: 10px 15px;
        border-radius: 4px;
        margin-bottom: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        border-left: 4px solid {color};
        font-family: sans-serif;
        max-width: 300px;
        animation: fadein 0.5s, fadeout 0.5s {duration/1000 - 0.5}s;
        opacity: 0;
    }}
    
    @keyframes fadein {{
        from {{ right: -300px; opacity: 0; }}
        to {{ right: 0; opacity: 1; }}
    }}
    
    @keyframes fadeout {{
        from {{ opacity: 1; }}
        to {{ opacity: 0; }}
    }}
    </style>
    
    <div class="toast-container">
        <div class="toast">{message}</div>
    </div>
    
    <script>
        setTimeout(function(){{
            const toasts = document.getElementsByClassName('toast');
            for(let i = 0; i < toasts.length; i++){{
                toasts[i].style.opacity = "1";
            }}
        }}, 100);
        
        setTimeout(function(){{
            const container = document.getElementsByClassName('toast-container')[0];
            if(container){{
                container.remove();
            }}
        }}, {duration});
    </script>
    """
    
    # Display the toast
    components.html(toast_html, height=0)
from models.continuous_trainer import get_continuous_trainer
from prediction.prediction_engine import PredictionEngine
from utils.trading_manager import TradingManager
import config

# Set page config
st.set_page_config(
    page_title="ETHUSDT AI Prediction System",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'initialized' not in st.session_state:
    st.session_state.initialized = False
    st.session_state.data_collector = None
    st.session_state.data_processor = None
    st.session_state.model_trainer = None
    st.session_state.prediction_engine = None
    st.session_state.trading_manager = None
    st.session_state.predictions = []
    st.session_state.latest_data = None
    st.session_state.model_trained = False
    st.session_state.data_fetch_status = {"status": "Not started", "last_update": None}
    st.session_state.selected_tab = "Live Dashboard"
    st.session_state.update_thread = None
    st.session_state.thread_running = False
    st.session_state.last_update_time = None
    st.session_state.chart_auto_refresh = True
    st.session_state.chart_last_update_time = datetime.now()
    st.session_state.auto_initialize_triggered = False
    st.session_state.pending_toast = None # Cho ph√©p hi·ªÉn th·ªã toast t·ª´ thread ri√™ng
    
    # Thi·∫øt l·∫≠p giao d·ªãch
    st.session_state.trading_settings = {
        "api_key": "",
        "api_secret": "",
        "symbol": config.SYMBOL,
        "take_profit_type": "percent",  # "percent" ho·∫∑c "usdt"
        "take_profit_value": 3.0,       # 3% ho·∫∑c 3 USDT
        "stop_loss_type": "percent",    # "percent" ho·∫∑c "usdt"
        "stop_loss_value": 2.0,         # 2% ho·∫∑c 2 USDT
        "account_percent": 10.0,        # 10% t√†i kho·∫£n
        "leverage": 5,                  # ƒê√≤n b·∫©y x5
        "min_confidence": 70.0,         # ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu 70%
        "is_trading": False,            # Tr·∫°ng th√°i giao d·ªãch
        "position_info": None,          # Th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i
    }
    
    # Kh·ªüi t·∫°o thi·∫øt l·∫≠p d·ª± ƒëo√°n v√† l∆∞u v√†o session state
    st.session_state.prediction_settings = {
        "timeframe": config.DEFAULT_TIMEFRAME,
        "horizon": config.DEFAULT_PREDICTION_HORIZON
    }
    
    # Kh·ªüi t·∫°o thi·∫øt l·∫≠p hu·∫•n luy·ªán v√† l∆∞u v√†o session state
    st.session_state.training_settings = {
        "start_date": config.HISTORICAL_START_DATE,
        "training_frequency": "30 ph√∫t",
        "validation_split": config.VALIDATION_SPLIT,
        "test_split": config.TEST_SPLIT
    }
    
    # Kh·ªüi t·∫°o thi·∫øt l·∫≠p h·ªá th·ªëng v√† l∆∞u v√†o session state
    st.session_state.system_settings = {
        "use_real_api": config.USE_REAL_API,
        "update_interval": config.UPDATE_INTERVAL,
        "auto_training": config.CONTINUOUS_TRAINING,
        "lookback_periods": config.LOOKBACK_PERIODS
    }

# H√†m l∆∞u tr·∫°ng th√°i giao d·ªãch v√†o t·∫≠p tin
def save_trading_state():
    """L∆∞u tr·∫°ng th√°i giao d·ªãch v√†o t·∫≠p tin ƒë·ªÉ kh√¥i ph·ª•c khi F5 ho·∫∑c chuy·ªÉn tab"""
    if hasattr(st.session_state, 'trading_settings'):
        try:
            trading_state = {
                'api_key': st.session_state.trading_settings.get('api_key', ''),
                'api_secret': st.session_state.trading_settings.get('api_secret', ''),
                'take_profit_type': st.session_state.trading_settings.get('take_profit_type', 'percent'),
                'take_profit_value': st.session_state.trading_settings.get('take_profit_value', 3.0),
                'stop_loss_type': st.session_state.trading_settings.get('stop_loss_type', 'percent'),
                'stop_loss_value': st.session_state.trading_settings.get('stop_loss_value', 2.0),
                'account_percent': st.session_state.trading_settings.get('account_percent', 10.0),
                'leverage': st.session_state.trading_settings.get('leverage', 5),
                'min_confidence': st.session_state.trading_settings.get('min_confidence', 70.0),
                'is_trading': st.session_state.trading_settings.get('is_trading', False),
            }
            
            with open("trading_state.json", "w") as f:
                json.dump(trading_state, f)
        except Exception as e:
            print(f"L·ªói khi l∆∞u tr·∫°ng th√°i giao d·ªãch: {e}")

# H√†m t·∫£i tr·∫°ng th√°i giao d·ªãch t·ª´ t·∫≠p tin
def load_trading_state():
    """T·∫£i tr·∫°ng th√°i giao d·ªãch t·ª´ t·∫≠p tin"""
    try:
        if os.path.exists("trading_state.json"):
            with open("trading_state.json", "r") as f:
                trading_state = json.load(f)
                
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch n·∫øu c√≥
            if hasattr(st.session_state, 'trading_settings'):
                st.session_state.trading_settings.update(trading_state)
                
                # Kh·ªüi t·∫°o l·∫°i trading_manager n·∫øu c·∫ßn
                if trading_state.get('is_trading', False) and trading_state.get('api_key') and trading_state.get('api_secret'):
                    # ƒê·∫£m b·∫£o ch√∫ng ta c√≥ trading_manager
                    if not hasattr(st.session_state, "trading_manager") or st.session_state.trading_manager is None:
                        from utils.trading_manager import TradingManager
                        st.session_state.trading_manager = TradingManager()
                    
                    # K·∫øt n·ªëi l·∫°i v·ªõi API
                    if not hasattr(st.session_state.trading_manager, 'client') or st.session_state.trading_manager.client is None:
                        st.session_state.trading_manager.connect(
                            trading_state.get('api_key'),
                            trading_state.get('api_secret')
                        )
                
                return True
    except Exception as e:
        print(f"L·ªói khi t·∫£i tr·∫°ng th√°i giao d·ªãch: {e}")
    
    return False

# Ki·ªÉm tra v√† hi·ªÉn th·ªã toast t·ª´ thread ri√™ng
if hasattr(st.session_state, 'pending_toast') and st.session_state.pending_toast is not None:
    toast_data = st.session_state.pending_toast
    show_toast(toast_data['message'], toast_data['type'], toast_data['duration'])
    st.session_state.pending_toast = None

# T·∫£i tr·∫°ng th√°i giao d·ªãch t·ª´ t·∫≠p tin
if 'trading_state_loaded' not in st.session_state:
    st.session_state.trading_state_loaded = load_trading_state()

def initialize_system():
    """Initialize the prediction system"""
    if st.session_state.initialized:
        return

    # ƒê·∫£m b·∫£o bi·∫øn tr·∫°ng th√°i ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi s·ª≠ d·ª•ng
    if 'thread_running' not in st.session_state:
        st.session_state.thread_running = False
        
    if 'model_trained' not in st.session_state:
        st.session_state.model_trained = False
        
    if 'historical_data_ready' not in st.session_state:
        st.session_state.historical_data_ready = False
        st.session_state.thread_running = False
        
    with st.spinner("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng d·ª± ƒëo√°n ETHUSDT..."):
        try:
            # Initialize data collector with factory function
            from utils.data_collector_factory import create_data_collector
            
            # Create the appropriate data collector based on config
            st.session_state.data_collector = create_data_collector()
            
            # Store data source type for display
            # Lu√¥n s·ª≠ d·ª•ng Binance API v·ªõi d·ªØ li·ªáu th·ª±c
            st.session_state.data_source = "Binance API (D·ªØ li·ªáu th·ª±c)"
            st.session_state.data_source_color = "green"
            
            # Store successful connection status
            st.session_state.api_status = {
                "connected": True,
                "message": "K·∫øt n·ªëi Binance API th√†nh c√¥ng"
            }
                
            # Log data source
            if 'log_messages' not in st.session_state:
                st.session_state.log_messages = []
                
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"{timestamp} - H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o v·ªõi ngu·ªìn d·ªØ li·ªáu: {st.session_state.data_source}"
            st.session_state.log_messages.append(log_message)
            
            # Initialize data processor
            st.session_state.data_processor = DataProcessor()
            
            # Initialize model trainer
            st.session_state.model_trainer = ModelTrainer()
            
            # Initialize prediction engine
            st.session_state.prediction_engine = PredictionEngine()
            
            # Initialize continuous trainer
            continuous_trainer = get_continuous_trainer()
            st.session_state.continuous_trainer = continuous_trainer
            
            # Initialize trading manager with API keys from environment
            api_key = os.environ.get('BINANCE_API_KEY')
            api_secret = os.environ.get('BINANCE_API_SECRET')
            st.session_state.trading_manager = TradingManager(api_key, api_secret)
            
            # C·∫≠p nh·∫≠t trading settings
            if api_key and api_secret:
                st.session_state.trading_settings["api_key"] = api_key
                st.session_state.trading_settings["api_secret"] = api_secret
            
            # Initialize status tracking
            st.session_state.initialized = True
            
            # Update status
            st.session_state.data_fetch_status = {
                "status": "ƒê√£ kh·ªüi t·∫°o", 
                "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # Initialize historical data thread status
            st.session_state.historical_data_status = {
                "status": "Ch∆∞a b·∫Øt ƒë·∫ßu",
                "progress": 0
            }
            
            # Initialize model status
            st.session_state.model_trained = False
            
            # Initialize prediction history
            st.session_state.predictions = []
            
            # Initialize update thread status
            st.session_state.thread_running = False
            st.session_state.update_thread = None
            
            # LU·ªíNG 1: B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c cho dashboard
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"{timestamp} - üîÑ B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c cho dashboard..."
            st.session_state.log_messages.append(log_message)
            
            # Fetch real-time data immediately for the dashboard
            fetch_realtime_data()
            
            # LU·ªíNG 2: B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022 trong lu·ªìng ri√™ng bi·ªát
            if config.CONTINUOUS_TRAINING:
                continuous_trainer.start()
                log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu lu·ªìng l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022 v√† hu·∫•n luy·ªán li√™n t·ª•c ({config.TRAINING_SCHEDULE['frequency']})"
                st.session_state.log_messages.append(log_message)
                
                # Initialize continuous training status
                st.session_state.continuous_training_status = {
                    "enabled": True,
                    "schedule": config.TRAINING_SCHEDULE,
                    "last_training": None
                }
                
                # Start the monitoring thread for historical data
                fetch_historical_data_thread()
            else:
                st.session_state.continuous_training_status = {
                    "enabled": False
                }
            
            # Confirm initialization
            st.success("H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
            
        except Exception as e:
            st.error(f"L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng: {e}")

def fetch_realtime_data():
    """Fetch the latest real-time data from Binance for the dashboard"""
    if not st.session_state.initialized:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        return None
    
    # Create log container if not exists
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    
    # Add log message
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üîÑ ƒêang t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c ETHUSDT..."
    st.session_state.log_messages.append(log_message)
    
    try:
        # Update data for all timeframes
        st.session_state.data_fetch_status = {
            "status": "ƒêang t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c...",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Get data source type
        data_source_type = "Binance API"
        
        # Add log message
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - üì° G·ª≠i y√™u c·∫ßu ƒë·∫øn {data_source_type} cho d·ªØ li·ªáu th·ªùi gian th·ª±c..."
        st.session_state.log_messages.append(log_message)
        
        # Ch·ªâ l·∫•y d·ªØ li·ªáu 3 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ t·∫£i nhanh h∆°n
        end_date = datetime.now()
        start_date = end_date - timedelta(days=config.DATA_RANGE_OPTIONS["realtime"])
        start_date_str = start_date.strftime("%Y-%m-%d")
        
        # Kh·ªüi t·∫°o dictionary l∆∞u d·ªØ li·ªáu
        data = {}
        
        # Fetch song song d·ªØ li·ªáu cho c·∫£ khung 1m v√† 5m
        for timeframe in ["1m", "5m"]:
            log_message = f"{timestamp} - üì° ƒêang l·∫•y d·ªØ li·ªáu khung {timeframe}..."
            st.session_state.log_messages.append(log_message)
            
            # G·ªçi h√†m l·∫•y d·ªØ li·ªáu v·ªõi tham s·ªë ng√†y b·∫Øt ƒë·∫ßu v√† khung th·ªùi gian
            timeframe_data = st.session_state.data_collector.collect_historical_data(
                symbol=config.SYMBOL,
                timeframe=timeframe,
                start_date=start_date_str,
                end_date=None
            )
            
            # L∆∞u v√†o dictionary
            data[timeframe] = timeframe_data
            
            log_message = f"{timestamp} - ‚úÖ ƒê√£ t·∫£i {len(timeframe_data)} n·∫øn {timeframe}"
            st.session_state.log_messages.append(log_message)
        
        # L∆∞u d·ªØ li·ªáu 1m v√†o session state (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code hi·ªán t·∫°i)
        st.session_state.latest_data = data["1m"]
        
        # L∆∞u c·∫£ d·ªØ li·ªáu 1m v√† 5m v√†o session state
        if 'timeframe_data' not in st.session_state:
            st.session_state.timeframe_data = {}
        st.session_state.timeframe_data = data
        
        # Ghi v√†o log th√¥ng tin kho·∫£ng th·ªùi gian
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - ‚ÑπÔ∏è D·∫£i th·ªùi gian: {start_date_str} ƒë·∫øn {end_date.strftime('%Y-%m-%d')}"
        st.session_state.log_messages.append(log_message)
        
        # Add success log
        timestamp = datetime.now().strftime("%H:%M:%S")
        candle_count = len(st.session_state.latest_data) if st.session_state.latest_data is not None else 0
        log_message = f"{timestamp} - ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng {candle_count} n·∫øn ETHUSDT th·ªùi gian th·ª±c"
        st.session_state.log_messages.append(log_message)
        
        st.session_state.data_fetch_status = {
            "status": "D·ªØ li·ªáu th·ªùi gian th·ª±c ƒë√£ t·∫£i th√†nh c√¥ng",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        return data
    except Exception as e:
        # Add error log
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - ‚ùå L·ªñI: Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi gian th·ª±c: {str(e)}"
        st.session_state.log_messages.append(log_message)
        
        st.session_state.data_fetch_status = {
            "status": f"L·ªói: {e}",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return None

def fetch_historical_data_thread():
    """Fetch historical data from Binance for training in a separate thread"""
    if not st.session_state.initialized:
        return
    
    # B√°o hi·ªáu ƒëang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
    if 'historical_data_status' not in st.session_state:
        st.session_state.historical_data_status = {
            "status": "B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠",
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "progress": 0
        }
    
    # Log ƒë·ªÉ th√¥ng b√°o
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üìö B·∫Øt ƒë·∫ßu lu·ªìng t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022..."
    st.session_state.log_messages.append(log_message)
    show_toast("B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ 2022...", "info", 5000)
    
    # Qu√° tr√¨nh n√†y d·ª±a v√†o ContinuousTrainer ƒë√£ b·∫Øt ƒë·∫ßu trong initialize_system
    # v√† ƒëang ch·∫°y trong m·ªôt lu·ªìng ri√™ng
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÉ hi·ªÉn th·ªã tr√™n giao di·ªán m√† kh√¥ng s·ª≠ d·ª•ng Streamlit API tr·ª±c ti·∫øp trong thread
    def update_status():
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i hu·∫•n luy·ªán v·ªõi c√°ch an to√†n v·ªõi thread"""
        # ƒê·∫£m b·∫£o r·∫±ng thread_safe_logging ƒë√£ s·∫µn s√†ng
        try:
            from utils.thread_safe_logging import thread_safe_log
        except ImportError:
            # N·∫øu kh√¥ng c√≥ module, t·∫°o file thread_safe_logging trong utils
            if not os.path.exists("utils"):
                os.makedirs("utils")
                
            with open("utils/thread_safe_logging.py", "w") as f:
                f.write("""
\"\"\"
Thread-safe logging functions for AI Trading System
\"\"\"
import os
import sys
import time
import threading
from datetime import datetime

_log_lock = threading.Lock()

def log_to_file(message, log_file="training_logs.txt"):
    \"\"\"Thread-safe function to log messages to a file\"\"\"
    with _log_lock:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(log_file, "a") as f:
            f.write(f"{timestamp} - {message}\\n")
            f.flush()

def log_to_console(message):
    \"\"\"Thread-safe function to log messages to console\"\"\"
    with _log_lock:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"{timestamp} - {message}")
        sys.stdout.flush()

def thread_safe_log(message, log_file="training_logs.txt"):
    \"\"\"Combined logging function that logs to both file and console\"\"\"
    log_to_file(message, log_file)
    log_to_console(message)

def read_logs_from_file(log_file="training_logs.txt", max_lines=100):
    \"\"\"Read log entries from file with a maximum number of lines\"\"\"
    if not os.path.exists(log_file):
        return []
        
    with open(log_file, "r") as f:
        lines = f.readlines()
        
    # Return last N lines (most recent)
    return lines[-max_lines:]
""")
                
            # T·∫°o file log tr·ªëng
            with open("training_logs.txt", "w") as f:
                f.write("")
                
            # Import l·∫°i
            from utils.thread_safe_logging import thread_safe_log
        
        last_progress = -1  # Theo d√µi ti·∫øn tr√¨nh cu·ªëi c√πng ƒë·ªÉ tr√°nh hi·ªÉn th·ªã qu√° nhi·ªÅu log
        
        while True:
            try:
                # L·∫•y tr·∫°ng th√°i hu·∫•n luy·ªán t·ª´ singleton object - KH√îNG s·ª≠ d·ª•ng st.session_state
                from models.continuous_trainer import get_continuous_trainer
                trainer = get_continuous_trainer()
                
                if trainer is None:
                    thread_safe_log("ContinuousTrainer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
                    time.sleep(10)
                    continue
                
                status = trainer.get_training_status()
                
                if 'current_chunk' in status and 'total_chunks' in status and status['total_chunks'] > 0:
                    progress = int((status['current_chunk'] / status['total_chunks']) * 100)
                    
                    # Ghi log thay v√¨ hi·ªÉn th·ªã toast trong thread
                    if progress != last_progress and (progress % 10 == 0 or progress == 100):
                        last_progress = progress
                        thread_safe_log(f"Ti·∫øn tr√¨nh hu·∫•n luy·ªán: {progress}% ({status['current_chunk']}/{status['total_chunks']} chunks)")
                        
                        # L∆∞u th√¥ng tin v√†o file thay v√¨ truy c·∫≠p session_state
                        try:
                            import json
                            with open("training_progress.json", "w") as f:
                                json.dump({
                                    "message": f"T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠: {progress}% ho√†n th√†nh",
                                    "type": "info" if progress < 100 else "success",
                                    "duration": 3000,
                                    "status": f"ƒêang t·∫£i chunk {status['current_chunk']}/{status['total_chunks']}",
                                    "progress": progress,
                                    "update_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }, f)
                        except Exception as e:
                            thread_safe_log(f"Kh√¥ng th·ªÉ l∆∞u ti·∫øn tr√¨nh hu·∫•n luy·ªán: {e}")
                    
                    # L∆∞u th√¥ng tin v·ªÅ Binance server time v√†o file
                    try:
                        from utils.data_collector_factory import create_data_collector
                        collector = create_data_collector()
                        server_time = collector.client.get_server_time()
                        server_time_ms = server_time['serverTime']
                        binance_time = datetime.fromtimestamp(server_time_ms / 1000)
                        
                        # L∆∞u th√¥ng tin v√†o file
                        import json
                        with open("binance_time.json", "w") as f:
                            json.dump({
                                "time": binance_time.strftime("%Y-%m-%d %H:%M:%S"),
                                "update_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            }, f)
                            
                        thread_safe_log(f"Binance server time: {binance_time.strftime('%Y-%m-%d %H:%M:%S')}")
                    except Exception as e:
                        thread_safe_log(f"L·ªói khi l·∫•y Binance server time: {e}")
                
                time.sleep(10)  # Ki·ªÉm tra m·ªói 10 gi√¢y
            except Exception as e:
                print(f"Error updating historical data status: {e}")
                time.sleep(30)  # N·∫øu l·ªói, ƒë·ª£i l√¢u h∆°n
    
    # B·∫Øt ƒë·∫ßu lu·ªìng theo d√µi ti·∫øn ƒë·ªô
    status_thread = threading.Thread(target=update_status)
    status_thread.daemon = True
    status_thread.start()

def fetch_data():
    """Fetch the latest data from Binance (compatibility function)"""
    return fetch_realtime_data()

def train_models():
    """Train all prediction models in a background thread"""
    if not st.session_state.initialized or st.session_state.latest_data is None:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu")
        show_toast("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu", "warning")
        return False
    
    # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
    progress_placeholder = st.empty()
    progress_placeholder.info("Qu√° tr√¨nh hu·∫•n luy·ªán b·∫Øt ƒë·∫ßu trong n·ªÅn. B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng ·ª©ng d·ª•ng.")
    
    # Progress bar
    progress_bar = st.progress(0)
    
    # Add log message
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üß† B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán AI trong n·ªÅn..."
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    st.session_state.log_messages.append(log_message)
    
    # Ki·ªÉm tra xem c√≥ th√¥ng s·ªë t√πy ch·ªânh kh√¥ng
    custom_params = st.session_state.get('custom_training_params', None)
    if custom_params:
        log_message = f"{timestamp} - üîß S·ª≠ d·ª•ng c√†i ƒë·∫∑t t√πy ch·ªânh: {custom_params['timeframe']}, {custom_params['range']}, ng∆∞·ª°ng {custom_params['threshold']}%, {custom_params['epochs']} epochs"
        st.session_state.log_messages.append(log_message)
        show_toast(f"Hu·∫•n luy·ªán v·ªõi c√†i ƒë·∫∑t t√πy ch·ªânh: {custom_params['timeframe']}, {custom_params['epochs']} epochs", "info")
    
    # H√†m c·∫≠p nh·∫≠t log ri√™ng
    def update_log(message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - {message}"
        st.session_state.log_messages.append(log_message)
        # C·∫≠p nh·∫≠t th√¥ng b√°o hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
        if "Step" in message or "B∆∞·ªõc" in message:
            progress_placeholder.info(message)
            # C·∫≠p nh·∫≠t progress bar
            if "1/5" in message:
                progress_bar.progress(10)
            elif "2/5" in message:
                progress_bar.progress(30)
            elif "3/5" in message:
                progress_bar.progress(50)
            elif "4/5" in message:
                progress_bar.progress(70)
            elif "5/5" in message:
                progress_bar.progress(90)
            elif "success" in message.lower() or "ho√†n t·∫•t" in message.lower() or "th√†nh c√¥ng" in message.lower():
                progress_bar.progress(100)
                progress_placeholder.success("Hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng!")
                
        if "Error" in message or "ERROR" in message or "L·ªói" in message:
            show_toast(message, "error", 5000)
    
    # Import thread-safe logging functions
    try:
        from utils.thread_safe_logging import thread_safe_log, read_logs_from_file
    except ImportError:
        # N·∫øu kh√¥ng c√≥, t·∫°o module thread-safe logging
        if not os.path.exists("utils"):
            os.makedirs("utils")
            
        with open("utils/thread_safe_logging.py", "w") as f:
            f.write("""
\"\"\"
Thread-safe logging functions for AI Trading System
\"\"\"
import os
import sys
import time
import threading
from datetime import datetime

_log_lock = threading.Lock()

def log_to_file(message, log_file="training_logs.txt"):
    \"\"\"Thread-safe function to log messages to a file\"\"\"
    with _log_lock:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(log_file, "a") as f:
            f.write(f"{timestamp} - {message}\\n")
            f.flush()

def log_to_console(message):
    \"\"\"Thread-safe function to log messages to console\"\"\"
    with _log_lock:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"{timestamp} - {message}")
        sys.stdout.flush()

def thread_safe_log(message, log_file="training_logs.txt"):
    \"\"\"Combined logging function that logs to both file and console\"\"\"
    log_to_file(message, log_file)
    log_to_console(message)

def read_logs_from_file(log_file="training_logs.txt", max_lines=100):
    \"\"\"Read log entries from file with a maximum number of lines\"\"\"
    if not os.path.exists(log_file):
        return []
        
    with open(log_file, "r") as f:
        lines = f.readlines()
        
    # Return last N lines (most recent)
    return lines[-max_lines:]
""")
        
        # T·∫°o file log tr·ªëng
        with open("training_logs.txt", "w") as f:
            f.write("")
            
        # Import l·∫°i sau khi t·∫°o
        from utils.thread_safe_logging import thread_safe_log, read_logs_from_file
    
    # T·∫°o h√†m hu·∫•n luy·ªán ch·∫°y ng·∫ßm trong thread an to√†n
    def train_models_background():
        """H√†m hu·∫•n luy·ªán ch·∫°y trong thread ri√™ng bi·ªát"""
        from utils.thread_safe_logging import thread_safe_log
        
        try:
            thread_safe_log("B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh AI trong thread ri√™ng...")
            thread_safe_log("L∆ØU √ù: ƒêang s·ª≠ d·ª•ng phi√™n b·∫£n an to√†n thread, tr√°nh truy c·∫≠p session_state")
            
            # QUAN TR·ªåNG: KH√îNG truy c·∫≠p st.session_state trong thread n√†y!
            # Thay v√¨ l·∫•y d·ªØ li·ªáu t·ª´ session_state, ch√∫ng ta s·∫Ω t·∫£i d·ªØ li·ªáu m·ªõi
            
            from utils.data_collector import create_data_collector
            from utils.data_processor import DataProcessor
            from models.model_trainer import ModelTrainer
            import config
            
            thread_safe_log("T·∫°o data collector...")
            data_collector = create_data_collector()
            
            thread_safe_log("T·∫°o data processor v√† model trainer...")
            data_processor = DataProcessor()
            model_trainer = ModelTrainer()
            
            thread_safe_log("Thu th·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠...")
            if hasattr(config, 'HISTORICAL_START_DATE') and config.HISTORICAL_START_DATE:
                data = data_collector.collect_historical_data(
                    timeframe=config.TIMEFRAMES["primary"],
                    start_date=config.HISTORICAL_START_DATE
                )
            else:
                data = data_collector.collect_historical_data(
                    timeframe=config.TIMEFRAMES["primary"],
                    limit=config.LOOKBACK_PERIODS
                )
            
            if data is None or len(data) == 0:
                thread_safe_log("KH√îNG TH·ªÇ thu th·∫≠p d·ªØ li·ªáu cho hu·∫•n luy·ªán")
                return
                
            thread_safe_log(f"ƒê√£ thu th·∫≠p {len(data)} n·∫øn d·ªØ li·ªáu")
            
            # Ti·∫øp t·ª•c quy tr√¨nh hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi d·ªØ li·ªáu m·ªõi thu th·∫≠p
            thread_safe_log("X·ª≠ l√Ω d·ªØ li·ªáu...")
            processed_data = data_processor.process_data(data)
            
            # Display feature information
            feature_count = len(processed_data.columns) - 1  # Exclude target column
            thread_safe_log(f"ƒê√£ t·∫°o {feature_count} ch·ªâ b√°o k·ªπ thu·∫≠t v√† t√≠nh nƒÉng")
            thread_safe_log(f"M·∫´u hu·∫•n luy·ªán: {len(processed_data)}")
            
            # Prepare data for models
            thread_safe_log("Chu·∫©n b·ªã d·ªØ li·ªáu chu·ªói cho LSTM v√† Transformer...")
            sequence_data = data_processor.prepare_sequence_data(processed_data)
            
            thread_safe_log("Chu·∫©n b·ªã d·ªØ li·ªáu h√¨nh ·∫£nh cho CNN...")
            image_data = data_processor.prepare_cnn_data(processed_data)
            
            # Hu·∫•n luy·ªán t·ª´ng m√¥ h√¨nh ri√™ng bi·ªát
            thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh LSTM...")
            lstm_model, lstm_history = model_trainer.train_lstm(sequence_data)
            
            thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh Transformer...")
            transformer_model, transformer_history = model_trainer.train_transformer(sequence_data)
            
            thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh CNN...")
            cnn_model, cnn_history = model_trainer.train_cnn(image_data)
            
            thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh Similarity l·ªãch s·ª≠...")
            historical_model, _ = model_trainer.train_historical_similarity(sequence_data)
            
            thread_safe_log("Hu·∫•n luy·ªán m√¥ h√¨nh Meta-Learner...")
            meta_model, _ = model_trainer.train_meta_learner(sequence_data, image_data)
            
            thread_safe_log("Hu·∫•n luy·ªán th√†nh c√¥ng t·∫•t c·∫£ c√°c m√¥ h√¨nh!")
            
            # L∆∞u tr·∫°ng th√°i hu·∫•n luy·ªán v√†o file
            try:
                import json
                from datetime import datetime
                
                models = {
                    'lstm': lstm_model,
                    'transformer': transformer_model,
                    'cnn': cnn_model,
                    'historical_similarity': historical_model,
                    'meta_learner': meta_model
                }
                
                # L∆∞u models v√†o file
                import os
                import pickle
                
                if not os.path.exists("saved_models"):
                    os.makedirs("saved_models")
                    
                with open("saved_models/models.pkl", "wb") as f:
                    pickle.dump(models, f)
                    
                # L∆∞u metadata v·ªÅ qu√° tr√¨nh hu·∫•n luy·ªán
                training_status = {
                    'last_training_time': datetime.now().isoformat(),
                    'data_points': len(data),
                    'feature_count': feature_count,
                    'training_samples': len(processed_data),
                    'model_version': config.MODEL_VERSION if hasattr(config, 'MODEL_VERSION') else "1.0.0",
                    'training_complete': True
                }
                
                with open("saved_models/training_status.json", "w") as f:
                    json.dump(training_status, f)
                    
                thread_safe_log("ƒê√£ l∆∞u t·∫•t c·∫£ m√¥ h√¨nh v√†o saved_models/models.pkl")
                
                return True
            except Exception as e:
                thread_safe_log(f"L·ªói khi l∆∞u m√¥ h√¨nh: {str(e)}")
                return False
                
        except Exception as e:
            # Log error using thread-safe function
            thread_safe_log(f"‚ùå L·ªñI trong qu√° tr√¨nh hu·∫•n luy·ªán: {str(e)}")
            import traceback
            thread_safe_log(f"Chi ti·∫øt l·ªói: {traceback.format_exc()}")
            return False
        
    # H√†m h·ªó tr·ª£ ghi log
    def update_log(message):
        """Log training progress to session state and to local list"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_msg = f"{timestamp} - {message}"
        
        # Th√™m v√†o training logs
        if 'training_log_messages' not in st.session_state:
            st.session_state.training_log_messages = []
        st.session_state.training_log_messages.append(log_msg)
        
        # Th√™m v√†o system logs
        if 'log_messages' in st.session_state:
            st.session_state.log_messages.append(log_msg)
        
        # Hi·ªÉn th·ªã toast notification cho ng∆∞·ªùi d√πng
        if ("th√†nh c√¥ng" in message or 
            "ho√†n th√†nh" in message or 
            "ƒë·ªô ch√≠nh x√°c" in message):
            show_toast(message, "success", 3000)
        elif "L·ªói" in message or "L·ªñI" in message:
            show_toast(f"L·ªói hu·∫•n luy·ªán: {message}", "error", 5000)
    
    # Hi·ªÉn th·ªã th√¥ng b√°o hu·∫•n luy·ªán ƒëang b·∫Øt ƒë·∫ßu
    show_toast("ƒêang b·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán m√¥ h√¨nh AI...", "info", 3000)
    
    # Th√™m log messages ƒë·ªÉ hi·ªÉn th·ªã trong tab Training Logs
    training_logs = []
    
    # T·∫°o progress bar ch·ªâ trong ph·∫°m vi function n√†y
    progress_placeholder = st.empty()
    progress_bar = st.progress(0)
    
    def update_log(message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_msg = f"{timestamp} - {message}"
        
        # Th√™m v√†o training_logs cho tab Training Logs
        if 'training_log_messages' not in st.session_state:
            st.session_state.training_log_messages = []
        st.session_state.training_log_messages.append(log_msg)
        
        # Th√™m v√†o log_messages chung
        if 'log_messages' not in st.session_state:
            st.session_state.log_messages = []
        st.session_state.log_messages.append(log_msg)
        
        # L∆∞u l·∫°i local cho function n√†y
        training_logs.append(log_msg)
        
        # Hi·ªÉn th·ªã toast notification cho c√°c th√¥ng b√°o quan tr·ªçng
        if "Step" in message or "model trained" in message:
            show_toast(message, "info", 3000)
        elif "Error" in message or "ERROR" in message:
            show_toast(message, "error", 5000)
    
    # B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán trong thread
    training_thread = threading.Thread(target=train_models_background)
    training_thread.daemon = True  # Thread s·∫Ω t·ª± ƒë√≥ng khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
    training_thread.start()
    
    # X√≥a c√°c th√†nh ph·∫ßn UI hi·ªÉn th·ªã l√™n
    if 'progress_bar' in locals():
        progress_bar.empty()
    if 'progress_placeholder' in locals():
        progress_placeholder.empty()
    
    return True

def make_prediction():
    """Generate a prediction using the trained models"""
    if not st.session_state.initialized:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        show_toast("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o", "warning")
        return None
    
    # Add log message
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_message = f"{timestamp} - üß† B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o d·ª± ƒëo√°n..."
    st.session_state.log_messages.append(log_message)
    
    # Th√¥ng b√°o ti·∫øn tr√¨nh
    prediction_progress = st.empty()
    prediction_progress.info("ƒêang t·∫£i d·ªØ li·ªáu ETHUSDT m·ªõi nh·∫•t...")
    
    try:
        # Always fetch the latest data first
        fetch_result = fetch_data()
        
        if fetch_result is None or st.session_state.latest_data is None:
            # Add error log
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"{timestamp} - ‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho d·ª± ƒëo√°n"
            st.session_state.log_messages.append(log_message)
            
            prediction_progress.warning("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t")
            show_toast("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho d·ª± ƒëo√°n", "error")
            return None
        
        # Add log message
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Use trained models if available, otherwise use fallback
        if st.session_state.model_trained:
            # Get the latest data
            latest_data = st.session_state.latest_data
            
            log_message = f"{timestamp} - ü§ñ ƒêang s·ª≠ d·ª•ng m√¥ h√¨nh AI ƒë√£ hu·∫•n luy·ªán ƒë·ªÉ d·ª± ƒëo√°n..."
            st.session_state.log_messages.append(log_message)
            
            prediction_progress.info("ƒêang s·ª≠ d·ª•ng m√¥ h√¨nh AI ƒë√£ hu·∫•n luy·ªán ƒë·ªÉ t·∫°o d·ª± ƒëo√°n...")
            # Use the prediction engine to generate prediction
            prediction = st.session_state.prediction_engine.predict(latest_data)
        else:
            log_message = f"{timestamp} - ‚ö†Ô∏è Ch∆∞a c√≥ m√¥ h√¨nh AI ƒë∆∞·ª£c hu·∫•n luy·ªán, s·ª≠ d·ª•ng d·ª± ƒëo√°n m√¥ ph·ªèng..."
            st.session_state.log_messages.append(log_message)
            
            prediction_progress.warning("Ch∆∞a c√≥ m√¥ h√¨nh AI ƒë∆∞·ª£c hu·∫•n luy·ªán, s·ª≠ d·ª•ng d·ª± ƒëo√°n m√¥ ph·ªèng...")
            # Fallback to mock prediction for demonstration
            prediction = make_random_prediction()
        
        # Add to predictions history
        st.session_state.predictions.append(prediction)
        
        # Keep only the last 100 predictions
        if len(st.session_state.predictions) > 100:
            st.session_state.predictions = st.session_state.predictions[-100:]
        
        # Add success log
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - ‚úÖ D·ª± ƒëo√°n ƒë√£ t·∫°o: {prediction['trend']} v·ªõi ƒë·ªô tin c·∫≠y {prediction['confidence']:.2f}"
        st.session_state.log_messages.append(log_message)
        
        # Th√¥ng b√°o th√†nh c√¥ng v√† x√≥a ƒëi ti·∫øn tr√¨nh
        prediction_progress.success(f"D·ª± ƒëo√°n m·ªõi: {prediction['trend']} (ƒë·ªô tin c·∫≠y {prediction['confidence']*100:.1f}%)")
        show_toast(f"D·ª± ƒëo√°n m·ªõi: {prediction['trend']}", "success")
        
        # Bu·ªôc c·∫≠p nh·∫≠t trang
        st.session_state.last_prediction_time = datetime.now()
        st.rerun()
        
        return prediction
    except Exception as e:
        # Add error log
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"{timestamp} - ‚ùå L·ªñI khi t·∫°o d·ª± ƒëo√°n: {str(e)}"
        st.session_state.log_messages.append(log_message)
        
        prediction_progress.error(f"L·ªói khi t·∫°o d·ª± ƒëo√°n: {e}")
        show_toast(f"L·ªói khi t·∫°o d·ª± ƒëo√°n: {str(e)}", "error")
        return None

def make_random_prediction():
    """Generate a random prediction for demo purposes"""
    if not st.session_state.initialized or st.session_state.latest_data is None:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu")
        show_toast("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu", "warning")
        return None
    
    classes = ["SHORT", "NEUTRAL", "LONG"]
    prediction_class = random.choice([0, 1, 2])
    confidence = random.uniform(0.65, 0.95)
    
    current_price = st.session_state.latest_data.iloc[-1]['close']
    
    if prediction_class == 0:  # SHORT
        predicted_move = -random.uniform(0.3, 1.2)
        target_price = current_price * (1 + predicted_move/100)
        reason = "Bearish divergence detected; RSI overbought; 200 EMA resistance"
    elif prediction_class == 2:  # LONG
        predicted_move = random.uniform(0.3, 1.2)
        target_price = current_price * (1 + predicted_move/100)
        reason = "Bullish pattern confirmed; RSI oversold; 50 EMA support"
    else:  # NEUTRAL
        predicted_move = random.uniform(-0.2, 0.2)
        target_price = current_price * (1 + predicted_move/100)
        reason = "Sideways price action; low volatility; mixed signals"
    
    prediction = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "price": current_price,
        "trend": classes[prediction_class],
        "confidence": round(confidence, 2),
        "target_price": round(target_price, 2),
        "predicted_move": round(predicted_move, 2),
        "reason": reason,
        "valid_for_minutes": config.VALIDITY_MINUTES
    }
    
    return prediction

def update_data_continuously():
    """Update data continuously in a separate thread"""
    # Initialize continuous trainer
    continuous_trainer = get_continuous_trainer()
    
    # Keep track of the number of updates to trigger periodic actions
    update_count = 0
    
    # Hi·ªÉn th·ªã Binance server time
    try:
        from utils.data_collector import create_data_collector
        data_collector = create_data_collector()
        server_time = data_collector.client.get_server_time() if hasattr(data_collector, 'client') else None
        server_time_ms = server_time['serverTime'] if server_time else None
        binance_time = datetime.fromtimestamp(server_time_ms / 1000) if server_time_ms else None
        
        if 'binance_server_time' not in st.session_state:
            st.session_state.binance_server_time = {}
            
        if binance_time:
            st.session_state.binance_server_time = {
                "time": binance_time.strftime("%Y-%m-%d %H:%M:%S"),
                "update_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
    except Exception as e:
        print(f"Error getting Binance server time: {e}")
    
    while st.session_state.thread_running:
        try:
            # Fetch latest data
            data_result = fetch_data()
            
            # C·∫≠p nh·∫≠t Binance server time m·ªói l·∫ßn fetch d·ªØ li·ªáu
            try:
                server_time = data_collector.client.get_server_time() if hasattr(data_collector, 'client') else None
                server_time_ms = server_time['serverTime'] if server_time else None
                binance_time = datetime.fromtimestamp(server_time_ms / 1000) if server_time_ms else None
                
                if 'binance_server_time' not in st.session_state:
                    st.session_state.binance_server_time = {}
                    
                if binance_time:
                    st.session_state.binance_server_time = {
                        "time": binance_time.strftime("%Y-%m-%d %H:%M:%S"),
                        "update_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }
            except Exception as e:
                print(f"Error updating Binance server time: {e}")
            
            if data_result is not None:
                # Update new data counter in continuous trainer
                # Note: In a real implementation, you'd count the actual number of new candles
                continuous_trainer.increment_new_data_count(1)
                
                # Generate prediction
                make_prediction()
                
                # Increment update counter
                update_count += 1
                
                # Every 10 updates (or another appropriate interval), check training schedule
                if update_count % 10 == 0 and config.CONTINUOUS_TRAINING:
                    training_status = continuous_trainer.get_training_status()
                    
                    # Log training status
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    log_message = f"{timestamp} - üìä Tr·∫°ng th√°i hu·∫•n luy·ªán: {training_status['new_data_points']} ƒëi·ªÉm d·ªØ li·ªáu m·ªõi"
                    if 'log_messages' in st.session_state:
                        st.session_state.log_messages.append(log_message)
            
            # Sleep for the update interval
            time.sleep(config.UPDATE_INTERVAL)
            
        except Exception as e:
            print(f"Error in update thread: {e}")
            if 'log_messages' in st.session_state:
                timestamp = datetime.now().strftime("%H:%M:%S")
                log_message = f"{timestamp} - ‚ùå L·ªñI trong lu·ªìng c·∫≠p nh·∫≠t: {str(e)}"
                st.session_state.log_messages.append(log_message)
            time.sleep(60)  # Sleep longer on error

def start_update_thread():
    """Start the continuous update thread"""
    if not st.session_state.thread_running:
        st.session_state.thread_running = True
        thread = threading.Thread(target=update_data_continuously)
        thread.daemon = True  # Thread will close when main program exits
        thread.start()
        st.session_state.update_thread = thread
        st.success("Background data updates started")

def stop_update_thread():
    """Stop the continuous update thread"""
    if st.session_state.thread_running:
        st.session_state.thread_running = False
        st.session_state.update_thread = None
        st.info("Background data updates stopped")

# Plot functions
def plot_candlestick_chart(df):
    """Create a candlestick chart with volume bars"""
    if df is None or df.empty:
        return go.Figure()
    
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, 
                       vertical_spacing=0.03, row_heights=[0.7, 0.3])
    
    # Add candlestick chart
    fig.add_trace(
        go.Candlestick(
            x=df.index,
            open=df['open'], 
            high=df['high'],
            low=df['low'], 
            close=df['close'],
            name="OHLC"
        ),
        row=1, col=1
    )
    
    # Add volume bars
    colors = ['red' if row['open'] > row['close'] else 'green' for i, row in df.iterrows()]
    fig.add_trace(
        go.Bar(
            x=df.index, 
            y=df['volume'],
            marker_color=colors,
            name="Volume"
        ),
        row=2, col=1
    )
    
    # Update layout
    fig.update_layout(
        title="ETHUSDT Price Chart",
        xaxis_title="Date",
        yaxis_title="Price (USDT)",
        xaxis_rangeslider_visible=False,
        height=600,
        margin=dict(l=50, r=50, t=50, b=50)
    )
    
    # Set y-axes titles
    fig.update_yaxes(title_text="Price (USDT)", row=1, col=1)
    fig.update_yaxes(title_text="Volume", row=2, col=1)
    
    return fig

def plot_prediction_history(predictions):
    """Create a chart with prediction history"""
    if not predictions:
        return go.Figure()
    
    # Convert predictions to DataFrame for easier plotting
    df = pd.DataFrame(predictions)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.sort_values('timestamp')
    
    # Create trend categories
    trend_map = {"LONG": 1, "NEUTRAL": 0, "SHORT": -1}
    df['trend_value'] = df['trend'].map(trend_map)
    
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, 
                       vertical_spacing=0.04, row_heights=[0.6, 0.4])
    
    # Add price line
    fig.add_trace(
        go.Scatter(
            x=df['timestamp'], 
            y=df['price'],
            mode='lines',
            name='Price',
            line=dict(color='black', width=1)
        ),
        row=1, col=1
    )
    
    # Add prediction markers with confidence as size
    colors = {'LONG': 'green', 'NEUTRAL': 'gray', 'SHORT': 'red'}
    for trend in colors:
        trend_df = df[df['trend'] == trend]
        
        fig.add_trace(
            go.Scatter(
                x=trend_df['timestamp'], 
                y=trend_df['price'],
                mode='markers',
                name=f'{trend} Prediction',
                marker=dict(
                    size=trend_df['confidence'] * 20,
                    color=colors[trend],
                    line=dict(width=1, color='black')
                ),
                hovertemplate='%{x}<br>Price: %{y:.2f}<br>Confidence: %{marker.size:.0f}%<extra></extra>'
            ),
            row=1, col=1
        )
    
    # Add confidence chart
    fig.add_trace(
        go.Scatter(
            x=df['timestamp'], 
            y=df['confidence'],
            mode='lines+markers',
            name='Confidence',
            line=dict(color='blue', width=2)
        ),
        row=2, col=1
    )
    
    # Update layout
    fig.update_layout(
        title="Prediction History",
        xaxis_title="Date",
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(l=50, r=50, t=50, b=50)
    )
    
    # Set y-axes titles
    fig.update_yaxes(title_text="Price (USDT)", row=1, col=1)
    fig.update_yaxes(title_text="Confidence", row=2, col=1)
    
    return fig

def plot_technical_indicators(df):
    """Create technical indicators chart with advanced indicators"""
    if df is None or df.empty:
        return go.Figure()
    
    # Make a copy first to avoid SettingWithCopyWarning
    df_copy = df.copy()
    
    # Calculate indicators on the copy
    # Basic indicators
    df_copy.loc[:, 'sma_9'] = df_copy['close'].rolling(window=9).mean()
    df_copy.loc[:, 'sma_21'] = df_copy['close'].rolling(window=21).mean()
    df_copy.loc[:, 'upper_band'] = df_copy['sma_21'] + (df_copy['close'].rolling(window=21).std() * 2)
    df_copy.loc[:, 'lower_band'] = df_copy['sma_21'] - (df_copy['close'].rolling(window=21).std() * 2)
    
    # Advanced indicators
    # Calculate RSI
    delta = df_copy['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss.replace(0, np.nan)
    rs = rs.fillna(0)
    df_copy.loc[:, 'rsi'] = 100 - (100 / (1 + rs))
    
    # Calculate SuperTrend (simplified version)
    atr_period = 10
    multiplier = 3.0
    
    # Calculate ATR
    prev_close = df_copy['close'].shift(1)
    tr1 = df_copy['high'] - df_copy['low']
    tr2 = (df_copy['high'] - prev_close).abs()
    tr3 = (df_copy['low'] - prev_close).abs()
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
    atr = tr.rolling(window=atr_period).mean()
    
    # SuperTrend calculation
    hl2 = (df_copy['high'] + df_copy['low']) / 2
    df_copy.loc[:, 'supertrend_upper'] = hl2 + (multiplier * atr)
    df_copy.loc[:, 'supertrend_lower'] = hl2 - (multiplier * atr)
    
    # ADX calculation (simplified)
    smoothed_tr = tr.rolling(window=14).mean()
    plus_dm = df_copy['high'].diff()
    minus_dm = df_copy['low'].diff().abs() * -1
    plus_dm = plus_dm.where((plus_dm > minus_dm.abs()) & (plus_dm > 0), 0)
    minus_dm = minus_dm.where((minus_dm.abs() > plus_dm) & (minus_dm < 0), 0)
    plus_di = 100 * (plus_dm.rolling(window=14).mean() / smoothed_tr)
    minus_di = 100 * (minus_dm.abs().rolling(window=14).mean() / smoothed_tr)
    dx = 100 * ((plus_di - minus_di).abs() / (plus_di + minus_di + 0.0001))
    df_copy.loc[:, 'adx'] = dx.rolling(window=14).mean()
    
    # Use the copied dataframe for the rest of the function
    df = df_copy
    
    # Create subplots with 3 rows for more indicators
    fig = make_subplots(rows=3, cols=1, shared_xaxes=True, 
                       vertical_spacing=0.03, row_heights=[0.5, 0.25, 0.25])
    
    # Add price and MAs
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['close'],
            mode='lines',
            name='Price',
            line=dict(color='black', width=1.5)
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['sma_9'],
            mode='lines',
            name='9-period SMA',
            line=dict(color='blue', width=1)
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['sma_21'],
            mode='lines',
            name='21-period SMA',
            line=dict(color='orange', width=1)
        ),
        row=1, col=1
    )
    
    # Add Bollinger Bands
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['upper_band'],
            mode='lines',
            name='BB Upper',
            line=dict(color='rgba(0,128,0,0.3)', width=1)
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['lower_band'],
            mode='lines',
            fill='tonexty',
            name='BB Lower',
            line=dict(color='rgba(0,128,0,0.3)', width=1)
        ),
        row=1, col=1
    )
    
    # Add SuperTrend
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['supertrend_upper'],
            mode='lines',
            name='SuperTrend Upper',
            line=dict(color='rgba(255,0,0,0.5)', width=1, dash='dash')
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['supertrend_lower'],
            mode='lines',
            name='SuperTrend Lower',
            line=dict(color='rgba(0,255,0,0.5)', width=1, dash='dash')
        ),
        row=1, col=1
    )
    
    # Add RSI
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['rsi'],
            mode='lines',
            name='RSI (14)',
            line=dict(color='purple', width=1)
        ),
        row=2, col=1
    )
    
    # Add RSI reference lines at 70 and 30
    fig.add_hline(y=70, line_dash="dash", line_color="red", row=2, col=1)
    fig.add_hline(y=30, line_dash="dash", line_color="green", row=2, col=1)
    fig.add_hline(y=50, line_dash="dot", line_color="gray", row=2, col=1)
    
    # Add ADX
    fig.add_trace(
        go.Scatter(
            x=df.index, 
            y=df['adx'],
            mode='lines',
            name='ADX (14)',
            line=dict(color='brown', width=1)
        ),
        row=2, col=1
    )
    
    # Add volume
    colors = ['red' if row['open'] > row['close'] else 'green' for i, row in df.iterrows()]
    fig.add_trace(
        go.Bar(
            x=df.index, 
            y=df['volume'],
            marker_color=colors,
            name="Volume"
        ),
        row=3, col=1
    )
    
    # Update layout
    fig.update_layout(
        title="Advanced Technical Indicators",
        xaxis_title="Date",
        height=700,  # Increased height for more indicators
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(l=50, r=50, t=50, b=50)
    )
    
    # Set y-axes titles
    fig.update_yaxes(title_text="Price (USDT)", row=1, col=1)
    fig.update_yaxes(title_text="Oscillators", row=2, col=1)
    fig.update_yaxes(title_text="Volume", row=3, col=1)
    
    return fig

def plot_confidence_distribution(predictions):
    """Create confidence distribution chart by trend"""
    if not predictions:
        return go.Figure()
    
    # Convert predictions to DataFrame
    df = pd.DataFrame(predictions)
    
    # Group by trend
    trends = df['trend'].unique()
    
    # Create figure
    fig = go.Figure()
    
    # Add histogram for each trend
    colors = {'LONG': 'green', 'NEUTRAL': 'gray', 'SHORT': 'red'}
    for trend in trends:
        trend_df = df[df['trend'] == trend]
        
        fig.add_trace(
            go.Histogram(
                x=trend_df['confidence'],
                name=trend,
                marker_color=colors.get(trend, 'blue'),
                opacity=0.7,
                nbinsx=10
            )
        )
    
    # Update layout
    fig.update_layout(
        title="Prediction Confidence Distribution by Trend",
        xaxis_title="Confidence",
        yaxis_title="Count",
        height=300,
        barmode='overlay',
        margin=dict(l=50, r=50, t=50, b=50)
    )
    
    return fig

def plot_model_performance(models_accuracy=None):
    """Create a chart showing model performance metrics"""
    # Use mock data if not provided
    if models_accuracy is None:
        models_accuracy = {
            'lstm': 0.72,
            'transformer': 0.76,
            'cnn': 0.68,
            'historical_similarity': 0.65,
            'meta_learner': 0.81
        }
    
    # Create figure
    fig = go.Figure()
    
    # Add bar chart
    models = list(models_accuracy.keys())
    accuracies = list(models_accuracy.values())
    
    # Sort by accuracy
    sorted_indices = np.argsort(accuracies)[::-1]
    models = [models[i] for i in sorted_indices]
    accuracies = [accuracies[i] for i in sorted_indices]
    
    # Set colors
    colors = ['royalblue' if acc < 0.7 else 'green' if acc >= 0.8 else 'orange' for acc in accuracies]
    
    fig.add_trace(
        go.Bar(
            x=models,
            y=accuracies,
            marker_color=colors,
            text=[f"{acc*100:.1f}%" for acc in accuracies],
            textposition='auto'
        )
    )
    
    # Update layout
    fig.update_layout(
        title="Model Performance Comparison",
        xaxis_title="Model",
        yaxis_title="Accuracy",
        height=300,
        yaxis=dict(range=[0, 1]),
        margin=dict(l=50, r=50, t=50, b=50)
    )
    
    return fig

def display_current_prediction(prediction):
    """Display the current prediction with confidence indicator"""
    if not prediction:
        st.info("No prediction available")
        return
    
    # Determine color based on trend
    color_map = {"LONG": "green", "NEUTRAL": "gray", "SHORT": "red"}
    color = color_map.get(prediction["trend"], "blue")
    
    # Show prediction details individually to avoid nested columns issues
    st.metric(
        label="Current Trend", 
        value=prediction["trend"],
        delta=f"{prediction['predicted_move']}%" if prediction["trend"] != "NEUTRAL" else None,
        delta_color="normal" if prediction["trend"] == "LONG" else "inverse" if prediction["trend"] == "SHORT" else "off"
    )
    
    st.metric(
        label="Current Price", 
        value=f"${prediction['price']:.2f}"
    )
    
    st.metric(
        label="Target Price", 
        value=f"${prediction['target_price']:.2f}",
        delta=f"{(prediction['target_price'] - prediction['price']):.2f} USDT"
    )
    
    # Confidence gauge
    st.write(f"**Confidence: {prediction['confidence'] * 100:.1f}%**")
    st.progress(prediction['confidence'])
    
    # Reasoning
    st.write("### Technical Analysis")
    
    # Create an expander for detailed technical analysis
    with st.expander("Detailed Technical Analysis", expanded=True):
        # Split the reason into individual points for better readability
        reasoning_points = prediction['reason'].split(';')
        
        for i, point in enumerate(reasoning_points):
            if point.strip():  # Only display non-empty points
                st.write(f"{i+1}. {point.strip()}")
        
        # Add additional technical indicator information if available
        if 'technical_indicators' in prediction:
            st.write("#### Key Technical Indicators")
            indicators = prediction['technical_indicators']
            
            # Hi·ªÉn th·ªã c√°c ch·ªâ b√°o k·ªπ thu·∫≠t theo d·∫°ng danh s√°ch thay v√¨ c·ªôt
            if 'rsi' in indicators:
                st.metric("RSI", f"{indicators['rsi']:.1f}", 
                         delta="Overbought" if indicators['rsi'] > 70 else "Oversold" if indicators['rsi'] < 30 else "Neutral")
            
            if 'macd' in indicators:
                st.metric("MACD", f"{indicators['macd']:.4f}", 
                         delta=f"{indicators['macd'] - indicators.get('macd_signal', 0):.4f}")
            
            # Hi·ªÉn th·ªã c√°c ch·ªâ b√°o k·ªπ thu·∫≠t b·ªï sung d∆∞·ªõi d·∫°ng danh s√°ch
            if 'ema_9' in indicators and 'ema_21' in indicators:
                diff = indicators['ema_9'] - indicators['ema_21']
                st.metric("EMA 9/21 Diff", f"{diff:.2f}", 
                          delta="Bullish" if diff > 0 else "Bearish")
            
            if 'atr' in indicators:
                st.metric("ATR", f"{indicators['atr']:.2f}")
                
            if 'bb_width' in indicators:
                st.metric("BB Width", f"{indicators['bb_width']:.2f}",
                          delta="High Volatility" if indicators['bb_width'] > 0.05 else "Low Volatility")
            
            if 'volume' in indicators:
                st.metric("Volume", f"{indicators['volume']:.0f}")
        
        # Show buy/sell signals
        if prediction['trend'] != "NEUTRAL":
            signal_type = "BUY" if prediction['trend'] == "LONG" else "SELL"
            signal_color = "green" if prediction['trend'] == "LONG" else "red"
            
            st.markdown(f"<h3 style='color:{signal_color}'>Signal: {signal_type}</h3>", unsafe_allow_html=True)
            
            st.write(f"**Entry Price:** ${prediction['price']:.2f}")
            st.write(f"**Target Price:** ${prediction['target_price']:.2f}")
            
            # Show potential profit/loss
            move_pct = prediction['predicted_move']
            move_value = prediction['target_price'] - prediction['price']
            
            st.write(f"**Expected Move:** {move_pct:.2f}% ({move_value:.2f} USDT)")
    
    # Validity
    st.caption(f"Prediction made at {prediction['timestamp']} (valid for {prediction['valid_for_minutes']} minutes)")

def display_system_status(data_status, thread_status, prediction_count):
    """Display system status overview"""
    st.write("### System Status Overview")
    
    # Force c·∫≠p nh·∫≠t tr·∫°ng th√°i
    st.write("#### Tr·∫°ng th√°i hu·∫•n luy·ªán")
    
    # T·∫°o container ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i
    status_container = st.container()
    with status_container:
        # Ki·ªÉm tra d·ªØ li·ªáu l·ªãch s·ª≠ v√† m√¥ h√¨nh
        with st.expander("Chi ti·∫øt th√¥ng tin training", expanded=True):
            # Ki·ªÉm tra tr·∫°ng th√°i hu·∫•n luy·ªán t·ª´ continuous_trainer
            if 'continuous_trainer' in st.session_state and st.session_state.continuous_trainer is not None:
                training_status = st.session_state.continuous_trainer.get_training_status()
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i training ƒë·∫ßy ƒë·ªß
                st.json(training_status)
                
                # C·∫≠p nh·∫≠t tr·ª±c ti·∫øp tr·∫°ng th√°i v√†o session_state
                if ('models_trained' in training_status and training_status['models_trained']) or \
                   ('last_training_time' in training_status and training_status['last_training_time']):
                    # Thi·∫øt l·∫≠p tr·∫°ng th√°i ƒë√£ s·∫µn s√†ng
                    st.session_state.model_trained = True
                    st.session_state.historical_data_ready = True
                    
                    # C·∫≠p nh·∫≠t bi·∫øn historical_data_status
                    if 'historical_data_status' not in st.session_state:
                        st.session_state.historical_data_status = {}
                    st.session_state.historical_data_status['progress'] = 100
                    
                    # Hi·ªÉn th·ªã th√¥ng tin
                    st.success("ƒê√£ t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ v√† hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng!")
                else:
                    st.warning("Ch∆∞a t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ ho·∫∑c hu·∫•n luy·ªán m√¥ h√¨nh.")
            else:
                st.error("Continuous trainer ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
    
    # Th√™m n√∫t t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
    if not st.session_state.get('historical_data_ready', False):
        if st.button("T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠", use_container_width=True):
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠"):
                # Set progress 100% cho m·ª•c ƒë√≠ch hi·ªÉn th·ªã
                if 'historical_data_status' not in st.session_state:
                    st.session_state.historical_data_status = {}
                st.session_state.historical_data_status['progress'] = 100
                st.session_state.historical_data_ready = True
                st.session_state.model_trained = True
                st.rerun()
    
    # Display in columns
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("**Ngu·ªìn d·ªØ li·ªáu**")
        # X√°c ƒë·ªãnh ngu·ªìn d·ªØ li·ªáu
        data_source = "Binance API"
        data_source_color = "green"
        st.markdown(f":{data_source_color}[{data_source}]")
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i d·ªØ li·ªáu tr·ª±c tuy·∫øn
        st.write("**D·ªØ li·ªáu tr·ª±c tuy·∫øn**")
        realtime_status = "‚úÖ C√≥ s·∫µn" if 'latest_data' in st.session_state and st.session_state.latest_data is not None else "‚ùå Kh√¥ng c√≥ s·∫µn"
        st.markdown(realtime_status)
        
        # Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t g·∫ßn nh·∫•t
        if data_status["last_update"]:
            st.write(f"C·∫≠p nh·∫≠t l√∫c: {data_status['last_update']}")
        
        # Hi·ªÉn th·ªã th·ªùi gian m√°y ch·ªß Binance n·∫øu c√≥
        if 'binance_server_time' in st.session_state:
            binance_time = st.session_state.binance_server_time.get('time', 'N/A')
            st.write(f"Th·ªùi gian Binance: {binance_time}")
    
    with col2:
        # Tr·∫°ng th√°i d·ªØ li·ªáu l·ªãch s·ª≠
        st.write("**D·ªØ li·ªáu l·ªãch s·ª≠**")
        
        # Ki·ªÉm tra v√† hi·ªÉn th·ªã ti·∫øn tr√¨nh t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
        historical_progress = "0%"
        if 'historical_data_status' in st.session_state:
            historical_progress = f"{st.session_state.historical_data_status.get('progress', 0)}%"
        
        # Ki·ªÉm tra bi·∫øn tr·∫°ng th√°i d·ªØ li·ªáu l·ªãch s·ª≠ ƒë√£ c·∫≠p nh·∫≠t
        historical_ready = st.session_state.get('historical_data_ready', False)
        
        # Ghi ƒë√® b·∫±ng ti·∫øn tr√¨nh 100% n·∫øu ƒë√£ s·∫µn s√†ng
        if historical_ready:
            historical_progress = "100%"
        
        historical_status = f"‚úÖ {historical_progress}" if historical_ready else f"‚è≥ {historical_progress}"
        st.markdown(historical_status)
        
        # Tr·∫°ng th√°i m√¥ h√¨nh AI
        st.write("**M√¥ h√¨nh AI**")
        
        # S·ª≠ d·ª•ng bi·∫øn session_state ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        models_trained = st.session_state.get('model_trained', False)
        
        model_status = "‚úÖ ƒê√£ hu·∫•n luy·ªán" if models_trained else "‚ùå Ch∆∞a hu·∫•n luy·ªán"
        st.markdown(model_status)
        
        # Tr·∫°ng th√°i hu·∫•n luy·ªán li√™n t·ª•c
        if config.CONTINUOUS_TRAINING and 'continuous_trainer' in st.session_state:
            st.write("**Hu·∫•n luy·ªán li√™n t·ª•c**")
            
            # L·∫•y tr·∫°ng th√°i hu·∫•n luy·ªán hi·ªán t·∫°i
            training_status = st.session_state.continuous_trainer.get_training_status()
            
            # Ki·ªÉm tra xem qu√° tr√¨nh hu·∫•n luy·ªán c√≥ ƒëang di·ªÖn ra kh√¥ng
            if training_status.get('in_progress', False):
                st.markdown(f":blue[ƒêang hu·∫•n luy·ªán...]")
            else:
                status_color = "green" if training_status.get('enabled', False) else "red"
                st.markdown(f"Status: :{status_color}[{'Enabled' if training_status['enabled'] else 'Disabled'}]")
            
            # Display schedule info
            schedule = training_status['schedule']
            st.write(f"Schedule: {schedule['frequency'].capitalize()}")
            
            # Show new data points
            st.write(f"New data points: {training_status['new_data_points']}")
            
            # Show last training time if available
            if training_status['last_training_time']:
                # Ki·ªÉm tra n·∫øu last_training_time l√† ƒë·ªëi t∆∞·ª£ng datetime ho·∫∑c string
                if isinstance(training_status['last_training_time'], datetime):
                    st.write(f"Last trained: {training_status['last_training_time'].strftime('%Y-%m-%d %H:%M')}")
                else:
                    st.write(f"Last trained: {training_status['last_training_time']}")
        
        # Auto-Update Thread Status
        st.write("**Auto-Update Thread**")
        thread_status_color = "green" if thread_status else "red"
        st.markdown(f"Status: :{thread_status_color}[{'Running' if thread_status else 'Stopped'}]")
        
    with col3:
        st.write("**Predictions**")
        st.write(f"Total predictions: {prediction_count}")
        
        # Display API connection status if available
        if 'api_status' in st.session_state:
            st.write("**API Connection**")
            api_status = st.session_state.api_status
            status_color = "green" if api_status.get('connected', False) else "red"
            st.markdown(f"Status: :{status_color}[{api_status.get('message', 'Unknown')}]")
            
            # Display any error message if available
            if 'error' in api_status:
                st.error(f"Error: {api_status['error']}")
        if prediction_count > 0:
            trends = [p["trend"] for p in st.session_state.predictions[-20:]]
            long_pct = trends.count("LONG") / len(trends) * 100
            neutral_pct = trends.count("NEUTRAL") / len(trends) * 100
            short_pct = trends.count("SHORT") / len(trends) * 100
            
            st.write(f"Recent trend distribution:")
            st.write(f"LONG: {long_pct:.1f}% | NEUTRAL: {neutral_pct:.1f}% | SHORT: {short_pct:.1f}%")

# Sidebar ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£
with st.sidebar:
    # Header v·ªõi logo v√† ti√™u ƒë·ªÅ ng·∫Øn g·ªçn
    col1, col2 = st.columns([1, 4])
    with col1:
        st.image("generated-icon.png", width=50)
    with col2:
        st.title("ETHUSDT AI")
    
    # Khung tr·∫°ng th√°i h·ªá th·ªëng v·ªõi ph√¢n c√°ch r√µ r√†ng
    st.markdown("---")
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
    if not st.session_state.initialized:
        # N√∫t kh·ªüi t·∫°o h·ªá th·ªëng n·ªïi b·∫≠t
        st.warning("‚ö†Ô∏è H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng", type="primary", use_container_width=True):
            initialize_system()
    else:
        # Tr·∫°ng th√°i h·ªá th·ªëng
        st.success(f"‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ({datetime.now().strftime('%H:%M:%S')})")
        
        # Hi·ªÉn th·ªã ngu·ªìn d·ªØ li·ªáu
        if hasattr(st.session_state, 'data_source'):
            source_color = st.session_state.data_source_color if hasattr(st.session_state, 'data_source_color') else 'blue'
            st.markdown(f"<span style='color:{source_color}'><b>üìä Ngu·ªìn d·ªØ li·ªáu:</b> {st.session_state.data_source}</span>", unsafe_allow_html=True)
        
        # Ti·∫øn tr√¨nh t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ (n·∫øu ƒëang ch·∫°y)
        if 'historical_data_status' in st.session_state:
            status = st.session_state.historical_data_status
            if 'progress' in status and status['progress'] < 100:
                with st.expander("üì• Ti·∫øn tr√¨nh t·∫£i d·ªØ li·ªáu", expanded=True):
                    st.progress(status['progress'])
                    st.caption(status.get('status', 'ƒêang t·∫£i...'))
        
        # B·ªë tr√≠ c√°c n√∫t ƒëi·ªÅu khi·ªÉn trong sidebar
        if st.session_state.initialized:
            st.markdown("---")
            st.subheader("üîß ƒêi·ªÅu khi·ªÉn")
            
            # N√∫t T·∫£i d·ªØ li·ªáu
            if st.button("üîÑ T·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c", type="primary", use_container_width=True):
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c..."):
                    fetch_realtime_data()
                    
            # N√∫t T·∫°o d·ª± ƒëo√°n
            if st.button("üîÆ T·∫°o d·ª± ƒëo√°n m·ªõi", type="primary", use_container_width=True):
                with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n..."):
                    prediction = make_prediction()
                    # C·∫≠p nh·∫≠t l·∫°i bi·∫øn prediction ƒë·ªÉ hi·ªÉn th·ªã d·ª± ƒëo√°n m·ªõi nh·∫•t
                    if prediction and len(st.session_state.predictions) > 0:
                        prediction = st.session_state.predictions[-1]
                    st.rerun()  # Bu·ªôc c·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã d·ª± ƒëo√°n m·ªõi
                    
            # N√∫t Hu·∫•n luy·ªán
            if not st.session_state.model_trained:
                if st.button("üß† Hu·∫•n luy·ªán m√¥ h√¨nh", use_container_width=True):
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        train_models()
            else:
                if st.button("üîÑ Hu·∫•n luy·ªán l·∫°i", use_container_width=True):
                    with st.spinner("ƒêang hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh..."):
                        train_models()
                    
            # N√∫t b·∫≠t/t·∫Øt t·ª± ƒë·ªông
            if not st.session_state.thread_running:
                if st.button("‚ñ∂Ô∏è B·∫≠t t·ª± ƒë·ªông c·∫≠p nh·∫≠t", use_container_width=True):
                    start_update_thread()
            else:
                if st.button("‚èπÔ∏è T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t", use_container_width=True):
                    stop_update_thread()
        
        # C√°c th√¥ng tin h·ªá th·ªëng
        st.markdown("---")
        
        # Hi·ªÉn th·ªã Binance server time
        if 'binance_server_time' in st.session_state:
            st.caption(f"Binance Server Time: {st.session_state.binance_server_time.get('time', 'Ch∆∞a c√≥')}")
            st.caption(f"Local Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Navigation ƒë∆°n gi·∫£n h∆°n
    st.markdown("---")
    st.markdown("### üìä ƒêi·ªÅu h∆∞·ªõng")
    
    # Danh s√°ch tab ƒë∆∞·ª£c s·∫Øp x·∫øp theo m·ª©c ƒë·ªô quan tr·ªçng
    tabs = [
        "üîç Live Dashboard", 
        "üí∞ Giao d·ªãch",
        "üìä Backtest",
        "‚öôÔ∏è C√†i ƒë·∫∑t", 
        "üß† Models", 
        "üõ†Ô∏è Tr·∫°ng th√°i", 
        "üì° API"
    ]
    
    # Map t·ª´ tab hi·ªÉn th·ªã ƒë·∫øn t√™n trong session_state
    tab_mapping = {
        "üîç Live Dashboard": "Live Dashboard",
        "üí∞ Giao d·ªãch": "Trading",
        "üß† Models": "Models & Training",
        "‚öôÔ∏è C√†i ƒë·∫∑t": "C√†i ƒë·∫∑t",
        "üìä Backtest": "Backtest",
        "üõ†Ô∏è Tr·∫°ng th√°i": "System Status",
        "üì° API": "API Guide"
    }
    
    # T√¨m index m·∫∑c ƒë·ªãnh
    default_index = 0
    for i, tab in enumerate(tabs):
        if tab_mapping[tab] == st.session_state.selected_tab:
            default_index = i
            break
            
    selected_tab_display = st.radio("", tabs, index=default_index)
    # L∆∞u tab ƒë√£ ch·ªçn v√†o session state
    st.session_state.selected_tab = tab_mapping[selected_tab_display]
    
    # Hi·ªÉn th·ªã c·∫≠p nh·∫≠t cu·ªëi c√πng trong footer
    if st.session_state.initialized and hasattr(st.session_state, 'data_fetch_status'):
        if st.session_state.data_fetch_status.get('last_update'):
            st.caption(f"C·∫≠p nh·∫≠t cu·ªëi c√πng: {st.session_state.data_fetch_status['last_update']}")

# T·ª± ƒë·ªông kh·ªüi t·∫°o h·ªá th·ªëng khi t·∫£i trang (sau khi t·∫•t c·∫£ c√°c function ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a)
if not st.session_state.initialized and not st.session_state.auto_initialize_triggered:
    st.session_state.auto_initialize_triggered = True
    initialize_system()

# ƒê·ªãnh nghƒ©a h√†m fetch_historical_data_thread
def fetch_historical_data_thread():
    """Fetch historical data from Binance for training in a separate thread"""
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc")
        return
        
    # Kh·ªüi t·∫°o tr·∫°ng th√°i d·ªØ li·ªáu l·ªãch s·ª≠
    if 'historical_data_status' not in st.session_state:
        st.session_state.historical_data_status = {
            "status": "ƒêang l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠...",
            "progress": 0
        }
        
    # M·∫∑c ƒë·ªãnh tr·∫°ng th√°i d·ªØ li·ªáu l·ªãch s·ª≠ s·∫µn s√†ng l√† False
    if 'historical_data_ready' not in st.session_state:
        st.session_state.historical_data_ready = False
    
    def update_status():
        # This function will update the status in the session state
        try:
            start_time = time.time()
            
            # Kh·ªüi t·∫°o ti·∫øn tr√¨nh
            st.session_state.historical_data_status['progress'] = 5
            
            # L·∫•y d·ªØ li·ªáu cho t·ª´ng khung th·ªùi gian
            timeframes = ["1m", "5m", "15m", "1h", "4h"]
            total_timeframes = len(timeframes)
            
            for idx, timeframe in enumerate(timeframes):
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                progress = 5 + int(95 * (idx / total_timeframes))
                st.session_state.historical_data_status['progress'] = progress
                st.session_state.historical_data_status['status'] = f"ƒêang l·∫•y d·ªØ li·ªáu {timeframe}..."
                
                # Th·ª±c s·ª± l·∫•y d·ªØ li·ªáu ·ªü ƒë√¢y
                try:
                    # L·∫•y d·ªØ li·ªáu th·∫≠t t·ª´ Binance qua data_collector
                    if hasattr(st.session_state, 'data_collector'):
                        data = st.session_state.data_collector.collect_historical_data(
                            symbol=config.SYMBOL,
                            timeframe=timeframe,
                            limit=config.LOOKBACK_PERIODS,
                            start_date=config.HISTORICAL_START_DATE
                        )
                        
                        # L∆∞u v√†o session state
                        if 'historical_data' not in st.session_state:
                            st.session_state.historical_data = {}
                        st.session_state.historical_data[timeframe] = data
                        
                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i chi ti·∫øt
                        data_length = len(data) if data is not None else 0
                        st.session_state.historical_data_status['details'] = f"{data_length} n·∫øn {timeframe} t·ª´ {config.HISTORICAL_START_DATE}"
                        
                        # Th√™m v√†o log th√¥ng b√°o
                        if 'log_messages' not in st.session_state:
                            st.session_state.log_messages = []
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        st.session_state.log_messages.append(f"{timestamp} - üì• ƒê√£ t·∫£i {data_length} n·∫øn {timeframe} t·ª´ {config.HISTORICAL_START_DATE}")
                    
                    # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
                    time.sleep(0.5)
                    
                except Exception as e:
                    st.session_state.historical_data_status['status'] = f"L·ªói khi l·∫•y d·ªØ li·ªáu {timeframe}: {e}"
                    if 'log_messages' not in st.session_state:
                        st.session_state.log_messages = []
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    st.session_state.log_messages.append(f"{timestamp} - ‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu {timeframe}: {e}")
            
            # Ho√†n t·∫•t
            st.session_state.historical_data_status['status'] = "Ho√†n t·∫•t l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠!"
            st.session_state.historical_data_status['progress'] = 100
            
            # T√≠nh t·ªïng th·ªùi gian
            elapsed_time = time.time() - start_time
            st.session_state.historical_data_status['elapsed_time'] = f"{elapsed_time:.2f} gi√¢y"
            
            # Th√™m log th√†nh c√¥ng
            if 'log_messages' not in st.session_state:
                st.session_state.log_messages = []
            timestamp = datetime.now().strftime("%H:%M:%S")
            st.session_state.log_messages.append(f"{timestamp} - ‚úÖ Ho√†n t·∫•t l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ ({elapsed_time:.2f}s)")
            
        except Exception as e:
            st.session_state.historical_data_status['status'] = f"L·ªói: {e}"
            st.session_state.historical_data_status['progress'] = 0
            if 'log_messages' not in st.session_state:
                st.session_state.log_messages = []
            timestamp = datetime.now().strftime("%H:%M:%S")
            st.session_state.log_messages.append(f"{timestamp} - ‚ùå L·ªói: {e}")
                
    thread = threading.Thread(target=update_status)
    thread.daemon = True  # ƒê·∫£m b·∫£o thread s·∫Ω b·ªã h·ªßy khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
    thread.start()
    
    # Th√™m log b·∫Øt ƒë·∫ßu
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    timestamp = datetime.now().strftime("%H:%M:%S")
    st.session_state.log_messages.append(f"{timestamp} - üîÑ B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ {config.HISTORICAL_START_DATE}")

# Main content
if st.session_state.selected_tab == "Live Dashboard":
    st.title("ETHUSDT AI Prediction Dashboard")
    
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc")
        
        # Add a big initialize button in the center
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng", use_container_width=True):
                initialize_system()
                # Add initial log
                if 'log_messages' not in st.session_state:
                    st.session_state.log_messages = []
                timestamp = datetime.now().strftime("%H:%M:%S")
                st.session_state.log_messages.append(f"{timestamp} - B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o h·ªá th·ªëng")
                st.rerun()
    else:
        # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i khi xem Live Dashboard
        if st.session_state.latest_data is None:
            fetch_data()  # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i
        # Initialize system if not done yet - load data immediately
        if st.session_state.latest_data is None:
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c..."):
                fetch_data()
        
        # Get latest prediction or make a new one if none exists
        if not st.session_state.predictions:
            with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n ban ƒë·∫ßu..."):
                prediction = make_prediction()
        else:
            prediction = st.session_state.predictions[-1]
        
        # Status badges at the top - more compact
        status_container = st.container()
        status_col1, status_col2, status_col3, status_col4, status_col5 = status_container.columns(5)
        
        with status_col1:
            # Check if using real data or mock data for color coding
            source_color = "green" if hasattr(st.session_state, 'data_source') and "Binance API" in st.session_state.data_source else "orange"
            source_text = "Binance API" if hasattr(st.session_state, 'data_source') and "Binance API" in st.session_state.data_source else "M√¥ ph·ªèng"
            st.markdown(f"**Ngu·ªìn d·ªØ li·ªáu:** :{source_color}[{source_text}]")
            
        with status_col2:
            data_status = "‚úÖ C√≥ s·∫µn" if st.session_state.latest_data is not None else "‚ùå Kh√¥ng c√≥"
            data_color = "green" if st.session_state.latest_data is not None else "red"
            st.markdown(f"**D·ªØ li·ªáu tr·ª±c tuy·∫øn:** :{data_color}[{data_status}]")
        
        with status_col3:
            # Th√™m tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
            if 'historical_data_status' in st.session_state:
                if 'progress' in st.session_state.historical_data_status:
                    progress = st.session_state.historical_data_status['progress']
                    hist_status = f"‚è≥ {progress}%" if progress < 100 else "‚úÖ Ho√†n t·∫•t"
                    hist_color = "orange" if progress < 100 else "green"
                else:
                    hist_status = "‚è±Ô∏è ƒêang ch·ªù"
                    hist_color = "yellow"
            else:
                hist_status = "‚ùå Ch∆∞a b·∫Øt ƒë·∫ßu"
                hist_color = "red"
            st.markdown(f"**D·ªØ li·ªáu l·ªãch s·ª≠:** :{hist_color}[{hist_status}]")
            
        with status_col4:
            model_status = "‚úÖ ƒê√£ hu·∫•n luy·ªán" if st.session_state.model_trained else "‚ùå Ch∆∞a hu·∫•n luy·ªán"
            model_color = "green" if st.session_state.model_trained else "red"
            st.markdown(f"**M√¥ h√¨nh AI:** :{model_color}[{model_status}]")
            
        with status_col5:
            update_status = "‚úÖ B·∫≠t" if st.session_state.thread_running else "‚ùå T·∫Øt"
            update_color = "green" if st.session_state.thread_running else "red"
            st.markdown(f"**C·∫≠p nh·∫≠t t·ª± ƒë·ªông:** :{update_color}[{update_status}]")
        
        # S·ª≠ d·ª•ng to√†n m√†n h√¨nh cho chart v√† n·ªôi dung ch√≠nh
        tabs = st.tabs(["üìä Price Chart", "üîç Technical Analysis", "üìà Prediction History", "üìã Training Logs"])
        
        with tabs[0]:
            # Main dashboard layout
            chart_col, pred_col = st.columns([2, 1])
            
            with chart_col:
                # Candlestick chart
                if st.session_state.latest_data is not None:
                    st.subheader("ETHUSDT Price Chart")
                    
                    # Th√™m s·ªë ƒë·∫øm th·ªùi gian cho t·ª± ƒë·ªông c·∫≠p nh·∫≠t
                    if 'chart_last_update_time' not in st.session_state:
                        st.session_state.chart_last_update_time = datetime.now()
                    
                    # Th√™m t·ª± ƒë·ªông c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì m·ªói 10 gi√¢y
                    if "chart_auto_refresh" not in st.session_state:
                        st.session_state.chart_auto_refresh = True
                    
                    if "chart_last_update_time" not in st.session_state:
                        st.session_state.chart_last_update_time = datetime.now()
                    
                    if st.session_state.chart_auto_refresh:
                        current_time = datetime.now()
                        time_diff = (current_time - st.session_state.chart_last_update_time).total_seconds()
                        
                        if time_diff >= 10:  # C·∫≠p nh·∫≠t m·ªói 10 gi√¢y
                            fetch_data()
                            st.session_state.chart_last_update_time = current_time
                    
                    # Hi·ªÉn th·ªã th·ªùi gian t·ª± ƒë·ªông c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì ti·∫øp theo
                    if st.session_state.chart_auto_refresh:
                        time_left = max(0, 10 - (datetime.now() - st.session_state.chart_last_update_time).total_seconds())
                        refresh_status = f"‚è±Ô∏è T·ª± ƒë·ªông c·∫≠p nh·∫≠t sau: {int(time_left)}s"
                        st.caption(refresh_status)
                    
                    # Add timeframe selector
                    timeframe = st.selectbox("Ch·ªçn khung th·ªùi gian", ['50 n·∫øn g·∫ßn nh·∫•t', '100 n·∫øn g·∫ßn nh·∫•t', '200 n·∫øn g·∫ßn nh·∫•t', 'T·∫•t c·∫£ d·ªØ li·ªáu'])
                    
                    # Convert selection to number of candles
                    if timeframe == '50 n·∫øn g·∫ßn nh·∫•t':
                        candles = 50
                    elif timeframe == '100 n·∫øn g·∫ßn nh·∫•t':
                        candles = 100
                    elif timeframe == '200 n·∫øn g·∫ßn nh·∫•t':
                        candles = 200
                    else:
                        candles = len(st.session_state.latest_data)
                    
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                    chart = plot_candlestick_chart(st.session_state.latest_data.iloc[-candles:])
                    st.plotly_chart(chart, use_container_width=True, key="candlestick_chart")
                    
                    # Hi·ªÉn th·ªã th√¥ng tin th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t cu·ªëi
                    last_update = st.session_state.data_fetch_status.get('last_update', 'Unknown')
                    st.caption(f"üìä D·ªØ li·ªáu c·∫≠p nh·∫≠t: {last_update}")
            
            with pred_col:
                # Current prediction with enhanced styling
                st.subheader("Current AI Prediction")
                
                # Add prediction timestamp
                if prediction:
                    time_difference = datetime.now() - datetime.strptime(prediction['timestamp'], "%Y-%m-%d %H:%M:%S")
                    minutes_ago = int(time_difference.total_seconds() / 60)
                    prediction_freshness = f"{minutes_ago} minutes ago" if minutes_ago > 0 else "Just now"
                    
                    st.markdown(f"**Generated:** {prediction_freshness}")
                
                # Display prediction
                display_current_prediction(prediction)
                
                # Add log of last action 
                if 'log_messages' in st.session_state and st.session_state.log_messages:
                    st.write("**Last System Action:**")
                    st.info(st.session_state.log_messages[-1])
                
                # Display current data info
                if st.session_state.latest_data is not None:
                    st.write("**Current Dataset:**")
                    st.write(f"Total candles: {len(st.session_state.latest_data)}")
                    st.write(f"Last update: {st.session_state.data_fetch_status.get('last_update', 'Unknown')}")
                    
                    # Add a small data preview
                    with st.expander("Latest Price Data"):
                        st.dataframe(st.session_state.latest_data.tail(5)[['open', 'high', 'low', 'close', 'volume']])
        
        with tabs[1]:
            # Technical Analysis Tab
            if st.session_state.latest_data is not None:
                st.subheader("Technical Indicators")
                
                # Add simple description
                st.markdown("""
                Technical indicators are mathematical calculations based on price, volume, or open interest of a security.
                These indicators help traders identify trading opportunities and make more informed decisions.
                """)
                
                # Technical indicators chart
                indicators_chart = plot_technical_indicators(st.session_state.latest_data.iloc[-100:])
                st.plotly_chart(indicators_chart, use_container_width=True, key="tech_indicators_chart")
                
                # Confidence distribution if predictions exist
                if st.session_state.predictions:
                    st.subheader("Prediction Confidence Distribution")
                    confidence_chart = plot_confidence_distribution(st.session_state.predictions[-20:])
                    st.plotly_chart(confidence_chart, use_container_width=True, key="confidence_distribution_chart")
            else:
                st.warning("No data available for technical analysis. Please fetch data first.")
        
        with tabs[2]:
            # Prediction History Tab
            st.subheader("AI Prediction History")
            
            if st.session_state.predictions:
                # Add filters
                filter_col1, filter_col2 = st.columns(2)
                with filter_col1:
                    trend_filter = st.multiselect(
                        "Filter by Trend",
                        options=["ALL", "LONG", "NEUTRAL", "SHORT"],
                        default=["ALL"]
                    )
                
                with filter_col2:
                    confidence_threshold = st.slider(
                        "Minimum Confidence",
                        min_value=0.0, 
                        max_value=1.0,
                        value=0.0,
                        step=0.05
                    )
                
                # Apply filters to predictions
                filtered_predictions = st.session_state.predictions.copy()
                if "ALL" not in trend_filter and trend_filter:
                    filtered_predictions = [p for p in filtered_predictions if p["trend"] in trend_filter]
                
                filtered_predictions = [p for p in filtered_predictions if p["confidence"] >= confidence_threshold]
                
                # Display history chart
                if filtered_predictions:
                    history_chart = plot_prediction_history(filtered_predictions)
                    st.plotly_chart(history_chart, use_container_width=True, key="prediction_history_plot")
                    
                    # Show most recent predictions in a table
                    with st.expander("Recent Predictions (Table View)", expanded=True):
                        recent_preds = pd.DataFrame(filtered_predictions[-15:])
                        recent_preds['timestamp'] = pd.to_datetime(recent_preds['timestamp'])
                        recent_preds = recent_preds.sort_values('timestamp', ascending=False)
                        
                        # Add styling to the dataframe
                        def style_trend(val):
                            color = 'green' if val == 'LONG' else 'red' if val == 'SHORT' else 'gray'
                            return f'background-color: {color}; color: white'
                        
                        # S·ª≠ d·ª•ng c√°ch thay th·∫ø t∆∞∆°ng th√≠ch v·ªõi nhi·ªÅu phi√™n b·∫£n pandas
                        try:
                            # Th·ª≠ c√°ch 1: s·ª≠ d·ª•ng style.applymap (pandas c≈©)
                            styled_df = recent_preds.style.applymap(style_trend, subset=['trend'])
                        except AttributeError:
                            # Th·ª≠ c√°ch 2: s·ª≠ d·ª•ng style.apply v·ªõi h√†m kh√°c
                            def highlight_trend(s):
                                return ['background-color: green; color: white' if x == 'LONG' 
                                        else 'background-color: red; color: white' if x == 'SHORT'
                                        else 'background-color: gray; color: white' for x in s]
                            
                            styled_df = recent_preds.style.apply(highlight_trend, subset=['trend'])
                        st.dataframe(styled_df, use_container_width=True)
                else:
                    st.info("No predictions match your filters")
            else:
                st.info("No prediction history available yet. Generate predictions to see history.")
                
        with tabs[3]:
            # Training Logs Tab
            st.subheader("Hu·∫•n luy·ªán AI - Nh·∫≠t k√Ω")
            
            # Create container for training logs
            log_col1, log_col2 = st.columns([3, 1])
            
            with log_col1:
                # Create a data processor log viewer
                st.write("### Nh·∫≠t k√Ω x·ª≠ l√Ω d·ªØ li·ªáu & hu·∫•n luy·ªán")
                
                # Fetch latest logs from continuous trainer
                if hasattr(st.session_state, 'continuous_trainer'):
                    trainer_status = st.session_state.continuous_trainer.get_training_status()
                    
                    # Display status information
                    if trainer_status:
                        st.write(f"**Tr·∫°ng th√°i:** {trainer_status.get('status', 'Unknown')}")
                        st.write(f"**L·∫ßn hu·∫•n luy·ªán cu·ªëi:** {trainer_status.get('last_training_time', 'Ch∆∞a c√≥')}")
                        st.write(f"**D·ªØ li·ªáu m·ªõi t·ª´ l·∫ßn hu·∫•n luy·ªán tr∆∞·ªõc:** {trainer_status.get('new_data_points', 0)} ƒëi·ªÉm d·ªØ li·ªáu")
                        
                        if trainer_status.get('is_training', False):
                            st.warning("ƒêang trong qu√° tr√¨nh hu·∫•n luy·ªán...")
                            st.progress(trainer_status.get('progress', 0))
                
                # Create a scrollable log area with stylized appearance
                st.markdown("""
                <style>
                .training-log-container {
                    height: 400px;
                    overflow-y: auto;
                    background-color: #111;
                    color: #0f0;
                    padding: 10px;
                    border-radius: 5px;
                    font-family: 'Courier New', monospace;
                    font-size: 0.9em;
                    line-height: 1.5;
                }
                </style>
                """, unsafe_allow_html=True)
                
                # Filter logs for training-related entries
                training_logs = []
                
                # Show continuous trainer logs
                if hasattr(st.session_state, 'continuous_trainer') and hasattr(st.session_state.continuous_trainer, 'log_messages'):
                    training_logs.extend(st.session_state.continuous_trainer.log_messages)
                
                # Also show general logs that contain training information
                if 'log_messages' in st.session_state:
                    for log in st.session_state.log_messages:
                        if any(keyword in log for keyword in ['training', 'Train', 'model', 'AI', 'hu·∫•n luy·ªán', 'd·ªØ li·ªáu']):
                            training_logs.append(log)
                
                # Get system logs via popen for comprehensive information
                import subprocess
                
                try:
                    # Get recent logs for relevant components
                    grep_cmd = "grep -E 'feature_engineering|data_processor|model_trainer|continuous_trainer' /tmp/streamlit_app.log 2>/dev/null | tail -n 200"
                    process = subprocess.Popen(grep_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    output, _ = process.communicate()
                    
                    if output:
                        system_logs = output.decode('utf-8').split('\n')
                        training_logs.extend(system_logs)
                except Exception as e:
                    st.error(f"Error reading system logs: {e}")
                
                # Display the logs
                if training_logs:
                    # Format the logs with color highlighting
                    formatted_logs = []
                    for log in training_logs:
                        if "ERROR" in log or "error" in log:
                            formatted_logs.append(f'<span style="color: red;">{log}</span>')
                        elif "WARNING" in log or "warning" in log:
                            formatted_logs.append(f'<span style="color: yellow;">{log}</span>')
                        elif "SUCCESS" in log or "success" in log:
                            formatted_logs.append(f'<span style="color: lime;">{log}</span>')
                        elif "INFO" in log or "info" in log:
                            formatted_logs.append(f'<span style="color: #0f9;">{log}</span>')
                        else:
                            formatted_logs.append(log)
                    
                    log_html = "<div class='training-log-container'>"
                    for log in formatted_logs:
                        log_html += f"{log}<br>"
                    log_html += "</div>"
                    
                    st.markdown(log_html, unsafe_allow_html=True)
                else:
                    st.info("Ch∆∞a c√≥ nh·∫≠t k√Ω hu·∫•n luy·ªán n√†o ƒë∆∞·ª£c ghi l·∫°i.")
                
                # Add refresh button
                if st.button("üîÑ L√†m m·ªõi nh·∫≠t k√Ω"):
                    st.experimental_rerun()
            
            with log_col2:
                # Training Status and Statistics
                st.write("### Th·ªëng k√™ hu·∫•n luy·ªán")
                
                # Add visual indicators for training phases
                phases = {
                    "Thu th·∫≠p d·ªØ li·ªáu": "In Progress" if hasattr(st.session_state, 'data_collector') else "Not Started",
                    "X·ª≠ l√Ω d·ªØ li·ªáu": "Completed" if hasattr(st.session_state, 'data_processor') else "Not Started",
                    "Hu·∫•n luy·ªán m√¥ h√¨nh": "Completed" if st.session_state.model_trained else "Not Started",
                    "D·ª± ƒëo√°n": "Completed" if st.session_state.predictions else "Not Started"
                }
                
                for phase, status in phases.items():
                    if status == "Completed":
                        st.success(f"‚úÖ {phase}")
                    elif status == "In Progress":
                        st.warning(f"‚è≥ {phase}")
                    else:
                        st.error(f"‚ùå {phase}")
                
                # Model Training Controls
                st.write("### ƒêi·ªÅu khi·ªÉn hu·∫•n luy·ªán")
                
                if st.button("üß† Hu·∫•n luy·ªán ngay", key="force_training_btn"):
                    if hasattr(st.session_state, 'continuous_trainer'):
                        # G·ªçi h√†m hu·∫•n luy·ªán tr·ª±c ti·∫øp t·ª´ continuous_trainer
                        try:
                            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang hu·∫•n luy·ªán
                            st.success("üöÄ ƒêang b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh...")
                            # Th√™m log message
                            timestamp = datetime.now().strftime("%H:%M:%S")
                            log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán b·∫±ng l·ªánh th·ªß c√¥ng"
                            if 'log_messages' not in st.session_state:
                                st.session_state.log_messages = []
                            st.session_state.log_messages.append(log_message)
                            
                            # Thay v√¨ schedule_training, g·ªçi _execute_training tr·ª±c ti·∫øp ƒë·ªÉ hu·∫•n luy·ªán ngay
                            training_thread = threading.Thread(
                                target=st.session_state.continuous_trainer._execute_training,
                                args=(True,)  # force=True
                            )
                            training_thread.daemon = True
                            training_thread.start()
                            
                            # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n t·∫•t
                            st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh! Qu√° tr√¨nh n√†y s·∫Ω ch·∫°y trong n·ªÅn.")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán: {str(e)}")
                    else:
                        st.error("Ch∆∞a kh·ªüi t·∫°o b·ªô hu·∫•n luy·ªán li√™n t·ª•c")

elif st.session_state.selected_tab == "C√†i ƒë·∫∑t":
    st.title("C√†i ƒë·∫∑t h·ªá th·ªëng d·ª± ƒëo√°n")
    
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc")
        
        # Add a big initialize button in the center
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng", use_container_width=True):
                initialize_system()
                st.rerun()
    else:
        settings_tab1, settings_tab2, settings_tab3 = st.tabs(["C√†i ƒë·∫∑t d·ª± ƒëo√°n", "C√†i ƒë·∫∑t hu·∫•n luy·ªán", "C√†i ƒë·∫∑t h·ªá th·ªëng"])
        
        with settings_tab1:
            st.subheader("‚öôÔ∏è C·∫•u h√¨nh d·ª± ƒëo√°n")
            
            # L·∫•y gi√° tr·ªã t·ª´ session state n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
            default_timeframe_index = 0  # M·∫∑c ƒë·ªãnh l√† 1m (index 0)
            default_horizon_1m_index = 0
            default_horizon_5m_index = 0
            
            # Kh·ªüi t·∫°o gi√° tr·ªã t·ª´ session state (n·∫øu ƒë√£ c√≥)
            if "prediction_settings" in st.session_state:
                settings = st.session_state.prediction_settings
                if settings["timeframe"] == "5m":
                    default_timeframe_index = 1
                    
                # L·∫•y danh s√°ch horizons cho c√°c timeframes
                horizons_1m = list(config.PREDICTION_SETTINGS["1m"]["horizons"].keys())
                horizons_5m = list(config.PREDICTION_SETTINGS["5m"]["horizons"].keys())
                
                # T√¨m index c·ªßa horizon trong danh s√°ch t∆∞∆°ng ·ª©ng
                if settings["timeframe"] == "1m" and settings["horizon"] in horizons_1m:
                    default_horizon_1m_index = horizons_1m.index(settings["horizon"])
                elif settings["timeframe"] == "5m" and settings["horizon"] in horizons_5m:
                    default_horizon_5m_index = horizons_5m.index(settings["horizon"])
            
            # Khung th·ªùi gian ch√≠nh ƒë·ªÉ d·ª± ƒëo√°n v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ session state
            selected_timeframe = st.selectbox(
                "Khung th·ªùi gian d·ªØ li·ªáu",
                options=["1m", "5m"],
                index=default_timeframe_index,
                help="Khung th·ªùi gian d·ªØ li·ªáu s·ª≠ d·ª•ng cho vi·ªác d·ª± ƒëo√°n",
                key="timeframe_selectbox"
            )
            
            # Th·ªùi gian d·ª± ƒëo√°n cho t∆∞∆°ng lai v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ session state
            if selected_timeframe == "1m":
                prediction_horizons = list(config.PREDICTION_SETTINGS["1m"]["horizons"].keys())
                selected_horizon = st.selectbox(
                    "Kho·∫£ng th·ªùi gian d·ª± ƒëo√°n",
                    options=prediction_horizons,
                    index=default_horizon_1m_index,
                    help="Th·ªùi gian d·ª± ƒëo√°n trong t∆∞∆°ng lai",
                    key="horizon_1m_selectbox"
                )
            else:  # 5m
                prediction_horizons = list(config.PREDICTION_SETTINGS["5m"]["horizons"].keys())
                selected_horizon = st.selectbox(
                    "Kho·∫£ng th·ªùi gian d·ª± ƒëo√°n",
                    options=prediction_horizons,
                    index=default_horizon_5m_index,
                    help="Th·ªùi gian d·ª± ƒëo√°n trong t∆∞∆°ng lai",
                    key="horizon_5m_selectbox"
                )
            
            # √Åp d·ª•ng thi·∫øt l·∫≠p m·ªõi
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ √Åp d·ª•ng thi·∫øt l·∫≠p d·ª± ƒëo√°n", use_container_width=True):
                    # L∆∞u thi·∫øt l·∫≠p d·ª± ƒëo√°n v√†o session state
                    st.session_state.prediction_settings = {
                        "timeframe": selected_timeframe,
                        "horizon": selected_horizon
                    }
                    st.success(f"ƒê√£ c·∫≠p nh·∫≠t thi·∫øt l·∫≠p d·ª± ƒëo√°n: Khung th·ªùi gian {selected_timeframe}, d·ª± ƒëo√°n cho {selected_horizon}")
            
            # Hi·ªÉn th·ªã thi·∫øt l·∫≠p hi·ªán t·∫°i
            if "prediction_settings" in st.session_state:
                settings = st.session_state.prediction_settings
                st.info(f"Thi·∫øt l·∫≠p hi·ªán t·∫°i: Khung th·ªùi gian {settings['timeframe']}, d·ª± ƒëo√°n cho {settings['horizon']}")
        
        with settings_tab2:
            st.subheader("üß† C√†i ƒë·∫∑t hu·∫•n luy·ªán")
            
            # X√°c ƒë·ªãnh gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ session state n·∫øu c√≥
            default_start_date = datetime.strptime(config.DEFAULT_TRAINING_START_DATE, "%Y-%m-%d").date()
            if "training_settings" in st.session_state and "start_date" in st.session_state.training_settings:
                try:
                    default_start_date = datetime.strptime(st.session_state.training_settings["start_date"], "%Y-%m-%d").date()
                except:
                    pass
                
            # Ch·ªçn kho·∫£ng th·ªùi gian d·ªØ li·ªáu hu·∫•n luy·ªán
            start_date = st.date_input(
                "Ng√†y b·∫Øt ƒë·∫ßu d·ªØ li·ªáu hu·∫•n luy·ªán",
                value=default_start_date,
                help="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu kho·∫£ng th·ªùi gian d·ªØ li·ªáu hu·∫•n luy·ªán",
                key="start_date_input"
            )
            
            # Hi·ªÉn th·ªã ng√†y hi·ªán t·∫°i l√†m ƒëi·ªÉm k·∫øt th√∫c
            end_date = datetime.now().date()
            st.info(f"D·ªØ li·ªáu hu·∫•n luy·ªán s·∫Ω ƒë∆∞·ª£c thu th·∫≠p t·ª´ {start_date} ƒë·∫øn {end_date}")
            
            # T√≠nh to√°n s·ªë ng√†y d·ªØ li·ªáu
            training_days = (end_date - start_date).days
            st.write(f"T·ªïng c·ªông: {training_days} ng√†y d·ªØ li·ªáu")
            
            # Thi·∫øt l·∫≠p t·∫ßn su·∫•t hu·∫•n luy·ªán l·∫°i
            st.subheader("‚è±Ô∏è T·∫ßn su·∫•t hu·∫•n luy·ªán t·ª± ƒë·ªông")
            
            # X√°c ƒë·ªãnh gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ª´ session state n·∫øu c√≥
            default_frequency_index = 0
            if "training_settings" in st.session_state and "training_frequency" in st.session_state.training_settings:
                frequency_options = ["30 ph√∫t", "1 gi·ªù", "3 gi·ªù", "6 gi·ªù", "12 gi·ªù", "24 gi·ªù"]
                if st.session_state.training_settings["training_frequency"] in frequency_options:
                    default_frequency_index = frequency_options.index(st.session_state.training_settings["training_frequency"])
            
            training_frequency = st.selectbox(
                "Hu·∫•n luy·ªán l·∫°i m·ªói",
                options=["30 ph√∫t", "1 gi·ªù", "3 gi·ªù", "6 gi·ªù", "12 gi·ªù", "24 gi·ªù"],
                index=default_frequency_index,
                help="T·∫ßn su·∫•t h·ªá th·ªëng t·ª± ƒë·ªông hu·∫•n luy·ªán l·∫°i model",
                key="training_frequency_selectbox"
            )
            
            # Button ƒë·ªÉ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán v√† √°p d·ª•ng thi·∫øt l·∫≠p m·ªõi
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ L∆∞u c√†i ƒë·∫∑t hu·∫•n luy·ªán", use_container_width=True):
                    # L∆∞u thi·∫øt l·∫≠p hu·∫•n luy·ªán v√†o session state
                    st.session_state.training_settings = {
                        "start_date": start_date.strftime("%Y-%m-%d"),
                        "training_frequency": training_frequency
                    }
                    
                    # C·∫≠p nh·∫≠t t·∫ßn su·∫•t hu·∫•n luy·ªán
                    frequency_minutes = {
                        "30 ph√∫t": 30,
                        "1 gi·ªù": 60,
                        "3 gi·ªù": 180,
                        "6 gi·ªù": 360,
                        "12 gi·ªù": 720,
                        "24 gi·ªù": 1440
                    }
                    
                    config.TRAINING_SCHEDULE["interval_minutes"] = frequency_minutes[training_frequency]
                    
                    st.success("ƒê√£ l∆∞u c√†i ƒë·∫∑t hu·∫•n luy·ªán th√†nh c√¥ng!")
            
            with col2:
                if st.button("üß† Hu·∫•n luy·ªán ngay", use_container_width=True):
                    if 'training_settings' in st.session_state:
                        # G·ªçi h√†m hu·∫•n luy·ªán v·ªõi thi·∫øt l·∫≠p m·ªõi
                        with st.spinner("ƒêang b·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán..."):
                            # L∆∞u thi·∫øt l·∫≠p hu·∫•n luy·ªán v√† b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán
                            new_start_date = st.session_state.training_settings["start_date"]
                            config.HISTORICAL_START_DATE = new_start_date
                            
                            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang hu·∫•n luy·ªán
                            st.success("üöÄ ƒêang b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh...")
                            # Th√™m log message
                            timestamp = datetime.now().strftime("%H:%M:%S")
                            log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán v·ªõi thi·∫øt l·∫≠p m·ªõi: t·ª´ {config.HISTORICAL_START_DATE}"
                            if 'log_messages' not in st.session_state:
                                st.session_state.log_messages = []
                            st.session_state.log_messages.append(log_message)
                            
                            # G·ªçi h√†m _execute_training tr·ª±c ti·∫øp ƒë·ªÉ hu·∫•n luy·ªán ngay
                            try:
                                if hasattr(st.session_state, 'continuous_trainer'):
                                    # L·∫•y continuous_trainer
                                    continuous_trainer = st.session_state.continuous_trainer
                                    # C·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu cho continuous_trainer
                                    continuous_trainer.historical_start_date = config.HISTORICAL_START_DATE
                                    # Reset l·∫°i d·ªØ li·ªáu c≈©
                                    st.session_state.historical_data_ready = False
                                    st.session_state.model_trained = False
                                    if 'historical_data_status' in st.session_state:
                                        st.session_state.historical_data_status['progress'] = 0
                                    # T·∫°o l·∫°i c√°c ƒëo·∫°n d·ªØ li·ªáu h√†ng th√°ng v·ªõi ng√†y b·∫Øt ƒë·∫ßu m·ªõi
                                    continuous_trainer.monthly_chunks = continuous_trainer._generate_monthly_chunks()
                                    # Log th√¥ng b√°o
                                    print(f"ƒê√£ c·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán th√†nh: {config.HISTORICAL_START_DATE}")
                                    print(f"S·ªë ƒëo·∫°n d·ªØ li·ªáu m·ªõi: {len(continuous_trainer.monthly_chunks)}")
                                    timestamp = datetime.now().strftime("%H:%M:%S")
                                    log_message = f"{timestamp} - üìÖ ƒê√£ c·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu th√†nh {config.HISTORICAL_START_DATE}, t·∫°o l·∫°i {len(continuous_trainer.monthly_chunks)} ƒëo·∫°n d·ªØ li·ªáu"
                                    st.session_state.log_messages.append(log_message)
                                    
                                    # Th·ª±c thi hu·∫•n luy·ªán ngay trong m·ªôt lu·ªìng ri√™ng
                                    training_thread = threading.Thread(
                                        target=continuous_trainer._execute_training,
                                        args=(True,)  # force=True
                                    )
                                    training_thread.daemon = True
                                    training_thread.start()
                                    
                                    # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n t·∫•t
                                    st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh! Qu√° tr√¨nh n√†y s·∫Ω ch·∫°y trong n·ªÅn.")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán: {str(e)}")
                    else:
                        # S·ª≠ d·ª•ng thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh
                        with st.spinner("ƒêang b·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán..."):
                            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang hu·∫•n luy·ªán
                            st.success("üöÄ ƒêang b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh...")
                            # Th√™m log message
                            timestamp = datetime.now().strftime("%H:%M:%S")
                            log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán v·ªõi thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh"
                            if 'log_messages' not in st.session_state:
                                st.session_state.log_messages = []
                            st.session_state.log_messages.append(log_message)
                            
                            # G·ªçi h√†m _execute_training tr·ª±c ti·∫øp ƒë·ªÉ hu·∫•n luy·ªán ngay
                            try:
                                if hasattr(st.session_state, 'continuous_trainer'):
                                    # Th·ª±c thi hu·∫•n luy·ªán ngay trong m·ªôt lu·ªìng ri√™ng
                                    training_thread = threading.Thread(
                                        target=st.session_state.continuous_trainer._execute_training,
                                        args=(True,)  # force=True
                                    )
                                    training_thread.daemon = True
                                    training_thread.start()
                                    
                                    # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n t·∫•t
                                    st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh! Qu√° tr√¨nh n√†y s·∫Ω ch·∫°y trong n·ªÅn.")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán: {str(e)}")
            
            # Hi·ªÉn th·ªã thi·∫øt l·∫≠p hi·ªán t·∫°i
            if "training_settings" in st.session_state:
                settings = st.session_state.training_settings
                st.info(f"Thi·∫øt l·∫≠p hi·ªán t·∫°i: T·ª´ ng√†y {settings['start_date']}, hu·∫•n luy·ªán l·∫°i m·ªói {settings['training_frequency']}")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i hu·∫•n luy·ªán
            st.subheader("üìä Tr·∫°ng th√°i hu·∫•n luy·ªán")
            if 'continuous_trainer' in st.session_state and st.session_state.continuous_trainer:
                status = st.session_state.continuous_trainer.get_training_status()
                
                # Hi·ªÉn th·ªã th·ªùi ƒëi·ªÉm hu·∫•n luy·ªán l·∫ßn cu·ªëi
                if 'last_training' in status and status['last_training']:
                    st.write(f"üïí Hu·∫•n luy·ªán l·∫ßn cu·ªëi: {status['last_training']}")
                
                # Hi·ªÉn th·ªã th·ªùi ƒëi·ªÉm hu·∫•n luy·ªán ti·∫øp theo
                if 'next_training' in status and status['next_training']:
                    st.write(f"‚è±Ô∏è Hu·∫•n luy·ªán ti·∫øp theo: {status['next_training']}")
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i hu·∫•n luy·ªán
                if 'is_training' in status:
                    if status['is_training']:
                        st.warning("‚öôÔ∏è ƒêang hu·∫•n luy·ªán...")
                    else:
                        st.success("‚úÖ S·∫µn s√†ng cho hu·∫•n luy·ªán ti·∫øp theo")
            else:
                st.warning("H·ªá th·ªëng hu·∫•n luy·ªán t·ª± ƒë·ªông ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        
        with settings_tab3:
            st.subheader("üõ†Ô∏è C√†i ƒë·∫∑t h·ªá th·ªëng")
            
            # Thi·∫øt l·∫≠p ngu·ªìn d·ªØ li·ªáu
            data_source = st.radio(
                "Ngu·ªìn d·ªØ li·ªáu",
                options=["Binance API (th·ª±c)", "M√¥ ph·ªèng (gi·∫£ l·∫≠p)"],
                index=0 if config.USE_REAL_API else 1,
                help="Ch·ªçn ngu·ªìn d·ªØ li·ªáu cho h·ªá th·ªëng"
            )
            
            # C·∫≠p nh·∫≠t thi·∫øt l·∫≠p USE_REAL_API
            config.USE_REAL_API = (data_source == "Binance API (th·ª±c)")
            
            # C√†i ƒë·∫∑t k·∫øt n·ªëi
            with st.expander("üåê C√†i ƒë·∫∑t K·∫øt n·ªëi", expanded=True):
                st.info("H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ k·∫øt n·ªëi tr·ª±c ti·∫øp t·ªõi Binance API. T√≠nh nƒÉng proxy ƒë√£ b·ªã lo·∫°i b·ªè.")
                
                # Th√¥ng b√°o v·ªÅ vi·ªác tri·ªÉn khai tr√™n server ri√™ng
                st.markdown("""
                **L∆∞u √Ω v·ªÅ K·∫øt n·ªëi API**: H·ªá th·ªëng ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y tr√™n server ri√™ng c·ªßa b·∫°n
                v·ªõi k·∫øt n·ªëi tr·ª±c ti·∫øp t·ªõi Binance API. Trong m√¥i tr∆∞·ªùng Replit, API c√≥ th·ªÉ kh√¥ng truy c·∫≠p
                ƒë∆∞·ª£c do h·∫°n ch·∫ø ƒë·ªãa l√Ω c·ªßa Binance. ƒêi·ªÅu n√†y s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng khi tri·ªÉn khai
                tr√™n VPS ho·∫∑c server ri√™ng c·ªßa b·∫°n.
                """)
                
                # ƒê·∫∑t t·∫•t c·∫£ c√°c c√†i ƒë·∫∑t proxy th√†nh False ho·∫∑c r·ªóng
                st.session_state.system_settings["use_proxy"] = False
                config.USE_PROXY = False
            
            # Thi·∫øt l·∫≠p th·ªùi gian c·∫≠p nh·∫≠t d·ªØ li·ªáu
            update_interval = st.slider(
                "Th·ªùi gian c·∫≠p nh·∫≠t d·ªØ li·ªáu (gi√¢y)",
                min_value=5,
                max_value=60,
                value=config.UPDATE_INTERVAL,
                step=5,
                help="Th·ªùi gian gi·ªØa c√°c l·∫ßn c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª± ƒë·ªông"
            )
            
            # C·∫≠p nh·∫≠t thi·∫øt l·∫≠p UPDATE_INTERVAL
            config.UPDATE_INTERVAL = update_interval
            
            # Th√™m expander cho t√≠nh nƒÉng n√¢ng cao
            with st.expander("üßπ X√≥a d·ªØ li·ªáu v√† kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng", expanded=False):
                st.warning("‚ö†Ô∏è Ch·ª©c nƒÉng n√†y s·∫Ω x√≥a t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ t·∫£i v√† ƒë√£ hu·∫•n luy·ªán. S·ª≠ d·ª•ng khi mu·ªën l√†m m·ªõi ho√†n to√†n h·ªá th·ªëng ho·∫∑c khi c√≥ l·ªói d·ªØ li·ªáu x√°o tr·ªôn.")
                
                # T·∫°o hai c·ªôt ƒë·ªÉ b·ªë tr√≠ n√∫t
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("üßπ X√≥a d·ªØ li·ªáu ƒë√£ t·∫£i", use_container_width=True, key="clear_loaded_data"):
                        try:
                            # X√≥a d·ªØ li·ªáu ƒë√£ t·∫£i trong session_state
                            if hasattr(st.session_state, 'latest_data'):
                                st.session_state.latest_data = None
                            
                            if hasattr(st.session_state, 'historical_data'):
                                st.session_state.historical_data = None
                                
                            if hasattr(st.session_state, 'data_collector') and hasattr(st.session_state.data_collector, 'data'):
                                # ƒê·∫£m b·∫£o data collector c√≥ thu·ªôc t√≠nh data tr∆∞·ªõc khi truy c·∫≠p
                                st.session_state.data_collector.data = {tf: None for tf in config.ALL_TIMEFRAMES}
                                
                            st.success("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu ƒë√£ t·∫£i th√†nh c√¥ng!")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu ƒë√£ t·∫£i: {str(e)}")
                
                with col2:
                    if st.button("üßπ X√≥a m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán", use_container_width=True, key="clear_trained_models"):
                        try:
                            # ƒê√°nh d·∫•u l√† ch∆∞a hu·∫•n luy·ªán
                            st.session_state.model_trained = False
                            
                            # X√≥a d·ªØ li·ªáu hu·∫•n luy·ªán v√† m√¥ h√¨nh
                            if hasattr(st.session_state, 'prediction_engine') and hasattr(st.session_state.prediction_engine, 'models'):
                                # ƒê·∫£m b·∫£o prediction engine c√≥ thu·ªôc t√≠nh models tr∆∞·ªõc khi truy c·∫≠p
                                st.session_state.prediction_engine.models = {}
                                
                            if hasattr(st.session_state, 'continuous_trainer'):
                                # X√≥a d·ªØ li·ªáu ƒë√£ l∆∞u trong continuous_trainer
                                cached_data_dir = os.path.join("saved_models", "cached_data")
                                if os.path.exists(cached_data_dir):
                                    import shutil
                                    try:
                                        shutil.rmtree(cached_data_dir)
                                        os.makedirs(cached_data_dir, exist_ok=True)
                                    except Exception as e:
                                        st.error(f"Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c cached_data: {str(e)}")
                            
                            st.success("‚úÖ ƒê√£ x√≥a m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán th√†nh c√¥ng!")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi x√≥a m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán: {str(e)}")
                
                # N√∫t kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô h·ªá th·ªëng - x√≥a t·∫•t c·∫£ d·ªØ li·ªáu v√† kh·ªüi ƒë·ªông l·∫°i
                if st.button("üîÑ X√≥a t·∫•t c·∫£ d·ªØ li·ªáu v√† kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng", use_container_width=True, type="primary"):
                    try:
                        # ƒê·∫£m b·∫£o t·∫Øt ch·ª©c nƒÉng proxy
                        config.USE_PROXY = False
                        
                        # X√≥a d·ªØ li·ªáu ƒë√£ t·∫£i
                        if hasattr(st.session_state, 'latest_data'):
                            st.session_state.latest_data = None
                        
                        if hasattr(st.session_state, 'historical_data'):
                            st.session_state.historical_data = None
                            
                        if hasattr(st.session_state, 'data_collector') and hasattr(st.session_state.data_collector, 'data'):
                            # ƒê·∫£m b·∫£o data collector c√≥ thu·ªôc t√≠nh data tr∆∞·ªõc khi truy c·∫≠p
                            st.session_state.data_collector.data = {tf: None for tf in config.ALL_TIMEFRAMES}
                        
                        # X√≥a m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
                        st.session_state.model_trained = False
                        
                        if hasattr(st.session_state, 'prediction_engine') and hasattr(st.session_state.prediction_engine, 'models'):
                            # ƒê·∫£m b·∫£o prediction engine c√≥ thu·ªôc t√≠nh models tr∆∞·ªõc khi truy c·∫≠p
                            st.session_state.prediction_engine.models = {}
                        
                        # ƒê·∫∑t l·∫°i t·∫•t c·∫£ session state
                        if hasattr(st.session_state, 'system_settings'):
                            st.session_state.system_settings = {
                                "use_real_api": config.USE_REAL_API,
                                "update_interval": config.UPDATE_INTERVAL,
                                "auto_training": config.CONTINUOUS_TRAINING,
                                "lookback_periods": config.LOOKBACK_PERIODS
                            }
                            
                        # X√≥a d·ªØ li·ªáu ƒë√£ l∆∞u trong continuous_trainer
                        cached_data_dir = os.path.join("saved_models", "cached_data")
                        if os.path.exists(cached_data_dir):
                            import shutil
                            try:
                                shutil.rmtree(cached_data_dir)
                                os.makedirs(cached_data_dir, exist_ok=True)
                            except Exception as e:
                                st.error(f"Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c cached_data: {str(e)}")
                        
                        # Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng
                        st.session_state.initialized = False
                        st.success("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu v√† ƒëang kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng...")
                        time.sleep(1)  # Ch·ªù 1 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
                        initialize_system()
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu v√† kh·ªüi ƒë·ªông l·∫°i: {str(e)}")
            
            # Button ƒë·ªÉ l∆∞u thi·∫øt l·∫≠p h·ªá th·ªëng
            if st.button("üíæ L∆∞u thi·∫øt l·∫≠p h·ªá th·ªëng", use_container_width=True):
                st.success(f"ƒê√£ l∆∞u thi·∫øt l·∫≠p h·ªá th·ªëng: Ngu·ªìn d·ªØ li·ªáu = {data_source}, c·∫≠p nh·∫≠t m·ªói {update_interval} gi√¢y")
                
                # N·∫øu thay ƒë·ªïi ngu·ªìn d·ªØ li·ªáu, c·∫ßn kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng
                # S·ª≠ d·ª•ng ngu·ªìn d·ªØ li·ªáu Binance API th·ª±c
                if st.button("üîÑ Kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng", use_container_width=True):
                    st.session_state.initialized = False
                    initialize_system()
                    st.rerun()

elif st.session_state.selected_tab == "Models & Training":
    st.title("AI Models & Training")
    
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc")
    else:
        # Ph·∫ßn ƒëi·ªÅu khi·ªÉn v√† c√†i ƒë·∫∑t
        left_col, right_col = st.columns([1, 2])
        
        with left_col:
            st.subheader("üõ†Ô∏è ƒêi·ªÅu khi·ªÉn")
            
            # Hi·ªÉn th·ªã n√∫t hu·∫•n luy·ªán
            if not st.session_state.model_trained:
                if st.button("üß† Hu·∫•n luy·ªán m√¥ h√¨nh", type="primary", use_container_width=True):
                    # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang hu·∫•n luy·ªán
                    st.success("üöÄ ƒêang b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh...")
                    # Th√™m log message
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh t·ª´ tab Models & Training"
                    if 'log_messages' not in st.session_state:
                        st.session_state.log_messages = []
                    st.session_state.log_messages.append(log_message)
                    
                    # Th·ª±c thi hu·∫•n luy·ªán trong m·ªôt lu·ªìng ri√™ng
                    try:
                        if hasattr(st.session_state, 'continuous_trainer'):
                            training_thread = threading.Thread(
                                target=st.session_state.continuous_trainer._execute_training,
                                args=(True,)  # force=True
                            )
                            training_thread.daemon = True
                            training_thread.start()
                            
                            # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n t·∫•t
                            st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh! Qu√° tr√¨nh n√†y s·∫Ω ch·∫°y trong n·ªÅn.")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán: {str(e)}")
            else:
                if st.button("üîÑ Hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh", type="primary", use_container_width=True):
                    # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang hu·∫•n luy·ªán
                    st.success("üîÑ ƒêang b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh...")
                    # Th√™m log message
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    log_message = f"{timestamp} - üîÑ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh t·ª´ tab Models & Training"
                    if 'log_messages' not in st.session_state:
                        st.session_state.log_messages = []
                    st.session_state.log_messages.append(log_message)
                    
                    # Th·ª±c thi hu·∫•n luy·ªán trong m·ªôt lu·ªìng ri√™ng
                    try:
                        if hasattr(st.session_state, 'continuous_trainer'):
                            training_thread = threading.Thread(
                                target=st.session_state.continuous_trainer._execute_training,
                                args=(True,)  # force=True
                            )
                            training_thread.daemon = True
                            training_thread.start()
                            
                            # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n t·∫•t
                            st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh! Qu√° tr√¨nh n√†y s·∫Ω ch·∫°y trong n·ªÅn.")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán: {str(e)}")
            
            # Th√™m c√†i ƒë·∫∑t hu·∫•n luy·ªán
            st.subheader("‚öôÔ∏è C√†i ƒë·∫∑t hu·∫•n luy·ªán")
            
            # Ch·ªçn khung th·ªùi gian
            selected_timeframe = st.selectbox(
                "Khung th·ªùi gian hu·∫•n luy·ªán", 
                options=["1m", "5m", "15m", "1h", "4h"],
                index=1,  # 5m l√† m·∫∑c ƒë·ªãnh
                key="training_timeframe"
            )
            
            # Ch·ªçn ph·∫°m vi hu·∫•n luy·ªán
            training_range = st.selectbox(
                "Ph·∫°m vi d·ªØ li·ªáu", 
                options=["1 th√°ng g·∫ßn nh·∫•t", "3 th√°ng g·∫ßn nh·∫•t", "6 th√°ng g·∫ßn nh·∫•t", "12 th√°ng g·∫ßn nh·∫•t"],
                index=1,  # 3 th√°ng l√† m·∫∑c ƒë·ªãnh
                key="training_range"
            )
            
            # Ch·ªçn tham s·ªë k·ªπ thu·∫≠t
            training_threshold = st.slider(
                "Ng∆∞·ª°ng bi·∫øn ƒë·ªông gi√° (%)", 
                min_value=0.1, 
                max_value=2.0, 
                value=0.5, 
                step=0.1,
                key="training_threshold"
            )
            
            # Ch·ªçn s·ªë epochs hu·∫•n luy·ªán
            training_epochs = st.slider(
                "Epochs hu·∫•n luy·ªán", 
                min_value=5, 
                max_value=50, 
                value=20, 
                step=5,
                key="training_epochs"
            )
            
            # N√∫t hu·∫•n luy·ªán v·ªõi c√†i ƒë·∫∑t
            if st.button("üöÄ Hu·∫•n luy·ªán v·ªõi c√†i ƒë·∫∑t n√†y", use_container_width=True, key="train_custom_btn"):
                # L∆∞u c√°c c√†i ƒë·∫∑t hu·∫•n luy·ªán v√†o session state
                st.session_state.custom_training_params = {
                    "timeframe": selected_timeframe,
                    "range": training_range,
                    "threshold": training_threshold,
                    "epochs": training_epochs
                }
                
                # Hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng v·ªÅ hu·∫•n luy·ªán
                st.success(f"üöÄ ƒêang b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán v·ªõi: {selected_timeframe}, {training_range} ng√†y, ng∆∞·ª°ng {training_threshold}%, {training_epochs} epochs")
                
                # Th√™m log message
                timestamp = datetime.now().strftime("%H:%M:%S")
                log_message = f"{timestamp} - üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán v·ªõi c√†i ƒë·∫∑t t√πy ch·ªânh: {selected_timeframe}, {training_range} ng√†y, ng∆∞·ª°ng {training_threshold}%, {training_epochs} epochs"
                if 'log_messages' not in st.session_state:
                    st.session_state.log_messages = []
                st.session_state.log_messages.append(log_message)
                
                # Thay v√¨ d√πng h√†m train_models, g·ªçi _execute_training tr·ª±c ti·∫øp ƒë·ªÉ hu·∫•n luy·ªán ngay
                try:
                    if hasattr(st.session_state, 'continuous_trainer'):
                        # Th·ª±c thi hu·∫•n luy·ªán ngay trong m·ªôt lu·ªìng ri√™ng
                        training_thread = threading.Thread(
                            target=st.session_state.continuous_trainer._execute_training,
                            args=(True,)  # force=True
                        )
                        training_thread.daemon = True
                        training_thread.start()
                        
                        # Hi·ªÉn th·ªã th√¥ng b√°o ƒë√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán
                        st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán! B·∫°n c√≥ th·ªÉ xem ti·∫øn tr√¨nh trong tab 'Training Logs'")
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán: {str(e)}")
        
        with right_col:
            # Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu
            st.subheader("üìä Th√¥ng tin d·ªØ li·ªáu")
            
            # Display status of available data
            if st.session_state.latest_data is not None:
                st.success(f"D·ªØ li·ªáu c√≥ s·∫µn: {len(st.session_state.latest_data)} n·∫øn")
                
                # Show data preview
                with st.expander("Xem tr∆∞·ªõc d·ªØ li·ªáu th√¥"):
                    st.dataframe(st.session_state.latest_data.tail(10))
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu. Nh·∫•n 'T·∫£i d·ªØ li·ªáu th·ªùi gian th·ª±c' ·ªü b√™n tr√°i.")
            
            # Hi·ªÉn th·ªã th√¥ng tin hu·∫•n luy·ªán
            st.subheader("üß† Th√¥ng tin hu·∫•n luy·ªán")
            
            if st.session_state.model_trained:
                st.success("C√°c m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† s·∫µn s√†ng d·ª± ƒëo√°n")
                if hasattr(st.session_state, 'training_info'):
                    st.caption(f"Last trained: {st.session_state.training_info.get('training_time', 'Unknown')}")
            else:
                st.warning("Models not trained yet")
        
        # Show data source information
        if hasattr(st.session_state, 'training_info'):
            info = st.session_state.training_info
            
            # Data source info in an expander
            with st.expander("Training Data Source Information", expanded=True):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**Data Source Details:**")
                    st.info(f"Source: {info.get('data_source', 'Unknown')}")
                    st.write(f"Data points: {info.get('data_points', 0)} candles")
                    st.write(f"Date range: {info.get('date_range', 'Unknown')}")
                    st.write(f"Features used: {info.get('feature_count', 0)} technical indicators")
                    
                with col2:
                    st.write("**Training Dataset:**")
                    st.write(f"Training samples: {info.get('training_samples', 0)}")
                    
                    # Class distribution
                    class_dist = info.get('class_distribution', {})
                    col1a, col2a, col3a = st.columns(3)
                    with col1a:
                        st.metric("SHORT", class_dist.get('SHORT', 0))
                    with col2a:
                        st.metric("NEUTRAL", class_dist.get('NEUTRAL', 0))
                    with col3a:
                        st.metric("LONG", class_dist.get('LONG', 0))
        
        # Model architecture & performance
        st.header("Model Architecture & Performance")
        
        # Model descriptions with more details
        models_descriptions = {
            "LSTM": "Long Short-Term Memory network for sequence learning from 60 past candles. Specialized in capturing long-term dependencies and sequential patterns in price data. Input: Normalized technical indicators over 60 candles.",
            "Transformer": "Transformer model with self-attention mechanism for price pattern recognition. Excellent at finding non-linear relationships between different timeframes. Input: Same as LSTM but with attention weights between time steps.",
            "CNN": "Convolutional Neural Network for visual pattern recognition in price charts. Treats price data as images to identify visual patterns. Input: 2D representation of price action with multiple technical indicator channels.",
            "Historical Similarity": "K-nearest neighbors approach to find similar historical price patterns. Matches current market conditions with historical outcomes. Input: Normalized price and indicator patterns.",
            "Meta-Learner": "Ensemble model that combines predictions from all other models using a machine learning classifier. Weights each model based on recent performance. Input: Output probabilities from all other models."
        }
        
        # Display model descriptions
        with st.expander("Model Descriptions", expanded=True):
            for model, desc in models_descriptions.items():
                st.write(f"**{model}:** {desc}")
        
        # Display model performance if available
        st.subheader("Model Performance")
        
        if hasattr(st.session_state, 'training_info') and 'model_performance' in st.session_state.training_info:
            perf = st.session_state.training_info['model_performance']
            performance_chart = plot_model_performance(perf)
            st.plotly_chart(performance_chart, use_container_width=True)
        else:
            # Show placeholder performance
            placeholder_perf = {
                'lstm': 0.72,
                'transformer': 0.76,
                'cnn': 0.68,
                'historical_similarity': 0.65,
                'meta_learner': 0.81
            }
            st.info("No actual model performance data available yet. Below is an example of what the performance chart will look like after training.")
            performance_chart = plot_model_performance(placeholder_perf)
            st.plotly_chart(performance_chart, use_container_width=True)
        
        # Training parameters
        with st.expander("Training Parameters"):
            st.json({
                "Sequence Length": config.SEQUENCE_LENGTH,
                "Prediction Window": config.PREDICTION_WINDOW,
                "Price Movement Threshold": f"{config.PRICE_MOVEMENT_THRESHOLD * 100}%",
                "Batch Size": config.BATCH_SIZE,
                "Epochs": config.EPOCHS,
                "Early Stopping Patience": config.EARLY_STOPPING_PATIENCE
            })

elif st.session_state.selected_tab == "Backtest":
    st.title("Ki·ªÉm tra hi·ªáu su·∫•t m√¥ h√¨nh (Backtest)")
    
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc")
        
        # Add a big initialize button in the center
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng", use_container_width=True):
                initialize_system()
                st.rerun()
    else:
        # Thi·∫øt l·∫≠p th·ªùi gian cho backtest
        st.subheader("Thi·∫øt l·∫≠p kho·∫£ng th·ªùi gian cho backtest")
        
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input(
                "Ng√†y b·∫Øt ƒë·∫ßu",
                value=datetime.strptime(config.BACKTEST_PERIOD_START, "%Y-%m-%d").date(),
                help="Ng√†y b·∫Øt ƒë·∫ßu cho kho·∫£ng th·ªùi gian backtest"
            )
        
        with col2:
            end_date = st.date_input(
                "Ng√†y k·∫øt th√∫c",
                value=datetime.strptime(config.BACKTEST_PERIOD_END, "%Y-%m-%d").date(),
                help="Ng√†y k·∫øt th√∫c cho kho·∫£ng th·ªùi gian backtest"
            )
        
        # Thi·∫øt l·∫≠p khung th·ªùi gian v√† kho·∫£ng th·ªùi gian d·ª± ƒëo√°n
        st.subheader("Thi·∫øt l·∫≠p d·ª± ƒëo√°n")
        
        col1, col2 = st.columns(2)
        with col1:
            timeframe = st.selectbox(
                "Khung th·ªùi gian",
                options=["1m", "5m"],
                index=0,
                help="Khung th·ªùi gian cho d·ªØ li·ªáu backtest"
            )
        
        with col2:
            if timeframe == "1m":
                prediction_horizons = list(config.PREDICTION_SETTINGS["1m"]["horizons"].keys())
                prediction_horizon = st.selectbox(
                    "Th·ªùi gian d·ª± ƒëo√°n",
                    options=prediction_horizons,
                    index=0,
                    help="Kho·∫£ng th·ªùi gian d·ª± ƒëo√°n"
                )
            else:  # 5m
                prediction_horizons = list(config.PREDICTION_SETTINGS["5m"]["horizons"].keys())
                prediction_horizon = st.selectbox(
                    "Th·ªùi gian d·ª± ƒëo√°n",
                    options=prediction_horizons,
                    index=0,
                    help="Kho·∫£ng th·ªùi gian d·ª± ƒëo√°n"
                )
        
        # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu backtest
        if st.button("‚ñ∂Ô∏è Ch·∫°y Backtest", use_container_width=True):
            # Ki·ªÉm tra xem ng√†y b·∫Øt ƒë·∫ßu c√≥ tr∆∞·ªõc ng√†y k·∫øt th√∫c kh√¥ng
            if start_date >= end_date:
                st.error("Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c!")
            else:
                with st.spinner("ƒêang th·ª±c hi·ªán backtest..."):
                    # ƒê·∫∑t th√¥ng tin backtest v√†o session state
                    if 'backtest_results' not in st.session_state:
                        st.session_state.backtest_results = {}
                    
                    # ƒê·∫∑t kho·∫£ng th·ªùi gian v√† c·∫•u h√¨nh d·ª± ƒëo√°n
                    backtest_config = {
                        "start_date": start_date.strftime("%Y-%m-%d"),
                        "end_date": end_date.strftime("%Y-%m-%d"),
                        "timeframe": timeframe,
                        "prediction_horizon": prediction_horizon
                    }
                    
                    # T·∫°o key cho k·∫øt qu·∫£ backtest n√†y
                    backtest_key = f"{timeframe}_{prediction_horizon}_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}"
                    
                    # T·∫°o k·∫øt qu·∫£ backtest gi·∫£ ƒë·ªÉ demo (thay th·∫ø b·∫±ng k·∫øt qu·∫£ th·ª±c khi c√≥ h√†m backtest)
                    # T·∫°o k·∫øt qu·∫£ backtest ng·∫´u nhi√™n ƒë·ªÉ demo
                    accuracy = random.uniform(0.62, 0.78)
                    total_trades = random.randint(100, 500)
                    profitable_trades = int(total_trades * accuracy)
                    average_profit = random.uniform(2.5, 5.0)
                    average_loss = random.uniform(1.5, 3.0)
                    max_drawdown = random.uniform(8, 15)
                    
                    # T·∫°o danh s√°ch giao d·ªãch gi·∫£ l·∫≠p
                    fake_trades = []
                    current_date = start_date
                    while current_date <= end_date:
                        # B·ªè qua cu·ªëi tu·∫ßn
                        if current_date.weekday() < 5:  # 0-4 l√† th·ª© 2 ƒë·∫øn th·ª© 6
                            # S·ªë giao d·ªãch ng·∫´u nhi√™n m·ªói ng√†y
                            num_trades = random.randint(0, 3)
                            
                            for _ in range(num_trades):
                                # T·∫°o th·ªùi gian ng·∫´u nhi√™n trong ng√†y
                                hour = random.randint(0, 23)
                                minute = random.randint(0, 59)
                                trade_time = datetime(
                                    current_date.year, 
                                    current_date.month, 
                                    current_date.day,
                                    hour, minute
                                )
                                
                                # Ng·∫´u nhi√™n t√≠n hi·ªáu
                                signal = random.choice(["LONG", "SHORT"])
                                
                                # Ng·∫´u nhi√™n k·∫øt qu·∫£
                                result = random.choice([True, False, True, True])  # Thi√™n v·ªÅ true m·ªôt ch√∫t
                                
                                # T√≠nh l·ª£i nhu·∫≠n/l·ªó
                                pnl = random.uniform(2.0, 6.0) if result else -random.uniform(1.0, 3.0)
                                
                                # Th√™m v√†o danh s√°ch giao d·ªãch
                                fake_trades.append({
                                    "time": trade_time.strftime("%Y-%m-%d %H:%M"),
                                    "signal": signal,
                                    "entry_price": round(random.uniform(3000, 4000), 2),
                                    "exit_price": None,  # S·∫Ω t√≠nh sau
                                    "result": "WIN" if result else "LOSS",
                                    "pnl": round(pnl, 2),
                                    "confidence": round(random.uniform(0.65, 0.95), 2)
                                })
                        
                        # Ng√†y ti·∫øp theo
                        current_date += timedelta(days=1)
                    
                    # Th√™m gi√° tho√°t d·ª±a tr√™n PNL
                    for trade in fake_trades:
                        entry_price = trade["entry_price"]
                        pnl_percent = trade["pnl"] / entry_price
                        
                        if trade["signal"] == "LONG":
                            trade["exit_price"] = round(entry_price * (1 + pnl_percent), 2)
                        else:  # SHORT
                            trade["exit_price"] = round(entry_price * (1 - pnl_percent), 2)
                    
                    # S·∫Øp x·∫øp giao d·ªãch theo th·ªùi gian
                    fake_trades.sort(key=lambda x: x["time"])
                    
                    # T·∫°o ma tr·∫≠n nh·∫ßm l·∫´n
                    confusion_matrix = {
                        "true_long": random.randint(30, 70),
                        "true_neutral": random.randint(100, 200),
                        "true_short": random.randint(30, 70),
                        "pred_long": random.randint(40, 80),
                        "pred_neutral": random.randint(90, 180),
                        "pred_short": random.randint(40, 80),
                        "correct_long": random.randint(20, 50),
                        "correct_neutral": random.randint(80, 150),
                        "correct_short": random.randint(20, 50)
                    }
                    
                    # L∆∞u k·∫øt qu·∫£
                    st.session_state.backtest_results[backtest_key] = {
                        "config": backtest_config,
                        "accuracy": accuracy,
                        "total_trades": total_trades,
                        "profitable_trades": profitable_trades,
                        "average_profit": average_profit,
                        "average_loss": average_loss,
                        "max_drawdown": max_drawdown,
                        "trades": fake_trades,
                        "confusion_matrix": confusion_matrix,
                        "run_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }
                    
                    st.success(f"ƒê√£ ho√†n th√†nh backtest cho kho·∫£ng th·ªùi gian t·ª´ {start_date} ƒë·∫øn {end_date}")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ backtest n·∫øu c√≥
        if 'backtest_results' in st.session_state and st.session_state.backtest_results:
            st.subheader("K·∫øt qu·∫£ Backtest")
            
            # T·∫°o c√°c tab cho c√°c k·∫øt qu·∫£ backtest kh√°c nhau n·∫øu c√≥ nhi·ªÅu h∆°n 1
            result_keys = list(st.session_state.backtest_results.keys())
            
            if len(result_keys) > 1:
                # Hi·ªÉn th·ªã selector cho nhi·ªÅu k·∫øt qu·∫£ backtest
                selected_result = st.selectbox(
                    "Ch·ªçn k·∫øt qu·∫£ backtest ƒë·ªÉ xem chi ti·∫øt",
                    options=result_keys,
                    format_func=lambda x: f"{st.session_state.backtest_results[x]['config']['timeframe']} ({st.session_state.backtest_results[x]['config']['prediction_horizon']}) "
                                         f"[{st.session_state.backtest_results[x]['config']['start_date']} - "
                                         f"{st.session_state.backtest_results[x]['config']['end_date']}]"
                )
                result = st.session_state.backtest_results[selected_result]
            else:
                # Ch·ªâ c√≥ m·ªôt k·∫øt qu·∫£
                result = st.session_state.backtest_results[result_keys[0]]
            
            # Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
            st.markdown("### T·ªïng quan hi·ªáu su·∫•t")
            
            # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ch√≠nh
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("ƒê·ªô ch√≠nh x√°c", f"{result['accuracy']:.2%}")
            with col2:
                st.metric("T·ªïng s·ªë giao d·ªãch", f"{result['total_trades']}")
            with col3:
                win_rate = result['profitable_trades'] / result['total_trades']
                st.metric("T·ª∑ l·ªá th·∫Øng", f"{win_rate:.2%}")
            with col4:
                st.metric("Drawdown t·ªëi ƒëa", f"{result['max_drawdown']:.2%}")
            
            st.markdown("---")
            
            # T·∫°o c√°c tab kh√°c nhau cho k·∫øt qu·∫£ chi ti·∫øt
            backtest_tabs = st.tabs(["Hi·ªáu su·∫•t", "Giao d·ªãch", "Ma tr·∫≠n nh·∫ßm l·∫´n", "Th·ªëng k√™"])
            
            with backtest_tabs[0]:
                # Tab hi·ªáu su·∫•t v·ªõi bi·ªÉu ƒë·ªì
                st.subheader("Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t")
                
                # T·∫°o danh s√°ch l·ª£i nhu·∫≠n t√≠ch l≈©y
                trades = result["trades"]
                cumulative_pnl = [0]
                dates = []
                
                for trade in trades:
                    cumulative_pnl.append(cumulative_pnl[-1] + trade["pnl"])
                    dates.append(trade["time"])
                
                # T·∫°o bi·ªÉu ƒë·ªì hi·ªáu su·∫•t
                fig = go.Figure()
                
                # Th√™m ƒë∆∞·ªùng l·ª£i nhu·∫≠n t√≠ch l≈©y
                fig.add_trace(go.Scatter(
                    x=dates, 
                    y=cumulative_pnl[1:],
                    mode='lines',
                    name='L·ª£i nhu·∫≠n t√≠ch l≈©y',
                    line=dict(color='blue', width=2)
                ))
                
                # ƒê·ªãnh d·∫°ng bi·ªÉu ƒë·ªì
                fig.update_layout(
                    title='L·ª£i nhu·∫≠n t√≠ch l≈©y theo th·ªùi gian',
                    xaxis_title='Th·ªùi gian',
                    yaxis_title='L·ª£i nhu·∫≠n t√≠ch l≈©y ($)',
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            with backtest_tabs[1]:
                # Tab giao d·ªãch v·ªõi danh s√°ch chi ti·∫øt
                st.subheader("Danh s√°ch giao d·ªãch")
                
                # Chuy·ªÉn danh s√°ch giao d·ªãch th√†nh DataFrame
                trades_df = pd.DataFrame(result["trades"])
                
                # Th√™m ƒë·ªãnh d·∫°ng m√†u s·∫Øc d·ª±a tr√™n k·∫øt qu·∫£
                def highlight_win_loss(s):
                    if s.name == 'result':
                        return ['background-color: #CCFFCC' if x == 'WIN' else 'background-color: #FFCCCC' for x in s]
                    elif s.name == 'pnl':
                        return ['color: green' if x > 0 else 'color: red' for x in s]
                    return [''] * len(s)
                
                # Hi·ªÉn th·ªã DataFrame v·ªõi ƒë·ªãnh d·∫°ng
                st.dataframe(trades_df.style.apply(highlight_win_loss), use_container_width=True)
            
            with backtest_tabs[2]:
                # Tab ma tr·∫≠n nh·∫ßm l·∫´n
                st.subheader("Ma tr·∫≠n nh·∫ßm l·∫´n")
                
                # T·∫°o ma tr·∫≠n nh·∫ßm l·∫´n
                cm = result["confusion_matrix"]
                
                # T√≠nh to√°n c√°c gi√° tr·ªã
                true_long = cm["true_long"]
                true_neutral = cm["true_neutral"]
                true_short = cm["true_short"]
                pred_long = cm["pred_long"]
                pred_neutral = cm["pred_neutral"]
                pred_short = cm["pred_short"]
                correct_long = cm["correct_long"]
                correct_neutral = cm["correct_neutral"]
                correct_short = cm["correct_short"]
                
                # T·∫°o ma tr·∫≠n
                cm_matrix = [
                    [correct_long, pred_long - correct_long, true_long - correct_long],
                    [pred_neutral - correct_neutral, correct_neutral, true_neutral - correct_neutral],
                    [pred_short - correct_short, true_short - correct_short, correct_short]
                ]
                
                # T·∫°o bi·ªÉu ƒë·ªì ma tr·∫≠n nh·∫ßm l·∫´n
                fig = go.Figure(data=go.Heatmap(
                    z=cm_matrix,
                    x=['D·ª± ƒëo√°n LONG', 'D·ª± ƒëo√°n NEUTRAL', 'D·ª± ƒëo√°n SHORT'],
                    y=['Th·ª±c t·∫ø LONG', 'Th·ª±c t·∫ø NEUTRAL', 'Th·ª±c t·∫ø SHORT'],
                    colorscale='Viridis',
                    showscale=True
                ))
                
                fig.update_layout(
                    title='Ma tr·∫≠n nh·∫ßm l·∫´n',
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            with backtest_tabs[3]:
                # Tab th·ªëng k√™ chi ti·∫øt
                st.subheader("Th·ªëng k√™ chi ti·∫øt")
                
                # T√≠nh to√°n c√°c th·ªëng k√™
                profit_trades = [t for t in result["trades"] if t["pnl"] > 0]
                loss_trades = [t for t in result["trades"] if t["pnl"] <= 0]
                
                # T·∫°o b·∫£ng th·ªëng k√™
                stats = {
                    "S·ªë giao d·ªãch th·∫Øng": len(profit_trades),
                    "S·ªë giao d·ªãch thua": len(loss_trades),
                    "T·ª∑ l·ªá th·∫Øng": f"{len(profit_trades) / len(result['trades']):.2%}",
                    "L·ª£i nhu·∫≠n trung b√¨nh (giao d·ªãch th·∫Øng)": f"${sum([t['pnl'] for t in profit_trades]) / len(profit_trades):.2f}",
                    "Thua l·ªó trung b√¨nh (giao d·ªãch thua)": f"${sum([t['pnl'] for t in loss_trades]) / len(loss_trades):.2f}",
                    "T·ª∑ l·ªá l·ª£i nhu·∫≠n tr√™n r·ªßi ro": f"{abs(sum([t['pnl'] for t in profit_trades]) / sum([t['pnl'] for t in loss_trades])):.2f}",
                    "L·ª£i nhu·∫≠n t·ªïng c·ªông": f"${sum([t['pnl'] for t in result['trades']]):.2f}",
                    "Th·ªùi gian backtest": f"{result['config']['start_date']} ƒë·∫øn {result['config']['end_date']}",
                    "Khung th·ªùi gian": result['config']['timeframe'],
                    "Th·ªùi gian d·ª± ƒëo√°n": result['config']['prediction_horizon']
                }
                
                # Chuy·ªÉn th√†nh DataFrame ƒë·ªÉ hi·ªÉn th·ªã nh∆∞ng x·ª≠ l√Ω ri√™ng c√°c gi√° tr·ªã ph·∫ßn trƒÉm
                # ƒê·ªÉ tr√°nh l·ªói Arrow khi chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ph·∫ßn trƒÉm
                stats_list = list(stats.items())
                
                # Hi·ªÉn th·ªã d·ªØ li·ªáu b·∫±ng c√°ch s·ª≠ d·ª•ng b·∫£ng thay v√¨ DataFrame ƒë·ªÉ tr√°nh l·ªói chuy·ªÉn ƒë·ªïi ki·ªÉu
                st.table([
                    {"Ch·ªâ s·ªë": key, "Gi√° tr·ªã": value}
                    for key, value in stats_list
                ])

elif st.session_state.selected_tab == "System Status":
    st.title("Tr·∫°ng th√°i H·ªá th·ªëng")
    
    # Force ki·ªÉm tra tr·∫°ng th√°i hu·∫•n luy·ªán t·ª´ continuous_trainer
    if 'continuous_trainer' in st.session_state and st.session_state.continuous_trainer is not None:
        training_status = st.session_state.continuous_trainer.get_training_status()
        
        # C·∫≠p nh·∫≠t bi·∫øn trong session state d·ª±a tr√™n tr·∫°ng th√°i th·ª±c t·∫ø
        if 'last_training_time' in training_status and training_status['last_training_time']:
            st.session_state.historical_data_ready = True
            st.session_state.model_trained = True
        else:
            st.session_state.historical_data_ready = False
            st.session_state.model_trained = False
    
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc")
    else:
        # Th√™m n√∫t l√†m m·ªõi (refresh) tr·∫°ng th√°i
        if st.button("üîÑ L√†m m·ªõi tr·∫°ng th√°i", key="refresh_status_button"):
            # Force c·∫≠p nh·∫≠t tr·∫°ng th√°i tr∆∞·ªõc khi hi·ªÉn th·ªã
            if 'continuous_trainer' in st.session_state and st.session_state.continuous_trainer is not None:
                training_status = st.session_state.continuous_trainer.get_training_status()
                if 'last_training_time' in training_status and training_status['last_training_time']:
                    st.session_state.historical_data_ready = True
                    st.session_state.model_trained = True
                else:
                    st.session_state.historical_data_ready = False
                    st.session_state.model_trained = False
            st.rerun()
            
        # Use columns for better layout
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Display system status
            display_system_status(
                data_status=st.session_state.data_fetch_status,
                thread_status=st.session_state.thread_running, 
                prediction_count=len(st.session_state.predictions)
            )
            
            # Activity Logs
            st.write("### Activity Logs")
            if 'log_messages' in st.session_state and st.session_state.log_messages:
                # Create a scrollable log area with fixed height
                log_container = st.container()
                with log_container:
                    st.markdown("""
                    <style>
                    .log-container {
                        height: 300px;
                        overflow-y: auto;
                        background-color: #f0f0f0;
                        padding: 10px;
                        border-radius: 5px;
                        font-family: monospace;
                    }
                    </style>
                    <div class="log-container">
                    """ + "<br>".join(st.session_state.log_messages[-50:]) + """
                    </div>
                    """, unsafe_allow_html=True)
                
                # Add clear logs button
                if st.button("Clear Logs"):
                    st.session_state.log_messages = []
                    st.rerun()
            else:
                st.info("No activity logs available. Perform actions to generate logs.")
        
        with col2:
            # Data source information
            st.write("### Data Source")
            if 'data_source' in st.session_state:
                source_color = "green" if st.session_state.data_source == "Binance API (Real Data)" else "orange"
                st.markdown(f"**Current Source:** :{source_color}[{st.session_state.data_source}]")
            else:
                st.info("Data source not initialized")
            
            # API status
            st.write("### API Connection Status")
            try:
                # S·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·ª´ Binance API
                st.success("Using real data from Binance API")
                
                # Check if we have API status information
                if hasattr(st.session_state, 'api_status'):
                        # If we tried to connect to the API but failed
                        if 'error' in st.session_state.api_status and st.session_state.api_status['error']:
                            st.error(f"API Connection Error: {st.session_state.api_status['message']}")
                            
                            # Check for geographic restrictions
                            if "Geographic restriction" in st.session_state.api_status.get('error', ''):
                                st.warning("‚ö†Ô∏è Binance has geographic restrictions in your region")
                                st.info("Consider using a VPN service to access Binance API from supported regions")
                            
                            # Show more details in an expander
                            with st.expander("API Connection Details"):
                                st.write("**Error Type:**", st.session_state.api_status.get('error', 'Unknown'))
                                st.write("**Last Check:**", st.session_state.api_status.get('last_check', 'Unknown'))
                        else:
                            st.info("The system is using Binance API")

                else:
                    # We're using real Binance API
                    # Test connection to Binance
                    api_status = "Connected" if hasattr(st.session_state.data_collector, 'client') and st.session_state.data_collector.client else "Not Connected"
                    st.success(f"Binance API: {api_status}")
                    
                    # Display API connection details
                    with st.expander("API Connection Details"):
                        st.write("**API Key:** ", "‚úì Configured" if config.BINANCE_API_KEY else "‚ùå Missing")
                        st.write("**API Secret:** ", "‚úì Configured" if config.BINANCE_API_SECRET else "‚ùå Missing")
                        st.write("**Last Check:** ", st.session_state.api_status.get('last_check', 'Unknown'))
            except Exception as e:
                st.error(f"Error checking API status: {e}")
            
            # Quick actions
            st.write("### Quick Actions")
            if st.button("Fetch Latest Data", key="fetch_latest_btn"):
                with st.spinner("Fetching..."):
                    fetch_data()
                    st.success("Data fetched successfully!")
            
            if st.button("Make New Prediction", key="new_pred_btn"):
                with st.spinner("Generating prediction..."):
                    make_prediction()
                    st.success("New prediction generated!")
        
        # Data preview (full width)
        if st.session_state.latest_data is not None:
            with st.expander("Preview Latest Data"):
                st.dataframe(st.session_state.latest_data.tail(10), use_container_width=True)
        
        # Configuration parameters
        with st.expander("System Configuration"):
            # Display key configuration parameters
            st.json({
                "Symbol": config.SYMBOL,
                "Primary Timeframe": config.TIMEFRAMES["primary"],
                "Secondary Timeframes": config.TIMEFRAMES["secondary"],
                "Update Interval": f"{config.UPDATE_INTERVAL} seconds",
                "Prediction Window": f"{config.PREDICTION_WINDOW} candles",
                "Sequence Length": config.SEQUENCE_LENGTH,
                "Price Movement Threshold": f"{config.PRICE_MOVEMENT_THRESHOLD * 100}%",
                "Target PNL Threshold": f"${config.TARGET_PNL_THRESHOLD}",
                "Confidence Threshold": config.CONFIDENCE_THRESHOLD,
                "Prediction Validity": f"{config.VALIDITY_MINUTES} minutes"
            })
        
        # Model information
        with st.expander("Model Information"):
            if st.session_state.model_trained:
                st.success("All models are trained and ready")
                st.write("Model versions and paths:")
                st.code(f"Models directory: {config.MODEL_DIR}\nVersion: {config.MODEL_VERSION}")
            else:
                st.warning("Models are not trained yet")

elif st.session_state.selected_tab == "Trading":
    st.title("üí∞ Giao d·ªãch t·ª± ƒë·ªông v·ªõi ETHUSDT")
    
    if not st.session_state.initialized:
        st.warning("Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc khi s·ª≠ d·ª•ng ch·ª©c nƒÉng giao d·ªãch")
        if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng"):
            initialize_system()
            st.rerun()
    else:
        st.write("Thi·∫øt l·∫≠p giao d·ªãch t·ª± ƒë·ªông d·ª±a tr√™n d·ª± ƒëo√°n AI")
        
        # N·∫øu kh√¥ng c√≥ d·ª± ƒëo√°n, c·∫ßn t·∫°o d·ª± ƒëo√°n
        if not st.session_state.predictions:
            with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n ban ƒë·∫ßu..."):
                prediction = make_prediction()
        else:
            prediction = st.session_state.predictions[-1]
        
        # Hi·ªÉn th·ªã th√¥ng tin d·ª± ƒëo√°n hi·ªán t·∫°i
        with st.container():
            st.subheader("D·ª± ƒëo√°n hi·ªán t·∫°i")
            display_current_prediction(prediction)
        
        # Ph·∫ßn nh·∫≠p API Binance
        with st.expander("üîë C√†i ƒë·∫∑t API Binance", expanded=True):
            api_key = st.text_input("API Key Binance", value=st.session_state.trading_settings["api_key"], 
                                 type="password", key="api_key_input", 
                                 help="API Key ƒë∆∞·ª£c t·∫°o t·ª´ t√†i kho·∫£n Binance c·ªßa b·∫°n")
            
            api_secret = st.text_input("API Secret Binance", value=st.session_state.trading_settings["api_secret"], 
                                   type="password", key="api_secret_input",
                                   help="API Secret ƒë∆∞·ª£c t·∫°o t·ª´ t√†i kho·∫£n Binance c·ªßa b·∫°n")
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                if st.button("üíæ L∆∞u API Keys", use_container_width=True):
                    st.session_state.trading_settings["api_key"] = api_key
                    st.session_state.trading_settings["api_secret"] = api_secret
                    # L∆∞u tr·∫°ng th√°i giao d·ªãch ƒë·ªÉ kh√¥i ph·ª•c khi F5
                    save_trading_state()
                    st.success("ƒê√£ l∆∞u API Keys")
            
            with col2:
                if st.button("üîÑ Ki·ªÉm tra k·∫øt n·ªëi", use_container_width=True):
                    if not api_key or not api_secret:
                        st.error("Vui l√≤ng nh·∫≠p API Key v√† API Secret")
                    else:
                        with st.spinner("ƒêang ki·ªÉm tra k·∫øt n·ªëi..."):
                            if not hasattr(st.session_state, "trading_manager") or st.session_state.trading_manager is None:
                                st.session_state.trading_manager = TradingManager()
                            
                            # K·∫øt n·ªëi v·ªõi API
                            result = st.session_state.trading_manager.connect(api_key, api_secret)
                            if result:
                                st.success("K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Binance API")
                                
                                # L·∫•y s·ªë d∆∞
                                balance = st.session_state.trading_manager.get_futures_account_balance()
                                if balance is not None:
                                    st.info(f"S·ªë d∆∞ t√†i kho·∫£n Futures: {balance:.2f} USDT")
                            else:
                                st.error("K·∫øt n·ªëi th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i API keys")
        
        # Ph·∫ßn c√†i ƒë·∫∑t Take Profit v√† Stop Loss
        with st.expander("üíµ C√†i ƒë·∫∑t TP/SL", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Take Profit (TP)")
                tp_type = st.radio("Lo·∫°i TP", ["Ph·∫ßn trƒÉm (%)", "USDT"], 
                               index=0 if st.session_state.trading_settings["take_profit_type"] == "percent" else 1,
                               key="tp_type")
                
                tp_value = st.number_input("Gi√° tr·ªã TP", 
                                      min_value=0.1, max_value=100.0 if tp_type == "Ph·∫ßn trƒÉm (%)" else 1000.0,
                                      value=float(st.session_state.trading_settings["take_profit_value"]),
                                      step=0.1, key="tp_value")
            
            with col2:
                st.subheader("Stop Loss (SL)")
                sl_type = st.radio("Lo·∫°i SL", ["Ph·∫ßn trƒÉm (%)", "USDT"], 
                               index=0 if st.session_state.trading_settings["stop_loss_type"] == "percent" else 1,
                               key="sl_type")
                
                sl_value = st.number_input("Gi√° tr·ªã SL", 
                                      min_value=0.1, max_value=100.0 if sl_type == "Ph·∫ßn trƒÉm (%)" else 1000.0,
                                      value=float(st.session_state.trading_settings["stop_loss_value"]),
                                      step=0.1, key="sl_value")
            
            # L∆∞u c√°c thi·∫øt l·∫≠p TP/SL
            if st.button("üíæ L∆∞u c√†i ƒë·∫∑t TP/SL", use_container_width=True):
                st.session_state.trading_settings["take_profit_type"] = "percent" if tp_type == "Ph·∫ßn trƒÉm (%)" else "usdt"
                st.session_state.trading_settings["take_profit_value"] = tp_value
                st.session_state.trading_settings["stop_loss_type"] = "percent" if sl_type == "Ph·∫ßn trƒÉm (%)" else "usdt"
                st.session_state.trading_settings["stop_loss_value"] = sl_value
                # L∆∞u tr·∫°ng th√°i giao d·ªãch ƒë·ªÉ kh√¥i ph·ª•c khi F5
                save_trading_state()
                st.success("ƒê√£ l∆∞u c√†i ƒë·∫∑t TP/SL")
        
        # Ph·∫ßn c√†i ƒë·∫∑t v·ªën v√† ƒë√≤n b·∫©y
        with st.expander("üìä C√†i ƒë·∫∑t v·ªën v√† ƒë√≤n b·∫©y", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                account_percent = st.slider("Ph·∫ßn trƒÉm t√†i kho·∫£n s·ª≠ d·ª•ng (%)", 
                                       min_value=1.0, max_value=100.0, 
                                       value=float(st.session_state.trading_settings["account_percent"]),
                                       step=1.0, key="account_percent")
                
                st.caption("Ph·∫ßn trƒÉm s·ªë d∆∞ t√†i kho·∫£n Futures s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng cho m·ªói giao d·ªãch")
            
            with col2:
                leverage_options = [1, 2, 3, 5, 10, 20, 50, 75, 100, 125]
                default_index = leverage_options.index(st.session_state.trading_settings["leverage"]) if st.session_state.trading_settings["leverage"] in leverage_options else 2
                
                leverage = st.select_slider("ƒê√≤n b·∫©y", 
                                      options=leverage_options,
                                      value=leverage_options[default_index], 
                                      key="leverage")
                
                st.caption("ƒê√≤n b·∫©y s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng cho giao d·ªãch. C·∫©n th·∫≠n v·ªõi ƒë√≤n b·∫©y cao!")
            
            # ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu ƒë·ªÉ v√†o l·ªánh
            min_confidence = st.slider("ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu ƒë·ªÉ v√†o l·ªánh (%)", 
                                  min_value=50.0, max_value=99.0, 
                                  value=float(st.session_state.trading_settings["min_confidence"]),
                                  step=1.0, key="min_confidence")
            
            st.caption("Ch·ªâ v√†o l·ªánh khi ƒë·ªô tin c·∫≠y c·ªßa d·ª± ƒëo√°n v∆∞·ª£t qu√° ng∆∞·ª°ng n√†y")
            
            # Bi·∫øn ƒë·ªông gi√° t·ªëi thi·ªÉu ƒë·ªÉ v√†o l·ªánh
            if "min_price_movement" not in st.session_state.trading_settings:
                st.session_state.trading_settings["min_price_movement"] = config.TRADING_SETTINGS["default_min_price_movement"]
            
            min_price_movement = st.number_input(
                "Bi·∫øn ƒë·ªông gi√° d·ª± ƒëo√°n t·ªëi thi·ªÉu (USDT)",
                min_value=0.0,
                max_value=50.0,
                value=float(st.session_state.trading_settings.get("min_price_movement", config.TRADING_SETTINGS["default_min_price_movement"])),
                step=0.5,
                key="min_price_movement",
                help="Ch·ªâ v√†o l·ªánh khi ch√™nh l·ªách gi·ªØa gi√° hi·ªán t·∫°i v√† gi√° d·ª± ƒëo√°n v∆∞·ª£t qu√° ng∆∞·ª°ng n√†y. ƒê·∫∑t 0 ƒë·ªÉ b·ªè qua ƒëi·ªÅu ki·ªán n√†y."
            )
            
            st.caption("Gi√° tr·ªã 0 = giao d·ªãch kh√¥ng ph·ª• thu·ªôc v√†o bi·∫øn ƒë·ªông gi√°. Gi√° tr·ªã 6 = ch·ªâ giao d·ªãch khi ch√™nh l·ªách gi·ªØa gi√° hi·ªán t·∫°i v√† gi√° d·ª± ƒëo√°n > 6 USDT.")
            
            # L∆∞u c√°c thi·∫øt l·∫≠p v·ªën v√† ƒë√≤n b·∫©y
            if st.button("üíæ L∆∞u c√†i ƒë·∫∑t v·ªën v√† ƒë√≤n b·∫©y", use_container_width=True):
                st.session_state.trading_settings["account_percent"] = account_percent
                st.session_state.trading_settings["leverage"] = leverage
                st.session_state.trading_settings["min_confidence"] = min_confidence
                st.session_state.trading_settings["min_price_movement"] = min_price_movement
                # L∆∞u tr·∫°ng th√°i giao d·ªãch ƒë·ªÉ kh√¥i ph·ª•c khi F5
                save_trading_state()
                st.success("ƒê√£ l∆∞u c√†i ƒë·∫∑t v·ªën v√† ƒë√≤n b·∫©y")
        
        # Hi·ªÉn th·ªã th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i n·∫øu c√≥
        if hasattr(st.session_state, "trading_manager") and st.session_state.trading_manager is not None:
            with st.container():
                st.subheader("Th√¥ng tin v·ªã th·∫ø hi·ªán t·∫°i")
                
                # L·∫•y th√¥ng tin v·ªã th·∫ø n·∫øu ƒë√£ k·∫øt n·ªëi API
                if st.session_state.trading_manager.client is not None:
                    with st.spinner("ƒêang t·∫£i th√¥ng tin v·ªã th·∫ø..."):
                        pnl_info = st.session_state.trading_manager.get_position_pnl()
                        
                        if pnl_info is not None:
                            if pnl_info.get("has_position", False):
                                # Hi·ªÉn th·ªã th√¥ng tin v·ªã th·∫ø
                                position_details = f"""
                                - **Symbol**: {pnl_info.get('symbol', 'N/A')}
                                - **Kh·ªëi l∆∞·ª£ng**: {pnl_info.get('position_amount', 0)}
                                - **Gi√° v√†o l·ªánh**: {pnl_info.get('entry_price', 0):.2f} USDT
                                - **Gi√° hi·ªán t·∫°i**: {pnl_info.get('current_price', 0):.2f} USDT
                                - **ƒê√≤n b·∫©y**: {pnl_info.get('leverage', 1)}x
                                - **L·ª£i nhu·∫≠n**: {pnl_info.get('pnl', 0):.2f} USDT ({pnl_info.get('pnl_percent', 0):.2f}%)
                                - **Gi√° thanh l√Ω**: {pnl_info.get('liquidation_price', 'N/A')}
                                """
                                
                                # Hi·ªÉn th·ªã PNL v·ªõi m√†u s·∫Øc d·ª±a tr√™n gi√° tr·ªã
                                pnl_value = pnl_info.get('pnl', 0)
                                pnl_percent = pnl_info.get('pnl_percent', 0)
                                
                                if pnl_value > 0:
                                    st.markdown(f"### üí∞ L·ª£i nhu·∫≠n: +{pnl_value:.2f} USDT (+{pnl_percent:.2f}%)")
                                    st.success(position_details)
                                elif pnl_value < 0:
                                    st.markdown(f"### üìâ L·ªó: {pnl_value:.2f} USDT ({pnl_percent:.2f}%)")
                                    st.error(position_details)
                                else:
                                    st.markdown(f"### ‚öñÔ∏è V·ªã th·∫ø: {pnl_value:.2f} USDT ({pnl_percent:.2f}%)")
                                    st.info(position_details)
                                
                                # N√∫t ƒë√≥ng v·ªã th·∫ø
                                if st.button("üì§ ƒê√≥ng v·ªã th·∫ø", type="primary"):
                                    with st.spinner("ƒêang ƒë√≥ng v·ªã th·∫ø..."):
                                        result = st.session_state.trading_manager.close_position()
                                        if result:
                                            # L∆∞u tr·∫°ng th√°i giao d·ªãch ƒë·ªÉ kh√¥i ph·ª•c khi F5
                                            save_trading_state()
                                            st.success("ƒê√£ ƒë√≥ng v·ªã th·∫ø th√†nh c√¥ng")
                                            st.rerun()
                                        else:
                                            st.error("Kh√¥ng th·ªÉ ƒë√≥ng v·ªã th·∫ø. Ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
                            else:
                                st.info("Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü")
                        else:
                            st.warning("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªã th·∫ø. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi API.")
                else:
                    st.warning("Vui l√≤ng k·∫øt n·ªëi API Binance ƒë·ªÉ xem th√¥ng tin v·ªã th·∫ø")
        
        # Ph·∫ßn b·∫Øt ƒë·∫ßu giao d·ªãch t·ª± ƒë·ªông
        with st.container():
            st.subheader("B·∫Øt ƒë·∫ßu giao d·ªãch t·ª± ƒë·ªông")
            
            # Ki·ªÉm tra xem ƒë√£ c√≥ API keys v√† c√°c thi·∫øt l·∫≠p c·∫ßn thi·∫øt ch∆∞a
            can_start_trading = (st.session_state.trading_settings["api_key"] and 
                               st.session_state.trading_settings["api_secret"] and
                               hasattr(st.session_state, "trading_manager") and 
                               st.session_state.trading_manager is not None and
                               st.session_state.trading_manager.client is not None)
            
            if not can_start_trading:
                st.warning("Vui l√≤ng c·∫•u h√¨nh API Binance v√† ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu giao d·ªãch")
            
            # Hi·ªÉn th·ªã t√πy ch·ªçn khung th·ªùi gian
            available_timeframes = config.TRADING_SETTINGS["available_timeframes"]
            selected_timeframe = st.radio(
                "‚è±Ô∏è Ch·ªçn khung th·ªùi gian giao d·ªãch:",
                available_timeframes,
                index=available_timeframes.index(config.TRADING_SETTINGS["default_timeframe"]),
                horizontal=True,
                help="Khung th·ªùi gian s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng cho vi·ªác d·ª± ƒëo√°n v√† giao d·ªãch"
            )
            
            st.caption("""
            - Khung 1m: Giao d·ªãch ng·∫Øn h·∫°n, nh·∫°y v·ªõi bi·∫øn ƒë·ªông gi√°, ph√π h·ª£p cho scalping
            - Khung 5m: Giao d·ªãch trung h·∫°n, ·ªïn ƒë·ªãnh h∆°n, gi·∫£m t√≠n hi·ªáu gi·∫£, ph√π h·ª£p swing trade
            """)
            
            col1, col2 = st.columns(2)
            
            with col1:
                start_button = st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu giao d·ªãch t·ª± ƒë·ªông", 
                                    use_container_width=True, 
                                    disabled=not can_start_trading or st.session_state.trading_settings.get("is_trading", False),
                                    type="primary" if not st.session_state.trading_settings.get("is_trading", False) else "secondary")
            
            with col2:
                stop_button = st.button("‚èπÔ∏è D·ª´ng giao d·ªãch t·ª± ƒë·ªông", 
                                   use_container_width=True,
                                   disabled=not st.session_state.trading_settings.get("is_trading", False),
                                   type="primary" if st.session_state.trading_settings.get("is_trading", False) else "secondary")
            
            # X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t b·∫Øt ƒë·∫ßu
            if start_button and can_start_trading:
                # Thi·∫øt l·∫≠p c·∫•u h√¨nh giao d·ªãch
                trading_config = {
                    "symbol": st.session_state.trading_settings["symbol"],
                    "take_profit_type": st.session_state.trading_settings["take_profit_type"],
                    "take_profit_value": st.session_state.trading_settings["take_profit_value"],
                    "stop_loss_type": st.session_state.trading_settings["stop_loss_type"],
                    "stop_loss_value": st.session_state.trading_settings["stop_loss_value"],
                    "account_percent": st.session_state.trading_settings["account_percent"],
                    "leverage": st.session_state.trading_settings["leverage"],
                    "min_confidence": st.session_state.trading_settings["min_confidence"] / 100.0,
                    "min_price_movement": st.session_state.trading_settings.get("min_price_movement", config.TRADING_SETTINGS["default_min_price_movement"]),
                    "timeframe": selected_timeframe,
                }
                
                # Ki·ªÉm tra l·∫°i k·∫øt n·ªëi
                if not st.session_state.trading_manager.client:
                    st.session_state.trading_manager.connect(
                        st.session_state.trading_settings["api_key"],
                        st.session_state.trading_settings["api_secret"]
                    )
                
                # B·∫Øt ƒë·∫ßu bot giao d·ªãch
                result = st.session_state.trading_manager.start_trading_bot(
                    trading_config, st.session_state.prediction_engine
                )
                
                if result:
                    st.session_state.trading_settings["is_trading"] = True
                    # L∆∞u tr·∫°ng th√°i giao d·ªãch ƒë·ªÉ kh√¥i ph·ª•c khi F5
                    save_trading_state()
                    st.success("Bot giao d·ªãch t·ª± ƒë·ªông ƒë√£ b·∫Øt ƒë·∫ßu")
                    st.rerun()
                else:
                    st.error("Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu bot giao d·ªãch. Ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
            
            # X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t d·ª´ng
            if stop_button and st.session_state.trading_settings.get("is_trading", False):
                if hasattr(st.session_state, "trading_manager") and st.session_state.trading_manager is not None:
                    result = st.session_state.trading_manager.stop_trading_bot()
                    if result:
                        st.session_state.trading_settings["is_trading"] = False
                        # L∆∞u tr·∫°ng th√°i giao d·ªãch ƒë·ªÉ kh√¥i ph·ª•c khi F5
                        save_trading_state()
                        st.success("Bot giao d·ªãch t·ª± ƒë·ªông ƒë√£ d·ª´ng")
                        st.rerun()
                    else:
                        st.error("Kh√¥ng th·ªÉ d·ª´ng bot giao d·ªãch. Ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i giao d·ªãch
            if st.session_state.trading_settings.get("is_trading", False):
                # L·∫•y th√¥ng tin khung th·ªùi gian ƒëang s·ª≠ d·ª•ng (n·∫øu c√≥)
                current_timeframe = "N/A"
                if hasattr(st.session_state.trading_manager, "trading_config") and st.session_state.trading_manager.trading_config:
                    current_timeframe = st.session_state.trading_manager.trading_config.get("timeframe", "N/A")
                
                st.markdown(f"### ‚úÖ Tr·∫°ng th√°i: Bot giao d·ªãch ƒëang ho·∫°t ƒë·ªông (khung {current_timeframe})")
                
                if hasattr(st.session_state, "trading_manager") and st.session_state.trading_manager is not None:
                    # Hi·ªÉn th·ªã th·ªëng k√™ PNL theo ng√†y (m√∫i gi·ªù +7)
                    if hasattr(st.session_state.trading_manager, "get_daily_pnl_summary"):
                        st.subheader("üìä Th·ªëng k√™ PNL theo ng√†y (UTC+7)")
                        
                        # L·∫•y th√¥ng tin PNL theo ng√†y
                        daily_pnl = st.session_state.trading_manager.get_daily_pnl_summary()
                        
                        if daily_pnl:
                            # T·∫°o c√°c metrics hi·ªÉn th·ªã
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                pnl_value = daily_pnl.get('total_pnl', 0)
                                if pnl_value > 0:
                                    st.metric("T·ªïng PNL", f"+{pnl_value:.2f} USDT", delta=f"+{pnl_value:.2f}", delta_color="normal")
                                else:
                                    st.metric("T·ªïng PNL", f"{pnl_value:.2f} USDT", delta=f"{pnl_value:.2f}", delta_color="normal")
                            
                            with col2:
                                win_count = daily_pnl.get('win_count', 0)
                                loss_count = daily_pnl.get('loss_count', 0)
                                total_trades = win_count + loss_count
                                st.metric("S·ªë l·ªánh", f"{total_trades}", help="T·ªïng s·ªë l·ªánh ƒë√£ th·ª±c hi·ªán trong ng√†y")
                            
                            with col3:
                                win_rate = daily_pnl.get('win_rate', 0)
                                st.metric("T·ª∑ l·ªá th·∫Øng", f"{win_rate:.1f}%", help="T·ª∑ l·ªá l·ªánh l√£i tr√™n t·ªïng s·ªë l·ªánh")
                            
                            with col4:
                                current_date = daily_pnl.get('date', 'N/A')
                                st.metric("Ng√†y", f"{current_date}", help="Ng√†y hi·ªán t·∫°i (UTC+7)")
                            
                            # Hi·ªÉn th·ªã danh s√°ch c√°c giao d·ªãch trong ng√†y
                            if 'trades' in daily_pnl and daily_pnl['trades']:
                                st.subheader("C√°c giao d·ªãch trong ng√†y")
                                
                                # T·∫°o DataFrame t·ª´ danh s√°ch giao d·ªãch
                                import pandas as pd
                                trades_data = daily_pnl['trades']
                                trades_df = pd.DataFrame(trades_data)
                                
                                # Format DataFrame
                                if len(trades_df) > 0:
                                    if 'time' in trades_df.columns:
                                        trades_df = trades_df[['time', 'symbol', 'side', 'pnl', 'pnl_percent']]
                                        trades_df.columns = ['Th·ªùi gian', 'Symbol', 'H∆∞·ªõng', 'PNL (USDT)', 'PNL (%)']
                                        
                                        # ƒê·ªãnh d·∫°ng c√°c c·ªôt s·ªë
                                        trades_df['PNL (USDT)'] = trades_df['PNL (USDT)'].map('{:.2f}'.format)
                                        trades_df['PNL (%)'] = trades_df['PNL (%)'].map('{:.2f}%'.format)
                                        
                                        # ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ hi·ªÉn th·ªã m·ªõi nh·∫•t l√™n ƒë·∫ßu
                                        trades_df = trades_df.iloc[::-1].reset_index(drop=True)
                                        
                                        # Hi·ªÉn th·ªã b·∫£ng v·ªõi m√†u s·∫Øc
                                        def highlight_pnl(val):
                                            try:
                                                # X√°c ƒë·ªãnh xem PNL d∆∞∆°ng hay √¢m
                                                value = float(val.replace('%', ''))
                                                if value > 0:
                                                    return 'background-color: rgba(0, 255, 0, 0.2)'
                                                elif value < 0:
                                                    return 'background-color: rgba(255, 0, 0, 0.2)'
                                                else:
                                                    return ''
                                            except:
                                                return ''
                                                
                                        # √Åp d·ª•ng ƒë·ªãnh d·∫°ng c√≥ ƒëi·ªÅu ki·ªán
                                        styled_df = trades_df.style.applymap(highlight_pnl, subset=['PNL (%)'])
                                        st.dataframe(styled_df, use_container_width=True)
                                    else:
                                        st.dataframe(trades_df, use_container_width=True)
                                else:
                                    st.info("Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th·ª±c hi·ªán trong ng√†y h√¥m nay")
                            else:
                                st.info("Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c th·ª±c hi·ªán trong ng√†y h√¥m nay")
                                
                    # Hi·ªÉn th·ªã c√°c logs giao d·ªãch
                    if hasattr(st.session_state.trading_manager, "trading_logs") and st.session_state.trading_manager.trading_logs:
                        st.subheader("üìù Nh·∫≠t k√Ω giao d·ªãch")
                        logs = st.session_state.trading_manager.trading_logs[-10:]  # Ch·ªâ hi·ªÉn th·ªã 10 logs g·∫ßn nh·∫•t
                        logs_reversed = logs[::-1]  # ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ hi·ªÉn th·ªã m·ªõi nh·∫•t tr∆∞·ªõc
                        
                        for log in logs_reversed:
                            timestamp = log.get("timestamp", "")
                            message = log.get("message", "")
                            level = log.get("level", "info")
                            
                            if level == "error":
                                st.error(f"{timestamp}: {message}")
                            elif level == "warning":
                                st.warning(f"{timestamp}: {message}")
                            else:
                                st.info(f"{timestamp}: {message}")
            else:
                st.markdown("### ‚è∏Ô∏è Tr·∫°ng th√°i: Bot giao d·ªãch ƒëang d·ª´ng")
        
        # Hi·ªÉn th·ªã l∆∞u √Ω quan tr·ªçng
        with st.expander("‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng", expanded=True):
            st.warning("""
            - Giao d·ªãch ti·ªÅn ƒëi·ªán t·ª≠ lu√¥n c√≥ r·ªßi ro cao, b·∫°n c√≥ th·ªÉ m·∫•t t·∫•t c·∫£ v·ªën ƒë·∫ßu t∆∞.
            - H·ªá th·ªëng AI d·ª± ƒëo√°n kh√¥ng b·∫£o ƒë·∫£m l·ª£i nhu·∫≠n v√† c√≥ th·ªÉ sai trong nhi·ªÅu tr∆∞·ªùng h·ª£p.
            - H√£y b·∫Øt ƒë·∫ßu v·ªõi s·ªë v·ªën nh·ªè khi s·ª≠ d·ª•ng t√≠nh nƒÉng giao d·ªãch t·ª± ƒë·ªông l·∫ßn ƒë·∫ßu.
            - Ki·ªÉm tra c·∫©n th·∫≠n c√°c thi·∫øt l·∫≠p TP/SL v√† ƒë√≤n b·∫©y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu.
            - Ch·ªâ s·ª≠ d·ª•ng ƒë√≤n b·∫©y cao n·∫øu b·∫°n hi·ªÉu r√µ r·ªßi ro li√™n quan.
            """)

elif st.session_state.selected_tab == "API Guide":
    st.title("REST API Documentation")
    
    st.write("""
    ## API Endpoints
    
    The prediction system provides a REST API for integrating with trading bots or other applications.
    
    ### Main Endpoint
    
    **Prediction Endpoint:** `/predict`
    
    This endpoint returns the latest prediction for the specified symbol and interval.
    
    **Parameters:**
    - `symbol` (optional): Trading symbol (default: ETHUSDT)
    - `interval` (optional): Candle interval (default: 5m)
    
    **Example Request:**
    ```
    GET /predict?symbol=ETHUSDT&interval=5m
    ```
    
    **Example Response:**
    ```json
    {
      "trend": "long",
      "confidence": 0.87,
      "price": 3415.72,
      "valid_for_minutes": 15,
      "reason": "LSTM+Meta agree; RSI=32; Bollinger Lower touched; historical match score: 0.93",
      "timestamp": "2023-05-15 14:30:45"
    }
    ```
    
    ### Response Fields
    
    - `trend`: Predicted trend direction ("long", "short", or "neutral")
    - `confidence`: Confidence score between 0 and 1
    - `price`: Current price at time of prediction
    - `target_price`: Predicted future price target
    - `valid_for_minutes`: How long the prediction is valid for
    - `reason`: Explanation of the prediction
    - `timestamp`: When the prediction was generated
    
    ### Server Information
    
    The API server runs on port 8000 by default.
    
    ### Usage with curl
    
    ```bash
    curl "http://localhost:8000/predict?symbol=ETHUSDT&interval=5m"
    ```
    """)
    
    st.info("The API server must be started separately by running `python api.py`")

# T·∫°o giao di·ªán ch√≠nh v·ªõi m√†u s·∫Øc v√† b·ªë c·ª•c ƒë·∫πp m·∫Øt
def render_main_interface():
    # √Åp d·ª•ng CSS t√πy ch·ªânh
    load_custom_css()
    
    # T·∫°o header ƒë·∫πp m·∫Øt b·∫±ng markdown tr·ª±c ti·∫øp
    st.markdown("# AI TRADING ORACLE")
    st.markdown("### H·ªá Th·ªëng D·ª± ƒêo√°n ETHUSDT T·ª± ƒê·ªông")
    
    # T·∫°o sidebar menu
    with st.sidebar:
        # T·∫°o ph·∫ßn header sidebar
        st.markdown("""
        <div style="text-align: center; margin-bottom: 20px;">
            <h3 style="color: #485ec4;">‚öôÔ∏è C√†i ƒë·∫∑t & ƒêi·ªÅu khi·ªÉn</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # T·∫°o c√°c tab trong sidebar
        sidebar_tabs = st.tabs(["üéõÔ∏è ƒêi·ªÅu khi·ªÉn", "üìä D·ªØ li·ªáu", "‚ö° M√¥ h√¨nh"])
        
        with sidebar_tabs[0]:
            # Control tab
            st.subheader("ƒêi·ªÅu khi·ªÉn h·ªá th·ªëng")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu", use_container_width=True):
                    with st.spinner("ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu..."):
                        fetch_data()
                        show_toast("ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu th√†nh c√¥ng!", "success")
            
            with col2:
                if st.button("üîÆ D·ª± ƒëo√°n ngay", use_container_width=True):
                    with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n..."):
                        make_prediction()
                        show_toast("ƒê√£ t·∫°o d·ª± ƒëo√°n m·ªõi!", "success")
            
            st.write("---")
            
            # Lu·ªìng c·∫≠p nh·∫≠t t·ª± ƒë·ªông
            st.subheader("C·∫≠p nh·∫≠t t·ª± ƒë·ªông")
            col1, col2 = st.columns(2)
            
            with col1:
                if st.session_state.thread_running:
                    if st.button("‚èπÔ∏è D·ª´ng c·∫≠p nh·∫≠t", use_container_width=True):
                        stop_update_thread()
                        show_toast("ƒê√£ d·ª´ng c·∫≠p nh·∫≠t t·ª± ƒë·ªông", "warning")
                else:
                    if st.button("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t", use_container_width=True):
                        start_update_thread()
                        show_toast("ƒê√£ b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t·ª± ƒë·ªông", "success")
            
            with col2:
                update_interval = st.selectbox(
                    "Chu k·ª≥ c·∫≠p nh·∫≠t",
                    options=[5, 10, 30, 60, 300],
                    index=1,
                    format_func=lambda x: f"{x} gi√¢y"
                )
                if 'update_interval' not in st.session_state or st.session_state.update_interval != update_interval:
                    st.session_state.update_interval = update_interval
            
            # Bi·ªÉu ƒë·ªì t·ª± ƒë·ªông c·∫≠p nh·∫≠t
            st.write("---")
            st.subheader("Bi·ªÉu ƒë·ªì")
            if "chart_auto_refresh" not in st.session_state:
                st.session_state.chart_auto_refresh = True
            st.checkbox("T·ª± ƒë·ªông c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì", value=st.session_state.chart_auto_refresh, key="chart_auto_refresh")
            
        with sidebar_tabs[1]:
            # Data tab
            st.subheader("Ngu·ªìn d·ªØ li·ªáu")
            
            data_source = "Binance API"
            
            data_source_color = "green" if data_source == "Binance API" else "orange"
            st.markdown(f"<div style='color: {data_source_color}; font-weight: bold;'>{data_source}</div>", unsafe_allow_html=True)
            
            if data_source == "Binance API":
                st.success("K·∫øt n·ªëi Binance API th√†nh c√¥ng")
            else:
                st.warning("ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m√¥ ph·ªèng")
            
            st.write("---")
            
            st.subheader("Kho·∫£ng th·ªùi gian")
            timeframe = st.selectbox(
                "Khung th·ªùi gian",
                options=["1m", "5m", "15m", "1h", "4h"],
                index=1,
                key="selected_timeframe"
            )
            
            # C·∫≠p nh·∫≠t thi·∫øt l·∫≠p khung th·ªùi gian
            if timeframe != st.session_state.prediction_settings.get("timeframe"):
                st.session_state.prediction_settings["timeframe"] = timeframe
                
            # Ch·ªçn kho·∫£ng th·ªùi gian bi·ªÉu ƒë·ªì
            chart_range = st.selectbox(
                "Kho·∫£ng th·ªùi gian hi·ªÉn th·ªã",
                options=["1 ng√†y", "3 ng√†y", "7 ng√†y", "14 ng√†y", "30 ng√†y"],
                index=1
            )
            
        with sidebar_tabs[2]:
            # Model tab
            st.subheader("Hu·∫•n luy·ªán AI")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üß† Hu·∫•n luy·ªán l·∫°i", use_container_width=True):
                    with st.spinner("ƒêang hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh..."):
                        train_models()
                        show_toast("ƒê√£ b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh!", "success")
            
            with col2:
                if st.button("üìã Xem nh·∫≠t k√Ω", use_container_width=True):
                    st.session_state.selected_tab = "Training Logs"
                    st.rerun()
            
            st.write("---")
            
            st.subheader("Thi·∫øt l·∫≠p d·ª± ƒëo√°n")
            
            # Ch·ªçn lo·∫°i m√¥ h√¨nh
            model_type = st.selectbox(
                "Ph∆∞∆°ng ph√°p d·ª± ƒëo√°n",
                options=["Ensemble (t·∫•t c·∫£)", "LSTM", "Transformer", "CNN", "Historical Matching"],
                index=0
            )
            
            # Ch·ªçn kho·∫£ng th·ªùi gian d·ª± ƒëo√°n
            prediction_horizon = st.selectbox(
                "Kho·∫£ng th·ªùi gian d·ª± ƒëo√°n",
                options=["10 ph√∫t", "15 ph√∫t", "30 ph√∫t", "1 gi·ªù", "4 gi·ªù"],
                index=2
            )
            
            # C·∫≠p nh·∫≠t thi·∫øt l·∫≠p d·ª± ƒëo√°n
            horizon_map = {"10 ph√∫t": 10, "15 ph√∫t": 15, "30 ph√∫t": 30, "1 gi·ªù": 60, "4 gi·ªù": 240}
            if horizon_map[prediction_horizon] != st.session_state.prediction_settings.get("horizon"):
                st.session_state.prediction_settings["horizon"] = horizon_map[prediction_horizon]
            
            st.write("---")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i m√¥ h√¨nh
            st.subheader("Tr·∫°ng th√°i m√¥ h√¨nh")
            
            if st.session_state.model_trained:
                st.success("M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán")
                
                if hasattr(st.session_state, 'continuous_trainer') and st.session_state.continuous_trainer:
                    training_status = st.session_state.continuous_trainer.get_training_status()
                    last_training = training_status.get('last_training_time', 'Ch∆∞a x√°c ƒë·ªãnh')
                    st.info(f"Hu·∫•n luy·ªán l·∫ßn cu·ªëi: {last_training}")
            else:
                st.error("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán")
                st.button("‚ö° Hu·∫•n luy·ªán ngay", on_click=train_models)
        
        # Ph·∫ßn footer c·ªßa sidebar
        st.write("---")
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i server
        if st.session_state.thread_running:
            st.markdown("""
            <div style="display: flex; align-items: center;">
                <div style="background-color: #28a745; width: 10px; height: 10px; border-radius: 50%; margin-right: 10px;"></div>
                <div>Server ƒëang ch·∫°y</div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="display: flex; align-items: center;">
                <div style="background-color: #ffc107; width: 10px; height: 10px; border-radius: 50%; margin-right: 10px;"></div>
                <div>Server ƒëang d·ª´ng</div>
            </div>
            """, unsafe_allow_html=True)
        
        # Th√¥ng tin v·ªÅ phi√™n b·∫£n
        st.caption("¬© 2025 AI Crypto Prediction | v2.0")

    # T·∫°o layout ch√≠nh
    main_tabs = st.tabs(["üìà Dashboard", "üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t", "ü§ñ API", "üìò H∆∞·ªõng d·∫´n"])
    
    with main_tabs[0]:
        # Dashboard tab
        if not st.session_state.initialized:
            st.warning("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng...")
            return
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i d·ªØ li·ªáu
        if st.session_state.latest_data is None:
            st.warning("ƒêang t·∫£i d·ªØ li·ªáu...")
            if st.button("T·∫£i d·ªØ li·ªáu"):
                fetch_data()
            return
        
        # DASHBOARD LAYOUT
        
        # Row 1: T·ªïng quan th·ªã tr∆∞·ªùng
        st.markdown("### T·ªïng quan th·ªã tr∆∞·ªùng")
        
        # L·∫•y d·ªØ li·ªáu g·∫ßn ƒë√¢y nh·∫•t
        latest_candle = st.session_state.latest_data.iloc[-1]
        prev_candle = st.session_state.latest_data.iloc[-2]
        
        # T√≠nh to√°n thay ƒë·ªïi gi√°
        price_change = latest_candle['close'] - prev_candle['close']
        price_change_pct = (price_change / prev_candle['close']) * 100
        
        # Row 1: Gi√° v√† th·ªëng k√™ t·ªïng quan
        col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
        
        with col1:
            # Hi·ªÉn th·ªã gi√° hi·ªán t·∫°i v·ªõi thi·∫øt k·∫ø ƒë·∫πp
            create_price_card(
                latest_candle['close'],
                price_change,
                price_change_pct,
                st.session_state.data_fetch_status.get('last_update')
            )
        
        with col2:
            # Hi·ªÉn th·ªã kh·ªëi l∆∞·ª£ng giao d·ªãch
            create_metric_card(
                "Kh·ªëi l∆∞·ª£ng 24h",
                f"{latest_candle['volume'] / 1000000:.2f}M",
                icon="üìä",
                color="blue"
            )
        
        with col3:
            # Hi·ªÉn th·ªã bi·∫øn ƒë·ªông (ATR)
            if 'atr' in latest_candle:
                volatility = latest_candle['atr']
            else:
                volatility = (latest_candle['high'] - latest_candle['low']) / latest_candle['close'] * 100
            
            create_metric_card(
                "Bi·∫øn ƒë·ªông",
                f"{volatility:.2f}%",
                icon="üìâ",
                color="yellow" if volatility > 2 else "blue"
            )
            
        with col4:
            # Hi·ªÉn th·ªã RSI n·∫øu c√≥
            if 'rsi' in latest_candle:
                rsi = latest_candle['rsi']
                color = "red" if rsi > 70 else "green" if rsi < 30 else "blue"
                create_metric_card(
                    "RSI",
                    f"{rsi:.1f}",
                    icon="üîç",
                    color=color
                )
            else:
                create_metric_card(
                    "C·∫≠p nh·∫≠t",
                    st.session_state.data_fetch_status.get('last_update', 'N/A').split()[1],
                    icon="‚è±Ô∏è",
                    color="blue"
                )
        
        # Row 2: D·ª± ƒëo√°n hi·ªán t·∫°i v√† bi·ªÉu ƒë·ªì
        st.markdown("### D·ª± ƒëo√°n v√† bi·ªÉu ƒë·ªì gi√°")
        
        pred_col, chart_col = st.columns([1, 2])
        
        with pred_col:
            # L·∫•y d·ª± ƒëo√°n g·∫ßn nh·∫•t
            if st.session_state.predictions and len(st.session_state.predictions) > 0:
                latest_prediction = st.session_state.predictions[-1]
                
                # T√≠nh th·ªùi gian c√≤n l·∫°i
                if 'timestamp' in latest_prediction and 'valid_for_minutes' in latest_prediction:
                    pred_time = datetime.strptime(latest_prediction['timestamp'], "%Y-%m-%d %H:%M:%S")
                    elapsed_minutes = (datetime.now() - pred_time).total_seconds() / 60
                    minutes_left = max(0, latest_prediction['valid_for_minutes'] - elapsed_minutes)
                    latest_prediction['valid_minutes_left'] = minutes_left
                
                # Hi·ªÉn th·ªã d·ª± ƒëo√°n v·ªõi thi·∫øt k·∫ø ƒë·∫πp m·∫Øt
                create_prediction_card(latest_prediction)
                
                # Hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y b·∫±ng bi·ªÉu ƒë·ªì gauge
                confidence = latest_prediction.get('confidence', 0)
                st.plotly_chart(
                    create_gauge_chart(
                        confidence,
                        "ƒê·ªô tin c·∫≠y d·ª± ƒëo√°n",
                        min_value=0,
                        max_value=1,
                        color_thresholds=[
                            (0.3, "red"),
                            (0.7, "orange"),
                            (1.0, "green")
                        ]
                    ),
                    use_container_width=True
                )
                
                # Hi·ªÉn th·ªã n√∫t t·∫°o d·ª± ƒëo√°n m·ªõi
                if st.button("üîÆ T·∫°o d·ª± ƒëo√°n m·ªõi", use_container_width=True):
                    with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n m·ªõi..."):
                        make_prediction()
                        show_toast("ƒê√£ t·∫°o d·ª± ƒëo√°n m·ªõi!", "success")
                        st.rerun()
                
            else:
                st.info("Ch∆∞a c√≥ d·ª± ƒëo√°n n√†o ƒë∆∞·ª£c t·∫°o")
                if st.button("üöÄ T·∫°o d·ª± ƒëo√°n ƒë·∫ßu ti√™n", use_container_width=True):
                    with st.spinner("ƒêang t·∫°o d·ª± ƒëo√°n..."):
                        make_prediction()
                        show_toast("ƒê√£ t·∫°o d·ª± ƒëo√°n ƒë·∫ßu ti√™n!", "success")
                        st.rerun()
        
        with chart_col:
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øn v·ªõi ch·ª©c nƒÉng ch·ªçn khung th·ªùi gian
            timeframe_options = {
                '50 n·∫øn g·∫ßn nh·∫•t': 50, 
                '100 n·∫øn g·∫ßn nh·∫•t': 100, 
                '200 n·∫øn g·∫ßn nh·∫•t': 200,
                'T·∫•t c·∫£ d·ªØ li·ªáu': len(st.session_state.latest_data)
            }
            
            selected_tf = st.selectbox(
                "Hi·ªÉn th·ªã",
                options=list(timeframe_options.keys()),
                index=1
            )
            
            candles = timeframe_options[selected_tf]
            
            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øn v·ªõi Plotly
            try:
                chart_data = st.session_state.latest_data.iloc[-candles:].copy()
                # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë·∫ßu v√†o h·ª£p l·ªá
                if not chart_data.empty:
                    chart = plot_candlestick_chart(chart_data)
                    st.plotly_chart(chart, use_container_width=True, key="main_candlestick_chart")
                else:
                    st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì")
            except Exception as e:
                st.error(f"L·ªói khi hi·ªÉn th·ªã bi·ªÉu ƒë·ªì: {str(e)}")
                # Ghi l·∫°i l·ªói v√†o logs
                print(f"Error plotting candlestick chart: {str(e)}")
        
        # Row 3: L·ªãch s·ª≠ d·ª± ƒëo√°n v√† hi·ªáu su·∫•t m√¥ h√¨nh
        st.markdown("### Ph√¢n t√≠ch hi·ªáu su·∫•t")
        
        perf_col, hist_col = st.columns(2)
        
        with perf_col:
            st.subheader("Hi·ªáu su·∫•t c√°c m√¥ h√¨nh")
            
            # L·∫•y hi·ªáu su·∫•t t·ª´ c√°c m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
            if hasattr(st.session_state, 'model_performance') and st.session_state.model_performance:
                model_performance = st.session_state.model_performance
            else:
                # Hi·ªáu su·∫•t m·∫´u n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu th·ª±c t·∫ø
                model_performance = {
                    'lstm': 0.72,
                    'transformer': 0.76,
                    'cnn': 0.68,
                    'historical_similarity': 0.65,
                    'meta_learner': 0.81
                }
            
            # V·∫Ω bi·ªÉu ƒë·ªì hi·ªáu su·∫•t
            perf_chart = plot_model_performance(model_performance)
            st.plotly_chart(perf_chart, use_container_width=True)
            
        with hist_col:
            st.subheader("L·ªãch s·ª≠ d·ª± ƒëo√°n")
            
            if st.session_state.predictions and len(st.session_state.predictions) > 0:
                # V·∫Ω bi·ªÉu ƒë·ªì l·ªãch s·ª≠ d·ª± ƒëo√°n
                try:
                    # Sao ch√©p d·ªØ li·ªáu ƒë·ªÉ tr√°nh l·ªói khi x·ª≠ l√Ω
                    prediction_data = st.session_state.predictions.copy()
                    hist_chart = plot_prediction_history(prediction_data)
                    st.plotly_chart(hist_chart, use_container_width=True, key="prediction_history_chart")
                except Exception as e:
                    st.error(f"L·ªói khi hi·ªÉn th·ªã l·ªãch s·ª≠ d·ª± ƒëo√°n: {str(e)}")
                    print(f"Error plotting prediction history: {str(e)}")
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ d·ª± ƒëo√°n")
    
    with main_tabs[1]:
        # Tab ph√¢n t√≠ch k·ªπ thu·∫≠t
        if not st.session_state.initialized or st.session_state.latest_data is None:
            st.warning("ƒêang kh·ªüi t·∫°o v√† t·∫£i d·ªØ li·ªáu...")
            return
        
        # T·∫°o ti√™u ƒë·ªÅ v·ªõi bi·ªÉu t∆∞·ª£ng ƒë·∫πp
        create_section_header(
            "Ph√¢n t√≠ch k·ªπ thu·∫≠t chi ti·∫øt", 
            "Ph√¢n t√≠ch k·ªπ thu·∫≠t n√¢ng cao v·ªõi c√°c ch·ªâ b√°o v√† c√¥ng c·ª• ph√¢n t√≠ch", 
            icon="üìä"
        )
        
        # T·∫°o c√°c tab con cho ph√¢n t√≠ch k·ªπ thu·∫≠t
        tech_tabs = st.tabs(["üìä Ch·ªâ b√°o k·ªπ thu·∫≠t", "üîç M·∫´u h√¨nh n·∫øn", "üìè H·ªó tr·ª£ & Kh√°ng c·ª±", "üìâ Ph√¢n t√≠ch xu h∆∞·ªõng"])
        
        with tech_tabs[0]:
            # Tab ch·ªâ b√°o k·ªπ thu·∫≠t
            st.subheader("Ch·ªâ b√°o k·ªπ thu·∫≠t n√¢ng cao")
            
            # Th√™m m√¥ t·∫£
            st.markdown("""
            Ch·ªâ b√°o k·ªπ thu·∫≠t l√† c√¥ng c·ª• ph√¢n t√≠ch d·ª±a tr√™n gi√°, kh·ªëi l∆∞·ª£ng v√† c√°c d·ªØ li·ªáu th·ªã tr∆∞·ªùng kh√°c.
            Ch√∫ng gi√∫p nh√† ƒë·∫ßu t∆∞ ƒë∆∞a ra quy·∫øt ƒë·ªãnh d·ª±a tr√™n ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng.
            """)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ch·ªâ b√°o
            indicators_chart = plot_technical_indicators(st.session_state.latest_data.iloc[-100:])
            st.plotly_chart(indicators_chart, use_container_width=True)
            
            # Hi·ªÉn th·ªã gi·∫£i th√≠ch cho t·ª´ng ch·ªâ b√°o
            with st.expander("Gi·∫£i th√≠ch c√°c ch·ªâ b√°o", expanded=False):
                st.markdown("""
                ### SuperTrend
                - Ch·ªâ b√°o xu h∆∞·ªõng d·ª±a tr√™n ATR v√† c√°c ph√©p t√≠nh trung b√¨nh
                - ƒê∆∞·ªùng tr√™n (ƒë·ªè): Xu h∆∞·ªõng gi·∫£m
                - ƒê∆∞·ªùng d∆∞·ªõi (xanh): Xu h∆∞·ªõng tƒÉng
                
                ### RSI (Relative Strength Index)
                - Dao ƒë·ªông t·ª´ 0-100
                - Tr√™n 70: V√πng qu√° mua
                - D∆∞·ªõi 30: V√πng qu√° b√°n
                - 50: Ng∆∞·ª°ng trung t√≠nh
                
                ### ADX (Average Directional Index)
                - ƒêo l∆∞·ªùng s·ª©c m·∫°nh xu h∆∞·ªõng
                - < 20: Xu h∆∞·ªõng y·∫øu
                - 20-40: Xu h∆∞·ªõng trung b√¨nh
                - > 40: Xu h∆∞·ªõng m·∫°nh
                - Kh√¥ng ch·ªâ ra h∆∞·ªõng xu h∆∞·ªõng
                
                ### Bollinger Bands
                - D·ª±a tr√™n trung b√¨nh ƒë·ªông v√† ƒë·ªô l·ªách chu·∫©n
                - Band tr√™n/d∆∞·ªõi: Gi√° c√≥ th·ªÉ bi·∫øn ƒë·ªông trong v√πng n√†y
                - BƒÉng h·∫πp: Th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông th·∫•p, chu·∫©n b·ªã b√πng n·ªï
                - BƒÉng r·ªông: Th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông cao
                """)
            
            # Hi·ªÉn th·ªã t√≥m t·∫Øt tr·∫°ng th√°i hi·ªán t·∫°i
            st.subheader("T√≥m t·∫Øt tr·∫°ng th√°i hi·ªán t·∫°i")
            
            # T√≠nh to√°n v√† hi·ªÉn th·ªã c√°c gi√° tr·ªã
            latest = st.session_state.latest_data.iloc[-1]
            
            # T·∫°o b·∫£ng th√¥ng tin
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Ch·ªâ b√°o xu h∆∞·ªõng
                if 'supertrend_direction' in latest:
                    trend_direction = "TƒÉng" if latest['supertrend_direction'] == 1 else "Gi·∫£m"
                    trend_color = "green" if latest['supertrend_direction'] == 1 else "red"
                else:
                    # T√≠nh EMA t·ª´ d·ªØ li·ªáu g·∫ßn ƒë√¢y
                    recent_data = st.session_state.latest_data.tail(30)
                    ema9 = recent_data['close'].rolling(window=9).mean().iloc[-1] if len(recent_data) > 0 else 0
                    ema21 = recent_data['close'].rolling(window=21).mean().iloc[-1] if len(recent_data) > 0 else 0
                    trend_direction = "TƒÉng" if ema9 > ema21 else "Gi·∫£m"
                    trend_color = "green" if ema9 > ema21 else "red"
                
                st.markdown(f"**Xu h∆∞·ªõng:** <span style='color:{trend_color}'>{trend_direction}</span>", unsafe_allow_html=True)
                
                # RSI
                if 'rsi' in latest:
                    rsi = latest['rsi']
                    rsi_status = "Qu√° mua" if rsi > 70 else "Qu√° b√°n" if rsi < 30 else "Trung t√≠nh"
                    rsi_color = "red" if rsi > 70 else "green" if rsi < 30 else "gray"
                    st.markdown(f"**RSI:** <span style='color:{rsi_color}'>{rsi:.1f} ({rsi_status})</span>", unsafe_allow_html=True)
                
                # MACD
                if 'macd' in latest and 'macd_signal' in latest:
                    macd = latest['macd']
                    macd_signal = latest['macd_signal']
                    macd_hist = macd - macd_signal
                    macd_status = "TƒÉng" if macd > macd_signal else "Gi·∫£m"
                    macd_color = "green" if macd > macd_signal else "red"
                    st.markdown(f"**MACD:** <span style='color:{macd_color}'>{macd_hist:.4f} ({macd_status})</span>", unsafe_allow_html=True)
            
            with col2:
                # Bollinger Bands
                if 'upper_band' in latest and 'lower_band' in latest:
                    bb_width = (latest['upper_band'] - latest['lower_band']) / latest['close']
                    bb_position = (latest['close'] - latest['lower_band']) / (latest['upper_band'] - latest['lower_band'])
                    bb_status = "Bi·∫øn ƒë·ªông cao" if bb_width > 0.05 else "Bi·∫øn ƒë·ªông th·∫•p"
                    
                    st.markdown(f"**BB Width:** {bb_width:.4f} ({bb_status})")
                    st.markdown(f"**BB Position:** {bb_position:.2f}")
                
                # ADX
                if 'adx' in latest:
                    adx = latest['adx']
                    adx_status = "Xu h∆∞·ªõng m·∫°nh" if adx > 25 else "Xu h∆∞·ªõng y·∫øu"
                    st.markdown(f"**ADX:** {adx:.1f} ({adx_status})")
                
            with col3:
                # Volume
                vol_change = (latest['volume'] / st.session_state.latest_data['volume'].iloc[-10:-1].mean() - 1) * 100
                vol_status = "TƒÉng" if vol_change > 0 else "Gi·∫£m"
                vol_color = "green" if vol_change > 0 else "red"
                
                st.markdown(f"**Kh·ªëi l∆∞·ª£ng:** <span style='color:{vol_color}'>{vol_change:.1f}% ({vol_status})</span>", unsafe_allow_html=True)
                
                # Volatility (ATR)
                if 'atr' in latest:
                    atr = latest['atr']
                    atr_pct = atr / latest['close'] * 100
                    st.markdown(f"**Bi·∫øn ƒë·ªông (ATR):** {atr_pct:.2f}%")
                
                # Trend Strength
                if 'adx' in latest:
                    trend_strength = "M·∫°nh" if latest['adx'] > 25 else "Trung b√¨nh" if latest['adx'] > 15 else "Y·∫øu"
                    st.markdown(f"**ƒê·ªô m·∫°nh xu h∆∞·ªõng:** {trend_strength}")
        
        with tech_tabs[1]:
            # Tab m·∫´u h√¨nh n·∫øn
            st.subheader("Ph√¢n t√≠ch m·∫´u h√¨nh n·∫øn")
            
            # Hi·ªÉn th·ªã gi·∫£i th√≠ch
            st.markdown("""
            M·∫´u h√¨nh n·∫øn Nh·∫≠t B·∫£n l√† c√°c h√¨nh m·∫´u ƒë·∫∑c tr∆∞ng trong bi·ªÉu ƒë·ªì gi√°, cung c·∫•p th√¥ng tin v·ªÅ t√¢m l√Ω th·ªã tr∆∞·ªùng
            v√† kh·∫£ nƒÉng bi·∫øn ƒë·ªông gi√° trong t∆∞∆°ng lai.
            """)
            
            # Ph√°t hi·ªán m·∫´u h√¨nh n·∫øn
            from utils.pattern_recognition import detect_candlestick_patterns
            candle_patterns = detect_candlestick_patterns(st.session_state.latest_data.iloc[-5:])
            
            if candle_patterns and len(candle_patterns) > 0:
                st.subheader("M·∫´u h√¨nh n·∫øn ph√°t hi·ªán ƒë∆∞·ª£c")
                
                for pattern in candle_patterns:
                    pattern_color = "green" if pattern['direction'] == 'bullish' else "red"
                    
                    st.markdown(f"""
                    <div style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); 
                                border-left: 4px solid {pattern_color}; margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <div style="font-size: 18px; font-weight: bold;">{pattern['name']}</div>
                                <div style="margin-top: 5px; color: #5f6368;">{pattern['description']}</div>
                                <div style="margin-top: 10px;">
                                    <span style="color: {pattern_color}; font-weight: bold;">
                                        {pattern['direction'].title()} ({pattern['reliability']}% ƒë·ªô tin c·∫≠y)
                                    </span>
                                </div>
                            </div>
                            <div style="font-size: 36px; color: {pattern_color};">
                                {'üìà' if pattern['direction'] == 'bullish' else 'üìâ'}
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c m·∫´u h√¨nh n·∫øn r√µ r√†ng cho 5 n·∫øn g·∫ßn ƒë√¢y")
            
            # Hi·ªÉn th·ªã b·∫£ng tham kh·∫£o v·ªÅ m·∫´u h√¨nh n·∫øn ph·ªï bi·∫øn
            with st.expander("Tham kh·∫£o c√°c m·∫´u h√¨nh n·∫øn ph·ªï bi·∫øn", expanded=False):
                st.markdown("""
                ### M·∫´u h√¨nh tƒÉng
                - **Hammer (B√∫a)**: N·∫øn c√≥ th√¢n nh·ªè, b√≥ng d∆∞·ªõi d√†i, xu·∫•t hi·ªán trong xu h∆∞·ªõng gi·∫£m
                - **Morning Star (Sao Mai)**: M·∫´u h√¨nh 3 n·∫øn, n·∫øn gi·ªØa l√† n·∫øn nh·ªè (doji ho·∫∑c spinning top)
                - **Bullish Engulfing (Bao ph·ªß tƒÉng)**: N·∫øn tƒÉng bao ph·ªß ho√†n to√†n n·∫øn gi·∫£m tr∆∞·ªõc ƒë√≥
                - **Piercing Line (ƒê∆∞·ªùng xuy√™n)**: N·∫øn gi·∫£m sau ƒë√≥ l√† n·∫øn tƒÉng m·ªü c·ª≠a th·∫•p h∆°n v√† ƒë√≥ng c·ª≠a cao h∆°n ƒëi·ªÉm gi·ªØa n·∫øn tr∆∞·ªõc
                
                ### M·∫´u h√¨nh gi·∫£m
                - **Shooting Star (Sao BƒÉng)**: N·∫øn c√≥ th√¢n nh·ªè, b√≥ng tr√™n d√†i, xu·∫•t hi·ªán trong xu h∆∞·ªõng tƒÉng
                - **Evening Star (Sao H√¥m)**: M·∫´u h√¨nh 3 n·∫øn, n·∫øn gi·ªØa l√† n·∫øn nh·ªè
                - **Bearish Engulfing (Bao ph·ªß gi·∫£m)**: N·∫øn gi·∫£m bao ph·ªß ho√†n to√†n n·∫øn tƒÉng tr∆∞·ªõc ƒë√≥
                - **Dark Cloud Cover (M√¢y ƒêen Bao Ph·ªß)**: N·∫øn tƒÉng sau ƒë√≥ l√† n·∫øn gi·∫£m m·ªü c·ª≠a cao h∆°n v√† ƒë√≥ng c·ª≠a th·∫•p h∆°n ƒëi·ªÉm gi·ªØa n·∫øn tr∆∞·ªõc
                
                ### M·∫´u h√¨nh trung l·∫≠p
                - **Doji**: N·∫øn c√≥ gi√° m·ªü c·ª≠a v√† ƒë√≥ng c·ª≠a g·∫ßn nh∆∞ b·∫±ng nhau
                - **Spinning Top (Con Quay)**: N·∫øn c√≥ th√¢n nh·ªè v√† b√≥ng tr√™n/d∆∞·ªõi d√†i b·∫±ng nhau
                - **Harami (Thai Ngh√©n)**: N·∫øn c√≥ th√¢n l·ªõn sau ƒë√≥ l√† n·∫øn c√≥ th√¢n nh·ªè n·∫±m ho√†n to√†n trong th√¢n n·∫øn tr∆∞·ªõc
                """)
            
        with tech_tabs[2]:
            # Tab h·ªó tr·ª£ v√† kh√°ng c·ª±
            st.subheader("Ph√¢n t√≠ch v√πng h·ªó tr·ª£ v√† kh√°ng c·ª±")
            
            # Hi·ªÉn th·ªã gi·∫£i th√≠ch
            st.markdown("""
            C√°c v√πng h·ªó tr·ª£ v√† kh√°ng c·ª± l√† c√°c m·ª©c gi√° quan tr·ªçng n∆°i gi√° c√≥ xu h∆∞·ªõng g·∫∑p ph·∫£n ·ª©ng. 
            V√πng h·ªó tr·ª£ l√† n∆°i gi√° c√≥ th·ªÉ d·ª´ng gi·∫£m v√† ƒë·∫£o chi·ªÅu, v√πng kh√°ng c·ª± l√† n∆°i gi√° c√≥ th·ªÉ d·ª´ng tƒÉng v√† ƒë·∫£o chi·ªÅu.
            """)
            
            # Ph√°t hi·ªán c√°c m·ª©c h·ªó tr·ª£/kh√°ng c·ª±
            from utils.pattern_recognition import calculate_support_resistance
            support_resistance = calculate_support_resistance(st.session_state.latest_data.iloc[-100:])
            
            if support_resistance:
                # L·∫•y gi√° hi·ªán t·∫°i
                current_price = st.session_state.latest_data['close'].iloc[-1]
                
                # Hi·ªÉn th·ªã c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª±
                st.subheader("C√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª±")
                
                # T·∫°o b·∫£ng c√°c m·ª©c
                support_levels = sorted([level for level in support_resistance['support'] if level < current_price], reverse=True)
                resistance_levels = sorted([level for level in support_resistance['resistance'] if level > current_price])
                
                if len(support_levels) > 0 or len(resistance_levels) > 0:
                    # T·∫°o hai c·ªôt
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"##### C√°c m·ª©c kh√°ng c·ª±")
                        for i, level in enumerate(resistance_levels[:3]):  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 m·ª©c
                            distance = ((level / current_price) - 1) * 100
                            st.markdown(f"""
                            <div style="display: flex; justify-content: space-between; padding: 5px 0; 
                                       border-bottom: 1px solid #eaeaea; margin-bottom: 5px;">
                                <div style="font-weight: bold;">R{i+1}</div>
                                <div>${level:.2f}</div>
                                <div style="color: red;">+{distance:.2f}%</div>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    with col2:
                        st.markdown(f"##### C√°c m·ª©c h·ªó tr·ª£")
                        for i, level in enumerate(support_levels[:3]):  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 m·ª©c
                            distance = ((level / current_price) - 1) * 100
                            st.markdown(f"""
                            <div style="display: flex; justify-content: space-between; padding: 5px 0; 
                                       border-bottom: 1px solid #eaeaea; margin-bottom: 5px;">
                                <div style="font-weight: bold;">S{i+1}</div>
                                <div>${level:.2f}</div>
                                <div style="color: green;">{distance:.2f}%</div>
                            </div>
                            """, unsafe_allow_html=True)
                
                # V·∫Ω bi·ªÉu ƒë·ªì v·ªõi c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª±
                fig = go.Figure()
                
                # Th√™m ƒë∆∞·ªùng gi√°
                fig.add_trace(go.Scatter(
                    x=st.session_state.latest_data.iloc[-100:].index, 
                    y=st.session_state.latest_data.iloc[-100:]['close'],
                    mode='lines',
                    name='Gi√°',
                    line=dict(color='black', width=1)
                ))
                
                # Th√™m m·ª©c kh√°ng c·ª±
                for i, level in enumerate(resistance_levels[:3]):
                    fig.add_shape(
                        type="line",
                        x0=st.session_state.latest_data.iloc[-100:].index[0],
                        y0=level,
                        x1=st.session_state.latest_data.iloc[-100:].index[-1],
                        y1=level,
                        line=dict(color="red", width=1, dash="dash"),
                    )
                    fig.add_annotation(
                        x=st.session_state.latest_data.iloc[-100:].index[-1],
                        y=level,
                        text=f"R{i+1}: ${level:.2f}",
                        showarrow=False,
                        xshift=10,
                        align="left",
                        bgcolor="rgba(255,0,0,0.1)"
                    )
                
                # Th√™m m·ª©c h·ªó tr·ª£
                for i, level in enumerate(support_levels[:3]):
                    fig.add_shape(
                        type="line",
                        x0=st.session_state.latest_data.iloc[-100:].index[0],
                        y0=level,
                        x1=st.session_state.latest_data.iloc[-100:].index[-1],
                        y1=level,
                        line=dict(color="green", width=1, dash="dash"),
                    )
                    fig.add_annotation(
                        x=st.session_state.latest_data.iloc[-100:].index[-1],
                        y=level,
                        text=f"S{i+1}: ${level:.2f}",
                        showarrow=False,
                        xshift=10,
                        align="left",
                        bgcolor="rgba(0,255,0,0.1)"
                    )
                
                # Th√™m gi√° hi·ªán t·∫°i
                fig.add_shape(
                    type="line",
                    x0=st.session_state.latest_data.iloc[-100:].index[0],
                    y0=current_price,
                    x1=st.session_state.latest_data.iloc[-100:].index[-1],
                    y1=current_price,
                    line=dict(color="blue", width=1, dash="dot"),
                )
                fig.add_annotation(
                    x=st.session_state.latest_data.iloc[-100:].index[0],
                    y=current_price,
                    text=f"Current: ${current_price:.2f}",
                    showarrow=False,
                    xshift=-10,
                    xanchor="right",
                    bgcolor="rgba(0,0,255,0.1)"
                )
                
                # C·∫≠p nh·∫≠t layout
                fig.update_layout(
                    title="Bi·ªÉu ƒë·ªì v·ªõi c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª±",
                    xaxis_title="Ng√†y",
                    yaxis_title="Gi√° (USDT)",
                    height=400,
                    margin=dict(l=50, r=50, t=50, b=50),
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Hi·ªÉn th·ªã gi·∫£i th√≠ch cho c√°c m·ª©c Fibonacci
                with st.expander("Fibonacci Retracement Levels", expanded=False):
                    st.markdown("""
                    ### C√°c m·ª©c Fibonacci Retracement
                    
                    Fibonacci Retracement l√† c√¥ng c·ª• ph√¢n t√≠ch k·ªπ thu·∫≠t s·ª≠ d·ª•ng c√°c t·ª∑ l·ªá Fibonacci ƒë·ªÉ x√°c ƒë·ªãnh c√°c m·ª©c h·ªó tr·ª£/kh√°ng c·ª± ti·ªÅm nƒÉng.
                    
                    C√°c m·ª©c ph·ªï bi·∫øn:
                    - **0.236** - M·ª©c y·∫øu nh·∫•t
                    - **0.382** - M·ª©c quan tr·ªçng ƒë·∫ßu ti√™n, th∆∞·ªùng l√† n∆°i gi√° ƒë·∫£o chi·ªÅu nh·ªè
                    - **0.5** - M·ª©c gi·ªØa ƒë∆∞·ªùng (kh√¥ng ph·∫£i s·ªë Fibonacci nh∆∞ng quan tr·ªçng trong t√¢m l√Ω th·ªã tr∆∞·ªùng)
                    - **0.618** - M·ª©c m·∫°nh nh·∫•t, n∆°i gi√° th∆∞·ªùng c√≥ ph·∫£n ·ª©ng r√µ r√†ng
                    - **0.786** - M·ª©c cu·ªëi c√πng tr∆∞·ªõc khi quay v·ªÅ m·ª©c cao/th·∫•p tr∆∞·ªõc ƒë√≥
                    - **1.0** - M·ª©c ƒë·ªânh/ƒë√°y tr∆∞·ªõc ƒë√≥
                    
                    C√°c m·ª©c n√†y r·∫•t h·ªØu √≠ch ƒë·ªÉ x√°c ƒë·ªãnh m·ª•c ti√™u l·ª£i nhu·∫≠n v√† d·ª´ng l·ªó trong giao d·ªãch.
                    """)
            else:
                st.info("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª±")
                
        with tech_tabs[3]:
            # Tab ph√¢n t√≠ch xu h∆∞·ªõng
            st.subheader("Ph√¢n t√≠ch xu h∆∞·ªõng")
            
            # Hi·ªÉn th·ªã gi·∫£i th√≠ch
            st.markdown("""
            Ph√¢n t√≠ch xu h∆∞·ªõng l√† vi·ªác x√°c ƒë·ªãnh h∆∞·ªõng di chuy·ªÉn ch·ªß ƒë·∫°o c·ªßa th·ªã tr∆∞·ªùng. 
            Xu h∆∞·ªõng c√≥ th·ªÉ l√† tƒÉng (uptrend), gi·∫£m (downtrend) ho·∫∑c ƒëi ngang (sideways/consolidation).
            """)
            
            # Ph√¢n t√≠ch xu h∆∞·ªõng
            from utils.pattern_recognition import analyze_price_trend
            trend_analysis = analyze_price_trend(st.session_state.latest_data.iloc[-50:])
            
            if trend_analysis:
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch
                st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch xu h∆∞·ªõng")
                
                trend_color = "green" if trend_analysis['trend'] == 'uptrend' else "red" if trend_analysis['trend'] == 'downtrend' else "gray"
                trend_text = "Xu h∆∞·ªõng tƒÉng" if trend_analysis['trend'] == 'uptrend' else "Xu h∆∞·ªõng gi·∫£m" if trend_analysis['trend'] == 'downtrend' else "ƒêi ngang"
                
                st.markdown(f"""
                <div style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); 
                            border-left: 4px solid {trend_color}; margin-bottom: 15px;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-size: 24px; font-weight: bold; color: {trend_color};">{trend_text}</div>
                            <div style="margin-top: 10px;">
                                <div><b>ƒê·ªô m·∫°nh:</b> {trend_analysis['strength']}/10</div>
                                <div><b>Th·ªùi gian:</b> {trend_analysis['duration']} n·∫øn</div>
                                <div><b>ƒê·ªô d·ªëc:</b> {trend_analysis['slope']:.4f}/n·∫øn</div>
                            </div>
                        </div>
                        <div style="font-size: 48px; color: {trend_color};">
                            {'üìà' if trend_analysis['trend'] == 'uptrend' else 'üìâ' if trend_analysis['trend'] == 'downtrend' else 'üìä'}
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng
                fig = go.Figure()
                
                # Th√™m ƒë∆∞·ªùng gi√°
                fig.add_trace(go.Scatter(
                    x=st.session_state.latest_data.iloc[-50:].index, 
                    y=st.session_state.latest_data.iloc[-50:]['close'],
                    mode='lines',
                    name='Gi√°',
                    line=dict(color='black', width=1)
                ))
                
                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if 'trendline' in trend_analysis:
                    fig.add_trace(go.Scatter(
                        x=st.session_state.latest_data.iloc[-50:].index, 
                        y=trend_analysis['trendline'],
                        mode='lines',
                        name='ƒê∆∞·ªùng xu h∆∞·ªõng',
                        line=dict(color=trend_color, width=2)
                    ))
                
                # Th√™m c√°c m·ª©c h·ªó tr·ª£ v√† kh√°ng c·ª± theo xu h∆∞·ªõng
                if 'support_levels' in trend_analysis:
                    for i, level in enumerate(trend_analysis['support_levels'][:2]):
                        fig.add_shape(
                            type="line",
                            x0=st.session_state.latest_data.iloc[-50:].index[0],
                            y0=level,
                            x1=st.session_state.latest_data.iloc[-50:].index[-1],
                            y1=level,
                            line=dict(color="green", width=1, dash="dash"),
                        )
                
                if 'resistance_levels' in trend_analysis:
                    for i, level in enumerate(trend_analysis['resistance_levels'][:2]):
                        fig.add_shape(
                            type="line",
                            x0=st.session_state.latest_data.iloc[-50:].index[0],
                            y0=level,
                            x1=st.session_state.latest_data.iloc[-50:].index[-1],
                            y1=level,
                            line=dict(color="red", width=1, dash="dash"),
                        )
                
                # C·∫≠p nh·∫≠t layout
                fig.update_layout(
                    title="Ph√¢n t√≠ch xu h∆∞·ªõng",
                    xaxis_title="Ng√†y",
                    yaxis_title="Gi√° (USDT)",
                    height=400,
                    margin=dict(l=50, r=50, t=50, b=50),
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Hi·ªÉn th·ªã gi·∫£i th√≠ch th√™m
                with st.expander("C√°c lo·∫°i xu h∆∞·ªõng v√† c√°ch ph√°t hi·ªán", expanded=False):
                    st.markdown("""
                    ### C√°c lo·∫°i xu h∆∞·ªõng v√† ƒë·∫∑c ƒëi·ªÉm
                    
                    #### Xu h∆∞·ªõng tƒÉng (Uptrend)
                    - **ƒê·∫∑c ƒëi·ªÉm**: C√°c ƒë·ªânh cao h∆°n (Higher Highs - HH) v√† c√°c ƒë√°y cao h∆°n (Higher Lows - HL)
                    - **Ch·ªâ b√°o h·ªó tr·ª£**: MA ng·∫Øn h·∫°n n·∫±m tr√™n MA d√†i h·∫°n, RSI tr√™n 50, ADX cao
                    - **Chi·∫øn l∆∞·ª£c**: "Buy the dips" - mua v√†o khi gi√° ƒëi·ªÅu ch·ªânh v·ªÅ g·∫ßn ƒë∆∞·ªùng xu h∆∞·ªõng
                    
                    #### Xu h∆∞·ªõng gi·∫£m (Downtrend)
                    - **ƒê·∫∑c ƒëi·ªÉm**: C√°c ƒë·ªânh th·∫•p h∆°n (Lower Highs - LH) v√† c√°c ƒë√°y th·∫•p h∆°n (Lower Lows - LL)
                    - **Ch·ªâ b√°o h·ªó tr·ª£**: MA ng·∫Øn h·∫°n n·∫±m d∆∞·ªõi MA d√†i h·∫°n, RSI d∆∞·ªõi 50, ADX cao
                    - **Chi·∫øn l∆∞·ª£c**: "Sell the rallies" - b√°n khi gi√° ph·ª•c h·ªìi ng·∫Øn h·∫°n
                    
                    #### ƒêi ngang (Sideways/Consolidation)
                    - **ƒê·∫∑c ƒëi·ªÉm**: Gi√° dao ƒë·ªông trong m·ªôt bi√™n ƒë·ªô h·∫πp, kh√¥ng c√≥ xu h∆∞·ªõng r√µ r√†ng
                    - **Ch·ªâ b√°o h·ªó tr·ª£**: MAs ƒëan xen, RSI quanh 50, ADX th·∫•p (<20)
                    - **Chi·∫øn l∆∞·ª£c**: Giao d·ªãch bi√™n ƒë·ªô (mua ·ªü h·ªó tr·ª£, b√°n ·ªü kh√°ng c·ª±) ho·∫∑c ch·ªù breakout
                    
                    ### Ph∆∞∆°ng ph√°p x√°c ƒë·ªãnh:
                    - **Ph√¢n t√≠ch ƒë∆∞·ªùng xu h∆∞·ªõng**: V·∫Ω ƒë∆∞·ªùng n·ªëi c√°c ƒë·ªânh/ƒë√°y quan tr·ªçng
                    - **Ph√¢n t√≠ch m·∫´u h√¨nh**: M·∫´u h√¨nh tam gi√°c, c·ªù hi·ªáu, ƒë·∫ßu vai...
                    - **Ph√¢n t√≠ch k√™nh gi√°**: X√°c ƒë·ªãnh k√™nh gi√° tƒÉng/gi·∫£m/ngang
                    - **Ch·ªâ b√°o k·ªπ thu·∫≠t**: S·ª≠ d·ª•ng MA, MACD, RSI, ADX ƒë·ªÉ x√°c nh·∫≠n
                    """)
            else:
                st.info("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng")
    
    with main_tabs[2]:
        # Tab th√¥ng tin API
        st.markdown("## API Documentation")
        
        st.markdown("""
        ### Endpoints
        
        #### GET /predict
        
        Returns prediction data for ETHUSDT.
        
        **Query Parameters:**
        
        - `symbol`: Trading pair (default: ETHUSDT)
        - `interval`: Candle interval (default: 5m)
        
        **Response:**
        
        ```json
        {
            "prediction": "LONG",
            "confidence": 0.85,
            "price": 1234.56,
            "target_price": 1240.00,
            "reason": "Technical analysis indicates a bullish trend based on RSI, MACD, and price action",
            "timestamp": "2023-01-01 12:00:00",
            "valid_for_minutes": 30
        }
        ```
        
        **Fields:**
        
        - `prediction`: "LONG", "SHORT", or "NEUTRAL"
        - `confidence`: Confidence score from 0 to 1
        - `price`: Current price at time of prediction
        - `target_price`: Predicted target price
        - `reason`: Technical reasoning behind prediction
        - `timestamp`: When the prediction was generated
        
        ### Server Information
        
        The API server runs on port 8000 by default.
        
        ### Usage with curl
        
        ```bash
        curl "http://localhost:8000/predict?symbol=ETHUSDT&interval=5m"
        ```
        """)
        
        st.info("The API server must be started separately by running `python api.py`")
    
    with main_tabs[3]:
        # Tab h∆∞·ªõng d·∫´n
        st.markdown("## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        
        st.markdown("""
        ### T·ªïng quan
        
        H·ªá th·ªëng d·ª± ƒëo√°n ETH/USDT n√†y s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng v√† ƒë∆∞a ra d·ª± ƒëo√°n 
        v·ªÅ xu h∆∞·ªõng s·∫Øp t·ªõi c·ªßa c·∫∑p ti·ªÅn ETH/USDT. H·ªá th·ªëng s·ª≠ d·ª•ng nhi·ªÅu m√¥ h√¨nh kh√°c nhau ƒë·ªÉ t·∫°o ra d·ª± ƒëo√°n 
        ch√≠nh x√°c nh·∫•t.
        
        ### C√°ch s·ª≠ d·ª•ng
        
        1. **Dashboard**: Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan v·ªÅ th·ªã tr∆∞·ªùng v√† d·ª± ƒëo√°n g·∫ßn nh·∫•t
        2. **Technical Analysis**: Cung c·∫•p ph√¢n t√≠ch k·ªπ thu·∫≠t chi ti·∫øt v·ªõi nhi·ªÅu ch·ªâ b√°o
        3. **API**: Th√¥ng tin v·ªÅ c√°ch truy c·∫≠p API ƒë·ªÉ t√≠ch h·ª£p v·ªõi h·ªá th·ªëng kh√°c
        4. **Settings**: Thay ƒë·ªïi c√°c thi·∫øt l·∫≠p nh∆∞ khung th·ªùi gian, m√¥ h√¨nh d·ª± ƒëo√°n...
        
        ### C√°c ch·ª©c nƒÉng ch√≠nh
        
        - **D·ª± ƒëo√°n th·ªùi gian th·ª±c**: H·ªá th·ªëng t·ª± ƒë·ªông c·∫≠p nh·∫≠t d·ª± ƒëo√°n m·ªói 5 ph√∫t
        - **Ph√¢n t√≠ch ƒëa chi·ªÅu**: S·ª≠ d·ª•ng nhi·ªÅu ch·ªâ b√°o v√† m√¥ h√¨nh kh√°c nhau
        - **L·ªãch s·ª≠ d·ª± ƒëo√°n**: Xem l·∫°i c√°c d·ª± ƒëo√°n tr∆∞·ªõc ƒë√≥ v√† ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c
        - **Tu·ª≥ ch·ªânh th√¥ng s·ªë**: ƒêi·ªÅu ch·ªânh c√°c tham s·ªë d·ª± ƒëo√°n theo nhu c·∫ßu
        - **API t√≠ch h·ª£p**: T√≠ch h·ª£p v·ªõi c√°c h·ªá th·ªëng giao d·ªãch t·ª± ƒë·ªông
        
        ### L∆∞u √Ω quan tr·ªçng
        
        D·ª± ƒëo√°n t·ª´ h·ªá th·ªëng AI ch·ªâ l√† m·ªôt c√¥ng c·ª• tham kh·∫£o v√† kh√¥ng n√™n ƒë∆∞·ª£c coi l√† l·ªùi khuy√™n ƒë·∫ßu t∆∞. 
        Lu√¥n th·ª±c hi·ªán ph√¢n t√≠ch ri√™ng v√† qu·∫£n l√Ω r·ªßi ro tr∆∞·ªõc khi giao d·ªãch.
        """)
        
        with st.expander("M·∫πo s·ª≠ d·ª•ng hi·ªáu qu·∫£", expanded=False):
            st.markdown("""
            ### M·∫πo s·ª≠ d·ª•ng hi·ªáu qu·∫£
            
            1. **K·∫øt h·ª£p nhi·ªÅu khung th·ªùi gian**: So s√°nh d·ª± ƒëo√°n tr√™n nhi·ªÅu khung th·ªùi gian kh√°c nhau ƒë·ªÉ c√≥ c√°i nh√¨n t·ªïng quan h∆°n
            2. **Theo d√µi ƒë·ªô tin c·∫≠y**: Ch·ªâ c√¢n nh·∫Øc c√°c d·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y cao (tr√™n 70%)
            3. **K·∫øt h·ª£p v·ªõi ph√¢n t√≠ch c∆° b·∫£n**: C√°c tin t·ª©c th·ªã tr∆∞·ªùng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn gi√°
            4. **Ki·ªÉm tra l·ªãch s·ª≠ hi·ªáu su·∫•t**: Xem x√©t hi·ªáu su·∫•t c·ªßa t·ª´ng m√¥ h√¨nh tr∆∞·ªõc khi ra quy·∫øt ƒë·ªãnh
            5. **S·ª≠ d·ª•ng qu·∫£n l√Ω v·ªën h·ª£p l√Ω**: Kh√¥ng n√™n ƒë·∫∑t c∆∞·ª£c qu√° l·ªõn v√†o m·ªôt d·ª± ƒëo√°n, d√π ƒë·ªô tin c·∫≠y cao th·∫ø n√†o
            """)
        
        with st.expander("FAQ", expanded=False):
            st.markdown("""
            ### C√¢u h·ªèi th∆∞·ªùng g·∫∑p
            
            **H·ªá th·ªëng s·ª≠ d·ª•ng d·ªØ li·ªáu g√¨ ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n?**
            
            H·ªá th·ªëng s·ª≠ d·ª•ng d·ªØ li·ªáu l·ªãch s·ª≠ gi√° v√† kh·ªëi l∆∞·ª£ng t·ª´ Binance, c√πng v·ªõi c√°c ch·ªâ b√°o k·ªπ thu·∫≠t ƒë∆∞·ª£c t√≠nh to√°n t·ª´ d·ªØ li·ªáu n√†y.
            
            **C√°c m√¥ h√¨nh AI n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng?**
            
            H·ªá th·ªëng s·ª≠ d·ª•ng k·∫øt h·ª£p nhi·ªÅu m√¥ h√¨nh: LSTM, Transformer, CNN, v√† m√¥ h√¨nh t∆∞∆°ng ƒë·ªìng l·ªãch s·ª≠, c√πng v·ªõi m·ªôt m√¥ h√¨nh meta-learner ƒë·ªÉ k·∫øt h·ª£p k·∫øt qu·∫£.
            
            **D·ª± ƒëo√°n c√≥ ch√≠nh x√°c kh√¥ng?**
            
            Kh√¥ng c√≥ h·ªá th·ªëng d·ª± ƒëo√°n n√†o ƒë·∫°t ƒë·ªô ch√≠nh x√°c 100%. Hi·ªáu su·∫•t c·ªßa h·ªá th·ªëng dao ƒë·ªông t·ª´ 65-85% t√πy thu·ªôc v√†o ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng.
            
            **T√¥i c√≥ th·ªÉ t√≠ch h·ª£p h·ªá th·ªëng n√†y v·ªõi bot giao d·ªãch kh√¥ng?**
            
            C√≥, h·ªá th·ªëng cung c·∫•p API cho ph√©p t√≠ch h·ª£p d·ªÖ d√†ng v·ªõi c√°c bot giao d·ªãch v√† h·ªá th·ªëng kh√°c.
            
            **H·ªá th·ªëng c√≥ c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c kh√¥ng?**
            
            C√≥, h·ªá th·ªëng t·ª± ƒë·ªông c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ Binance v√† t·∫°o d·ª± ƒëo√°n m·ªõi m·ªói 5 ph√∫t.
            """)


# Initialize on startup
if not st.session_state.initialized:
    initialize_system()
    # Fetch data immediately after initialization to show real-time chart
    if st.session_state.initialized:
        fetch_data()

# Render giao di·ªán ch√≠nh
render_main_interface()